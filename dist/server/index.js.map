{"version":3,"sources":["../../server/utils/cache.ts","../../server/resources/base.ts","../../server/github/base.ts","../../server/github/repo-analyzer/commits.ts","../../server/github/repo-analyzer/pull-requests.ts","../../server/github/repo-analyzer/repository.ts","../../server/github/repo-analyzer/files.ts","../../server/github/repo-analyzer/icons.ts","../../server/github/repo-analyzer/index.ts","../../server/resources/contributors.ts","../../server/resources/icons.ts","../../server/resources/repository.ts","../../server/resources/commits.ts","../../server/resources/branches.ts","../../server/resources/files.ts","../../server/resources/stats.ts","../../server/agent/repo-cloner.ts","../../server/agent/explore.ts","../../server/agent/prompts/index.ts","../../server/agent/prompts/first_pass.ts","../../server/agent/prompts/features.ts","../../server/agent/prompts/services.ts","../../server/agent/tools.ts","../../server/agent/explore-wrapper.ts","../../server/persistence/FileStore.ts","../../server/events/ExplorationEmitter.ts","../../server/handler.ts","../../server/server.ts"],"sourcesContent":["interface CacheEntry {\n  data: any;\n  expires: number;\n}\n\nexport class GitSeeCache {\n  private cache = new Map<string, CacheEntry>();\n  private ttl: number;\n\n  constructor(ttl: number = 300) {\n    // 5 minutes default\n    this.ttl = ttl * 1000; // convert to ms\n  }\n\n  get(key: string): any | null {\n    const entry = this.cache.get(key);\n    if (!entry) return null;\n\n    if (Date.now() > entry.expires) {\n      this.cache.delete(key);\n      return null;\n    }\n\n    return entry.data;\n  }\n\n  set(key: string, data: any): void {\n    this.cache.set(key, {\n      data,\n      expires: Date.now() + this.ttl,\n    });\n  }\n\n  clear(): void {\n    this.cache.clear();\n  }\n}\n","import { GitSeeCache } from \"../utils/cache.js\";\n\nexport abstract class BaseResource {\n  protected cache: GitSeeCache;\n\n  constructor(cache: GitSeeCache) {\n    this.cache = cache;\n  }\n\n  protected getCacheKey(owner: string, repo: string, type: string): string {\n    return `${type}:${owner}/${repo}`;\n  }\n\n  protected async getCached<T>(\n    owner: string,\n    repo: string,\n    type: string,\n  ): Promise<T | undefined> {\n    const cacheKey = this.getCacheKey(owner, repo, type);\n    return this.cache.get(cacheKey);\n  }\n\n  protected setCached<T>(\n    owner: string,\n    repo: string,\n    type: string,\n    data: T,\n  ): void {\n    const cacheKey = this.getCacheKey(owner, repo, type);\n    this.cache.set(cacheKey, data);\n  }\n}\n","import { Octokit } from \"@octokit/rest\";\n\nexport interface RepoAnalyzerConfig {\n  githubToken?: string;\n  defaultLimit?: number;\n  defaultDays?: number;\n}\n\nexport abstract class BaseAnalyzer {\n  protected octokit: Octokit;\n  protected config: RepoAnalyzerConfig;\n\n  constructor(config: RepoAnalyzerConfig = {}) {\n    this.config = {\n      defaultLimit: 50,\n      defaultDays: 30,\n      ...config,\n    };\n\n    this.octokit = new Octokit({\n      auth: config.githubToken,\n    });\n  }\n\n  protected async paginate<T>(request: any, limit?: number): Promise<T[]> {\n    const actualLimit = limit || this.config.defaultLimit || 50;\n\n    if (actualLimit <= 100) {\n      // Single request\n      const response = await request({ per_page: actualLimit });\n      return response.data;\n    }\n\n    // Multiple requests needed\n    const results: T[] = [];\n    let page = 1;\n    const perPage = 100;\n\n    while (results.length < actualLimit) {\n      const remaining = actualLimit - results.length;\n      const requestSize = Math.min(perPage, remaining);\n\n      const response = await request({\n        per_page: requestSize,\n        page,\n      });\n\n      if (response.data.length === 0) break;\n\n      results.push(...response.data);\n      page++;\n    }\n\n    return results.slice(0, actualLimit);\n  }\n}\n","import { BaseAnalyzer } from \"../base.js\";\nimport { RepoCommit, ContributorFile, RecentCommitsOptions } from \"../types.js\";\n\nexport class CommitAnalyzer extends BaseAnalyzer {\n  // Internal method that returns raw commit data for other methods to use\n  private async getRecentCommitsRaw(\n    owner: string,\n    repo: string,\n    options: RecentCommitsOptions = {}\n  ): Promise<RepoCommit[]> {\n    const {\n      days = this.config.defaultDays,\n      limit = this.config.defaultLimit,\n      author,\n      since,\n      until,\n    } = options;\n\n    const sinceDate =\n      since ||\n      (days\n        ? new Date(Date.now() - days * 24 * 60 * 60 * 1000).toISOString()\n        : undefined);\n\n    const commits = await this.paginate<RepoCommit>(\n      (params: any) =>\n        this.octokit.rest.repos.listCommits({\n          owner,\n          repo,\n          author,\n          since: sinceDate,\n          until,\n          ...params,\n        }),\n      limit\n    );\n\n    return commits;\n  }\n\n  // Internal method that returns raw commit data with files for other methods to use\n  private async getRecentCommitsWithFilesRaw(\n    owner: string,\n    repo: string,\n    options: RecentCommitsOptions = {}\n  ): Promise<RepoCommit[]> {\n    const commits = await this.getRecentCommitsRaw(owner, repo, options);\n\n    // Fetch detailed commit info including files for each commit\n    const detailedCommits = await Promise.all(\n      commits.map(async (commit) => {\n        try {\n          const detailedCommit = await this.octokit.rest.repos.getCommit({\n            owner,\n            repo,\n            ref: commit.sha,\n          });\n\n          return {\n            ...commit,\n            files: detailedCommit.data.files || [],\n          };\n        } catch (error) {\n          // If we can't get detailed info, return commit without files\n          console.warn(\n            `Could not fetch files for commit ${commit.sha}:`,\n            error\n          );\n          return commit;\n        }\n      })\n    );\n\n    return detailedCommits;\n  }\n  async getRecentCommits(\n    owner: string,\n    repo: string,\n    options: RecentCommitsOptions = {}\n  ): Promise<string> {\n    const commits = await this.getRecentCommitsRaw(owner, repo, options);\n\n    let output = `\\n=== Recent Commits for ${owner}/${repo} ===\\n\\n`;\n\n    for (const commit of commits) {\n      output += `📝 ${commit.commit.message.split('\\n')[0]}\\n`;\n      output += `   SHA: ${commit.sha.substring(0, 8)}\\n`;\n      output += `   Author: ${commit.commit.author.name} (${commit.commit.author.email})\\n`;\n      output += `   Date: ${new Date(commit.commit.author.date).toLocaleDateString()} ${new Date(commit.commit.author.date).toLocaleTimeString()}\\n\\n`;\n    }\n\n    return output;\n  }\n\n  async getRecentCommitsWithFiles(\n    owner: string,\n    repo: string,\n    options: RecentCommitsOptions = {}\n  ): Promise<string> {\n    const detailedCommits = await this.getRecentCommitsWithFilesRaw(owner, repo, options);\n\n    let output = `\\n=== Recent Commits with Files for ${owner}/${repo} ===\\n\\n`;\n\n    for (const commit of detailedCommits) {\n      output += `📝 Commit: ${commit.commit.message.split('\\n')[0]}\\n`;\n      output += `   SHA: ${commit.sha.substring(0, 8)}\\n`;\n      output += `   Author: ${commit.commit.author.name} (${commit.commit.author.email})\\n`;\n      output += `   Date: ${new Date(commit.commit.author.date).toLocaleDateString()} ${new Date(commit.commit.author.date).toLocaleTimeString()}\\n`;\n\n      if (commit.files && commit.files.length > 0) {\n        output += `\\n   📁 Files changed (${commit.files.length}):\\n`;\n        commit.files.forEach((file, idx) => {\n          const statusEmoji = {\n            added: '➕',\n            modified: '📝',\n            removed: '❌',\n            renamed: '🔄',\n            copied: '📋',\n            changed: '🔧',\n            unchanged: '⚪'\n          }[file.status] || '📄';\n\n          output += `     ${idx + 1}. ${statusEmoji} ${file.filename} (+${file.additions}/-${file.deletions})\\n`;\n        });\n      }\n\n      output += '\\n' + '='.repeat(80) + '\\n\\n';\n    }\n\n    return output;\n  }\n\n  async getContributorCommits(\n    owner: string,\n    repo: string,\n    contributor: string,\n    limit?: number\n  ): Promise<string> {\n    const commits = await this.getRecentCommitsWithFilesRaw(owner, repo, {\n      author: contributor,\n      limit: limit || 50,\n    });\n\n    // Format as string output\n    let output = `\\n=== Contributor Commits for ${contributor} in ${owner}/${repo} ===\\n\\n`;\n\n    for (const commit of commits) {\n      output += `📝 Commit: ${commit.commit.message.split('\\n')[0]}\\n`;\n      output += `   SHA: ${commit.sha.substring(0, 8)}\\n`;\n      output += `   Author: ${commit.commit.author.name} (${commit.commit.author.email})\\n`;\n      output += `   Date: ${new Date(commit.commit.author.date).toLocaleDateString()} ${new Date(commit.commit.author.date).toLocaleTimeString()}\\n`;\n\n      if (commit.commit.message.includes('\\n')) {\n        const fullMessage = commit.commit.message.split('\\n').slice(1).join('\\n').trim();\n        if (fullMessage) {\n          output += `   Full message: ${fullMessage.substring(0, 200)}${fullMessage.length > 200 ? '...' : ''}\\n`;\n        }\n      }\n\n      // Show changed files\n      if (commit.files && commit.files.length > 0) {\n        output += `\\n   📁 Files changed (${commit.files.length}):\\n`;\n        commit.files.forEach((file, idx) => {\n          const statusEmoji = {\n            added: '➕',\n            modified: '📝',\n            removed: '❌',\n            renamed: '🔄',\n            copied: '📋',\n            changed: '🔧',\n            unchanged: '⚪'\n          }[file.status] || '📄';\n\n          output += `     ${idx + 1}. ${statusEmoji} ${file.filename} (+${file.additions}/-${file.deletions})\\n`;\n        });\n      }\n\n      output += '\\n' + '='.repeat(80) + '\\n\\n';\n    }\n\n    return output;\n  }\n\n  async getContributorFiles(\n    owner: string,\n    repo: string,\n    contributor: string,\n    limit?: number\n  ): Promise<ContributorFile[]> {\n    // Get commits with file details\n    const commits = await this.getRecentCommitsWithFilesRaw(owner, repo, {\n      author: contributor,\n      limit: limit || 100, // Get more commits to analyze file patterns\n    });\n\n    // Count file modifications\n    const fileMap = new Map<string, { count: number; lastModified: string }>();\n\n    commits.forEach((commit) => {\n      if (commit.files) {\n        commit.files.forEach((file) => {\n          const existing = fileMap.get(file.filename);\n          if (!existing || commit.commit.author.date > existing.lastModified) {\n            fileMap.set(file.filename, {\n              count: (existing?.count || 0) + 1,\n              lastModified: commit.commit.author.date,\n            });\n          }\n        });\n      }\n    });\n\n    // Convert to array and sort by modification count\n    const files: ContributorFile[] = Array.from(fileMap.entries())\n      .map(([filename, data]) => ({\n        filename,\n        modifications: data.count,\n        lastModified: data.lastModified,\n      }))\n      .sort((a, b) => b.modifications - a.modifications);\n\n    return limit ? files.slice(0, limit) : files;\n  }\n}\n","import { BaseAnalyzer } from \"../base.js\";\nimport { RepoPullRequest, PRReview, RecentPRsOptions } from \"../types.js\";\n\nexport class PullRequestAnalyzer extends BaseAnalyzer {\n  async getRecentPRs(\n    owner: string,\n    repo: string,\n    options: RecentPRsOptions = {}\n  ): Promise<RepoPullRequest[]> {\n    const {\n      days = options.days === null\n        ? null\n        : options.days || this.config.defaultDays,\n      limit = this.config.defaultLimit,\n      state = \"all\",\n      author,\n    } = options;\n\n    const prs = await this.paginate<RepoPullRequest>(\n      (params: any) =>\n        this.octokit.rest.pulls.list({\n          owner,\n          repo,\n          state,\n          sort: \"updated\",\n          direction: \"desc\",\n          ...(author && { creator: author }), // Use GitHub API's creator parameter\n          ...params,\n        }),\n      limit\n    );\n\n    // Filter by date and author if specified\n    let filteredPRs = prs;\n\n    if (days !== null && days !== undefined) {\n      const cutoffDate = new Date(Date.now() - days * 24 * 60 * 60 * 1000);\n      filteredPRs = filteredPRs.filter(\n        (pr) => new Date(pr.updated_at) > cutoffDate\n      );\n    }\n\n    // Author filtering is now handled by the API's creator parameter\n\n    return filteredPRs;\n  }\n\n  async getContributorPRs(\n    owner: string,\n    repo: string,\n    contributor: string,\n    limit?: number\n  ): Promise<string> {\n    const prs = await this.getRecentPRs(owner, repo, {\n      author: contributor,\n      limit: limit || 50,\n      days: null, // Get all PRs by this contributor\n    });\n\n    // Enhance each PR with comments, reviews, and commits\n    const enhancedPRs = await Promise.all(\n      prs.map(async (pr) => {\n        try {\n          const [commentsResponse, reviewsResponse, commitsResponse] =\n            await Promise.all([\n              // Get issue comments\n              this.octokit.rest.issues.listComments({\n                owner,\n                repo,\n                issue_number: pr.number,\n              }),\n              // Get reviews\n              this.octokit.rest.pulls.listReviews({\n                owner,\n                repo,\n                pull_number: pr.number,\n              }),\n              // Get commits\n              this.octokit.rest.pulls.listCommits({\n                owner,\n                repo,\n                pull_number: pr.number,\n              }),\n            ]);\n\n          return {\n            ...pr,\n            comments: commentsResponse.data.filter(\n              (comment) => !comment.user?.login.includes(\"[bot]\")\n            ),\n            reviews: reviewsResponse.data.filter(\n              (review) => !review.user?.login.includes(\"[bot]\")\n            ),\n            commits: commitsResponse.data,\n          };\n        } catch (error) {\n          console.warn(`Could not fetch details for PR #${pr.number}:`, error);\n          return {\n            ...pr,\n            comments: [],\n            reviews: [],\n            commits: [],\n          };\n        }\n      })\n    );\n\n    const finalPRs = limit ? enhancedPRs.slice(0, limit) : enhancedPRs;\n\n    // Format as string output\n    let output = `\\n=== Contributor PRs for ${contributor} in ${owner}/${repo} ===\\n\\n`;\n\n    for (const pr of finalPRs) {\n      output += `📝 PR #${pr.number}: ${pr.title}\\n`;\n      output += `   Branch: ${pr.head.ref} → ${pr.base.ref}\\n`;\n      output += `   State: ${pr.state}${pr.merged_at ? \" (merged)\" : \"\"}\\n`;\n      output += `   Created: ${new Date(pr.created_at).toLocaleDateString()}\\n`;\n\n      if (pr.body) {\n        output += `   Description: ${pr.body.substring(0, 200)}${pr.body.length > 200 ? \"...\" : \"\"}\\n`;\n      }\n\n      // Show comments\n      if (pr.comments && pr.comments.length > 0) {\n        output += `\\n   💬 Comments (${pr.comments.length}):\\n`;\n        pr.comments.forEach((comment: any, idx: number) => {\n          output += `     ${idx + 1}. ${comment.user.login}: ${comment.body.substring(0, 150)}${comment.body.length > 150 ? \"...\" : \"\"}\\n`;\n        });\n      }\n\n      // Show reviews\n      if (pr.reviews && pr.reviews.length > 0) {\n        output += `\\n   👀 Reviews (${pr.reviews.length}):\\n`;\n        pr.reviews.forEach((review: any, idx: number) => {\n          output += `     ${idx + 1}. ${review.user.login} (${review.state})\\n`;\n          if (review.body) {\n            output += `        ${review.body.substring(0, 150)}${review.body.length > 150 ? \"...\" : \"\"}\\n`;\n          }\n        });\n      }\n\n      // Show commits\n      if (pr.commits && pr.commits.length > 0) {\n        output += `\\n   📦 Commits (${pr.commits.length}):\\n`;\n        pr.commits.forEach((commit: any, idx: number) => {\n          output += `     ${idx + 1}. ${commit.commit.message.split(\"\\n\")[0]} (${commit.commit.author.name})\\n`;\n        });\n      }\n\n      output += \"\\n\" + \"=\".repeat(80) + \"\\n\\n\";\n    }\n\n    return output;\n  }\n\n  async getContributorReviews(\n    owner: string,\n    repo: string,\n    reviewer: string,\n    limit?: number\n  ): Promise<RepoPullRequest[]> {\n    // Get recent PRs (more to account for filtering)\n    const prs = await this.getRecentPRs(owner, repo, {\n      limit: limit ? limit * 3 : 150,\n    });\n\n    // Filter PRs that have reviews by this reviewer\n    const reviewedPRs: RepoPullRequest[] = [];\n\n    for (const pr of prs) {\n      try {\n        const reviewsResponse = await this.octokit.rest.pulls.listReviews({\n          owner,\n          repo,\n          pull_number: pr.number,\n        });\n\n        const hasReviewByUser = reviewsResponse.data.some(\n          (review) =>\n            review.user?.login.toLowerCase() === reviewer.toLowerCase() &&\n            !review.user?.login.includes(\"[bot]\")\n        );\n\n        if (hasReviewByUser) {\n          // Enhance this PR with full details\n          const [commentsResponse, commitsResponse] = await Promise.all([\n            this.octokit.rest.issues.listComments({\n              owner,\n              repo,\n              issue_number: pr.number,\n            }),\n            this.octokit.rest.pulls.listCommits({\n              owner,\n              repo,\n              pull_number: pr.number,\n            }),\n          ]);\n\n          reviewedPRs.push({\n            ...pr,\n            comments: commentsResponse.data.filter(\n              (comment) => !comment.user?.login.includes(\"[bot]\")\n            ),\n            reviews: reviewsResponse.data.filter(\n              (review) => !review.user?.login.includes(\"[bot]\")\n            ),\n            commits: commitsResponse.data,\n          });\n\n          if (limit && reviewedPRs.length >= limit) break;\n        }\n      } catch (error) {\n        console.warn(`Could not fetch reviews for PR #${pr.number}:`, error);\n      }\n    }\n\n    return reviewedPRs;\n  }\n\n  async getPRDetails(\n    owner: string,\n    repo: string,\n    prNumber: number\n  ): Promise<RepoPullRequest & { reviews: PRReview[] }> {\n    const [prResponse, reviewsResponse] = await Promise.all([\n      this.octokit.rest.pulls.get({\n        owner,\n        repo,\n        pull_number: prNumber,\n      }),\n      this.octokit.rest.pulls.listReviews({\n        owner,\n        repo,\n        pull_number: prNumber,\n      }),\n    ]);\n\n    return {\n      ...prResponse.data,\n      reviews: reviewsResponse.data as PRReview[],\n    };\n  }\n\n  async getRecentReviews(\n    owner: string,\n    repo: string,\n    days?: number\n  ): Promise<PRReview[]> {\n    const actualDays = days || this.config.defaultDays || 30;\n\n    // Get recent PRs first\n    const prs = await this.getRecentPRs(owner, repo, {\n      days: actualDays,\n      state: \"all\",\n      limit: 100,\n    });\n\n    // Get reviews for each PR\n    const allReviews: PRReview[] = [];\n\n    await Promise.all(\n      prs.map(async (pr) => {\n        try {\n          const reviews = await this.octokit.rest.pulls.listReviews({\n            owner,\n            repo,\n            pull_number: pr.number,\n          });\n\n          const cutoffDate = new Date(\n            Date.now() - actualDays * 24 * 60 * 60 * 1000\n          );\n          const recentReviews = reviews.data.filter(\n            (review) =>\n              review.submitted_at && new Date(review.submitted_at) > cutoffDate\n          );\n\n          allReviews.push(...(recentReviews as PRReview[]));\n        } catch (error) {\n          console.warn(`Could not fetch reviews for PR #${pr.number}:`, error);\n        }\n      })\n    );\n\n    return allReviews.sort((a, b) => {\n      const aDate = a.submitted_at ? new Date(a.submitted_at).getTime() : 0;\n      const bDate = b.submitted_at ? new Date(b.submitted_at).getTime() : 0;\n      return bDate - aDate;\n    });\n  }\n}\n","import { BaseAnalyzer } from \"../base.js\";\nimport {\n  RepoBranch,\n  RepoStats,\n} from \"../types.js\";\n\nexport class RepositoryAnalyzer extends BaseAnalyzer {\n  async getRepoInfo(owner: string, repo: string): Promise<any> {\n    try {\n      const response = await this.octokit.rest.repos.get({ owner, repo });\n      return response.data;\n    } catch (error: any) {\n      console.error(`💥 Error fetching repository info for ${owner}/${repo}:`, error.message);\n      throw error;\n    }\n  }\n\n  async getBranches(\n    owner: string,\n    repo: string,\n    limit?: number\n  ): Promise<RepoBranch[]> {\n    const branches = await this.paginate<RepoBranch>(\n      (params: any) => this.octokit.rest.repos.listBranches({\n        owner,\n        repo,\n        ...params,\n      }),\n      limit\n    );\n\n    return branches;\n  }\n\n  async getContributors(\n    owner: string,\n    repo: string,\n    limit?: number\n  ): Promise<any[]> {\n    const contributors = await this.paginate<any>(\n      (params: any) => this.octokit.rest.repos.listContributors({\n        owner,\n        repo,\n        ...params,\n      }),\n      limit || 50\n    );\n\n    return contributors;\n  }\n\n  async getRepoStats(owner: string, repo: string): Promise<RepoStats> {\n    try {\n      // Fetch repository basic info (includes stars and creation date)\n      const repoResponse = await this.octokit.rest.repos.get({\n        owner,\n        repo,\n      });\n\n      const repoData = repoResponse.data;\n\n      // Use repository's open_issues_count for total issues\n      const totalIssues = repoData.open_issues_count;\n\n      // Get total commits count (approximate from contributors API)\n      const contributorsResponse = await this.octokit.rest.repos.listContributors({\n        owner,\n        repo,\n        per_page: 100, // Get up to 100 contributors\n      });\n\n      // Sum up all contributions to get approximate total commits\n      const totalCommits = contributorsResponse.data.reduce(\n        (sum, contributor) => {\n          return sum + (contributor.contributions || 0);\n        },\n        0,\n      );\n\n      // Calculate age in years\n      const createdDate = new Date(repoData.created_at);\n      const now = new Date();\n      const ageInYears =\n        Math.round(\n          ((now.getTime() - createdDate.getTime()) /\n            (365.25 * 24 * 60 * 60 * 1000)) *\n            10,\n        ) / 10; // Round to 1 decimal\n\n      const stats: RepoStats = {\n        stars: repoData.stargazers_count,\n        totalIssues: totalIssues,\n        totalCommits: totalCommits,\n        ageInYears: ageInYears,\n      };\n\n      return stats;\n    } catch (error: any) {\n      console.error(`💥 Error fetching stats for ${owner}/${repo}:`, error.message);\n      throw error;\n    }\n  }\n}","import { BaseAnalyzer } from \"../base.js\";\nimport {\n  FileInfo,\n  FileContent,\n} from \"../types.js\";\n\nexport class FileAnalyzer extends BaseAnalyzer {\n  async getKeyFiles(owner: string, repo: string): Promise<FileInfo[]> {\n    // Comprehensive list of key files to check for\n    const candidateFiles = [\n      // Package managers\n      { name: \"package.json\", type: \"package\" as const },\n      { name: \"Cargo.toml\", type: \"package\" as const },\n      { name: \"go.mod\", type: \"package\" as const },\n      { name: \"setup.py\", type: \"package\" as const },\n      { name: \"requirements.txt\", type: \"package\" as const },\n      { name: \"pyproject.toml\", type: \"package\" as const },\n      { name: \"pom.xml\", type: \"package\" as const },\n      { name: \"build.gradle\", type: \"package\" as const },\n      { name: \"build.gradle.kts\", type: \"package\" as const },\n      { name: \"composer.json\", type: \"package\" as const },\n      { name: \"Gemfile\", type: \"package\" as const },\n      { name: \"pubspec.yaml\", type: \"package\" as const },\n\n      // Documentation\n      { name: \"README.md\", type: \"docs\" as const },\n      { name: \"readme.md\", type: \"docs\" as const },\n      { name: \"README.txt\", type: \"docs\" as const },\n      { name: \"README.rst\", type: \"docs\" as const },\n      { name: \"ARCHITECTURE.md\", type: \"docs\" as const },\n      { name: \"CONTRIBUTING.md\", type: \"docs\" as const },\n      { name: \"ROADMAP.md\", type: \"docs\" as const },\n      { name: \"API.md\", type: \"docs\" as const },\n      { name: \"CLAUDE.md\", type: \"docs\" as const },\n      { name: \"AGENTS.md\", type: \"docs\" as const },\n\n      // Configuration files\n      { name: \".env.example\", type: \"config\" as const },\n\n      // Database & schemas\n      { name: \"prisma/schema.prisma\", type: \"data\" as const },\n      { name: \"schema.prisma\", type: \"data\" as const },\n      { name: \"schema.sql\", type: \"data\" as const },\n      { name: \"migrations.sql\", type: \"data\" as const },\n      { name: \"seeds.sql\", type: \"data\" as const },\n\n      // Docker & deployment\n      { name: \"Dockerfile\", type: \"build\" as const },\n      { name: \"docker-compose.yml\", type: \"build\" as const },\n      { name: \"docker-compose.yaml\", type: \"build\" as const },\n      { name: \"Makefile\", type: \"build\" as const },\n      { name: \"justfile\", type: \"build\" as const },\n      { name: \"CMakeLists.txt\", type: \"build\" as const },\n\n      // Other important files\n      { name: \"LICENSE\", type: \"other\" as const },\n      { name: \"LICENSE.md\", type: \"other\" as const },\n      { name: \"LICENSE.txt\", type: \"other\" as const },\n      { name: \"CODEOWNERS\", type: \"other\" as const },\n      { name: \".github/CODEOWNERS\", type: \"other\" as const },\n    ];\n\n    const foundFiles: FileInfo[] = [];\n\n    // Check all candidate files in parallel for much faster execution\n    const fileCheckPromises = candidateFiles.map(async (candidate) => {\n      try {\n        await this.octokit.rest.repos.getContent({\n          owner,\n          repo,\n          path: candidate.name,\n        });\n\n        return {\n          name: candidate.name,\n          path: candidate.name,\n          type: candidate.type,\n        };\n      } catch (error: any) {\n        // File doesn't exist - that's fine, return null\n        if (error.status !== 404) {\n          console.warn(`⚠️ Error checking ${candidate.name}:`, error.message);\n        }\n        return null;\n      }\n    });\n\n    // Wait for all checks to complete and filter out null results\n    const results = await Promise.all(fileCheckPromises);\n    foundFiles.push(...results.filter((file) => file !== null));\n\n    return foundFiles;\n  }\n\n  async getFileContent(\n    owner: string,\n    repo: string,\n    path: string,\n  ): Promise<FileContent | null> {\n    try {\n      const response = await this.octokit.rest.repos.getContent({\n        owner,\n        repo,\n        path,\n      });\n\n      // Handle the case where response.data is an array (directory) - we only want files\n      if (Array.isArray(response.data)) {\n        console.warn(`⚠️ Path ${path} is a directory, not a file`);\n        return null;\n      }\n\n      const fileData = response.data as any;\n\n      // Ensure it's a file and not a symlink or submodule\n      if (fileData.type !== \"file\") {\n        console.warn(`⚠️ Path ${path} is not a file (type: ${fileData.type})`);\n        return null;\n      }\n\n      // Decode base64 content\n      let content = \"\";\n      if (fileData.encoding === \"base64\" && fileData.content) {\n        content = Buffer.from(fileData.content, \"base64\").toString(\"utf-8\");\n      } else if (fileData.content) {\n        content = fileData.content;\n      }\n\n      const fileContent: FileContent = {\n        name: fileData.name,\n        path: fileData.path,\n        content: content,\n        encoding: fileData.encoding || \"utf-8\",\n        size: fileData.size || 0,\n      };\n\n      return fileContent;\n    } catch (error: any) {\n      if (error.status === 404) {\n        console.log(`❌ File not found: ${path}`);\n        return null;\n      }\n\n      console.error(\n        `💥 Error fetching file content for ${path}:`,\n        error.message,\n      );\n      return null;\n    }\n  }\n}","import { BaseAnalyzer } from \"../base.js\";\n\nexport class IconAnalyzer extends BaseAnalyzer {\n  async getRepoIcon(owner: string, repo: string): Promise<string | null> {\n    try {\n      // Get root directory contents\n      const rootContents = await this.octokit.rest.repos.getContent({\n        owner,\n        repo,\n        path: \"\",\n      });\n\n      if (!Array.isArray(rootContents.data)) {\n        return null;\n      }\n\n      // Look for icon files in root\n      const iconFiles = rootContents.data.filter((file: any) => {\n        const name = file.name.toLowerCase();\n        return (\n          name.includes(\"favicon\") ||\n          name.includes(\"logo\") ||\n          name.includes(\"icon\") ||\n          (name.startsWith(\"apple-touch\") && name.includes(\"icon\"))\n        );\n      });\n\n      // Check common subdirectories\n      const subdirs = [\"public\", \"assets\", \"static\", \"images\", \"img\"];\n      for (const subdir of subdirs) {\n        const subdirExists = rootContents.data.find(\n          (item: any) => item.name === subdir && item.type === \"dir\",\n        );\n\n        if (subdirExists) {\n          try {\n            const subdirContents = await this.octokit.rest.repos.getContent({\n              owner,\n              repo,\n              path: subdir,\n            });\n\n            if (Array.isArray(subdirContents.data)) {\n              const subdirIcons = subdirContents.data.filter((file: any) => {\n                const name = file.name.toLowerCase();\n                return (\n                  name.includes(\"favicon\") ||\n                  name.includes(\"logo\") ||\n                  name.includes(\"icon\")\n                );\n              });\n              iconFiles.push(\n                ...subdirIcons.map((f: any) => ({\n                  ...f,\n                  path: `${subdir}/${f.name}`,\n                })),\n              );\n            }\n          } catch (error) {\n            continue;\n          }\n        }\n      }\n\n      // Sort by resolution (highest first)\n      const sortedIcons = this.sortIconsByResolution(iconFiles);\n\n      // Try to fetch the best icon\n      for (const iconFile of sortedIcons) {\n        const filePath = iconFile.path || iconFile.name;\n\n        try {\n          const iconResponse = await this.octokit.rest.repos.getContent({\n            owner,\n            repo,\n            path: filePath,\n          });\n\n          if (\"content\" in iconResponse.data && iconResponse.data.content) {\n            const iconData = `data:image/png;base64,${iconResponse.data.content}`;\n            return iconData;\n          }\n        } catch (error) {\n          continue;\n        }\n      }\n\n      return null;\n    } catch (error: any) {\n      console.error(`💥 Error fetching repo icon for ${owner}/${repo}:`, error.message);\n      return null;\n    }\n  }\n\n  private sortIconsByResolution(iconFiles: any[]): any[] {\n    return iconFiles.sort((a, b) => {\n      const aName = a.name.toLowerCase();\n      const bName = b.name.toLowerCase();\n\n      const getResolution = (name: string) => {\n        const match = name.match(/(\\d+)x\\d+/);\n        if (match) return parseInt(match[1]);\n\n        if (name.includes(\"512\")) return 512;\n        if (name.includes(\"256\")) return 256;\n        if (name.includes(\"192\")) return 192;\n        if (name.includes(\"180\")) return 180;\n        if (name.includes(\"apple-touch\")) return 180;\n        if (name.includes(\"android-chrome\")) return 192;\n        if (name === \"favicon.ico\") return 64;\n        if (name.includes(\"logo\")) return 100;\n\n        return 50;\n      };\n\n      return getResolution(bName) - getResolution(aName); // Higher first\n    });\n  }\n}","import { BaseAnalyzer, RepoAnalyzerConfig } from \"../base.js\";\nimport { CommitAnalyzer } from \"./commits.js\";\nimport { PullRequestAnalyzer } from \"./pull-requests.js\";\nimport { RepositoryAnalyzer } from \"./repository.js\";\nimport { FileAnalyzer } from \"./files.js\";\nimport { IconAnalyzer } from \"./icons.js\";\n\nexport class RepoAnalyzer extends BaseAnalyzer {\n  private commitAnalyzer: CommitAnalyzer;\n  private prAnalyzer: PullRequestAnalyzer;\n  private repoAnalyzer: RepositoryAnalyzer;\n  private fileAnalyzer: FileAnalyzer;\n  private iconAnalyzer: IconAnalyzer;\n\n  constructor(config: RepoAnalyzerConfig = {}) {\n    super(config);\n\n    // Initialize all analyzers with the same config\n    this.commitAnalyzer = new CommitAnalyzer(config);\n    this.prAnalyzer = new PullRequestAnalyzer(config);\n    this.repoAnalyzer = new RepositoryAnalyzer(config);\n    this.fileAnalyzer = new FileAnalyzer(config);\n    this.iconAnalyzer = new IconAnalyzer(config);\n  }\n\n  // Commit methods\n  async getRecentCommits(...args: Parameters<CommitAnalyzer['getRecentCommits']>) {\n    return this.commitAnalyzer.getRecentCommits(...args);\n  }\n\n  async getRecentCommitsWithFiles(...args: Parameters<CommitAnalyzer['getRecentCommitsWithFiles']>) {\n    return this.commitAnalyzer.getRecentCommitsWithFiles(...args);\n  }\n\n  async getContributorCommits(...args: Parameters<CommitAnalyzer['getContributorCommits']>) {\n    return this.commitAnalyzer.getContributorCommits(...args);\n  }\n\n  async getContributorFiles(...args: Parameters<CommitAnalyzer['getContributorFiles']>) {\n    return this.commitAnalyzer.getContributorFiles(...args);\n  }\n\n  // Pull Request methods\n  async getRecentPRs(...args: Parameters<PullRequestAnalyzer['getRecentPRs']>) {\n    return this.prAnalyzer.getRecentPRs(...args);\n  }\n\n  async getContributorPRs(...args: Parameters<PullRequestAnalyzer['getContributorPRs']>) {\n    return this.prAnalyzer.getContributorPRs(...args);\n  }\n\n  async getContributorReviews(...args: Parameters<PullRequestAnalyzer['getContributorReviews']>) {\n    return this.prAnalyzer.getContributorReviews(...args);\n  }\n\n  async getPRDetails(...args: Parameters<PullRequestAnalyzer['getPRDetails']>) {\n    return this.prAnalyzer.getPRDetails(...args);\n  }\n\n  async getRecentReviews(...args: Parameters<PullRequestAnalyzer['getRecentReviews']>) {\n    return this.prAnalyzer.getRecentReviews(...args);\n  }\n\n  // Repository methods\n  async getRepoInfo(...args: Parameters<RepositoryAnalyzer['getRepoInfo']>) {\n    return this.repoAnalyzer.getRepoInfo(...args);\n  }\n\n  async getBranches(...args: Parameters<RepositoryAnalyzer['getBranches']>) {\n    return this.repoAnalyzer.getBranches(...args);\n  }\n\n  async getContributors(...args: Parameters<RepositoryAnalyzer['getContributors']>) {\n    return this.repoAnalyzer.getContributors(...args);\n  }\n\n  async getRepoStats(...args: Parameters<RepositoryAnalyzer['getRepoStats']>) {\n    return this.repoAnalyzer.getRepoStats(...args);\n  }\n\n  // File methods\n  async getKeyFiles(...args: Parameters<FileAnalyzer['getKeyFiles']>) {\n    return this.fileAnalyzer.getKeyFiles(...args);\n  }\n\n  async getFileContent(...args: Parameters<FileAnalyzer['getFileContent']>) {\n    return this.fileAnalyzer.getFileContent(...args);\n  }\n\n  // Icon methods\n  async getRepoIcon(...args: Parameters<IconAnalyzer['getRepoIcon']>) {\n    return this.iconAnalyzer.getRepoIcon(...args);\n  }\n}","import { BaseResource } from \"./base.js\";\nimport { Contributor } from \"../types/index.js\";\nimport { RepoAnalyzer } from \"../github/index.js\";\n\nexport class ContributorsResource extends BaseResource {\n  private analyzer: RepoAnalyzer;\n\n  constructor(cache: any, githubToken?: string) {\n    super(cache);\n    this.analyzer = new RepoAnalyzer({\n      githubToken,\n      defaultLimit: 50,\n    });\n  }\n\n  async getContributors(owner: string, repo: string): Promise<Contributor[]> {\n    // Check cache first\n    const cached = await this.getCached<Contributor[]>(\n      owner,\n      repo,\n      \"contributors\"\n    );\n    if (cached) {\n      console.log(`💾 Cache hit for contributors: ${owner}/${repo}`);\n      return cached;\n    }\n\n    console.log(`📡 Fetching contributors for ${owner}/${repo}...`);\n\n    try {\n      const contributors = await this.analyzer.getContributors(owner, repo, 50);\n\n      console.log(`👥 Found ${contributors.length} contributors`);\n\n      // Cache the result\n      this.setCached(owner, repo, \"contributors\", contributors);\n\n      return contributors as Contributor[];\n    } catch (error: any) {\n      console.error(\n        `💥 Error fetching contributors for ${owner}/${repo}:`,\n        error.message\n      );\n\n      // Check if it's a rate limit error\n      if (error.status === 403 || error.message?.includes(\"rate limit\")) {\n        console.error(`⏱️  RATE LIMIT HIT for contributors!`);\n      }\n\n      throw error;\n    }\n  }\n}\n","import { BaseResource } from \"./base.js\";\nimport { RepoAnalyzer } from \"../github/index.js\";\n\nexport class IconsResource extends BaseResource {\n  private analyzer: RepoAnalyzer;\n\n  constructor(cache: any, githubToken?: string) {\n    super(cache);\n    this.analyzer = new RepoAnalyzer({\n      githubToken,\n    });\n  }\n\n  async getRepoIcon(owner: string, repo: string): Promise<string | null> {\n    // Check cache first (null is a valid cached value)\n    const cached = await this.getCached<string | null>(owner, repo, \"icon\");\n    if (cached !== undefined) {\n      console.log(\n        `💾 Cache hit for ${owner}/${repo} icon:`,\n        cached ? \"Found\" : \"Not found\"\n      );\n      console.log(`🔄 Clearing cache to retry (checking for rate limits)...`);\n      this.cache.clear(); // Clear cache to retry\n      // Don't return cached, let it retry\n    }\n\n    console.log(`🚀 Starting fresh icon fetch for ${owner}/${repo}`);\n\n    try {\n      const iconData = await this.analyzer.getRepoIcon(owner, repo);\n\n      if (iconData) {\n        console.log(`✅ Successfully loaded icon`);\n        console.log(`📊 Icon data length: ${iconData.length} chars`);\n\n        // Cache the result\n        this.setCached(owner, repo, \"icon\", iconData);\n        return iconData;\n      } else {\n        console.log(\"❌ No icons could be loaded\");\n        this.setCached(owner, repo, \"icon\", null);\n        return null;\n      }\n    } catch (error: any) {\n      console.error(`💥 ERROR fetching repo icon for ${owner}/${repo}:`, error);\n\n      // Check if it's a rate limit error\n      if (error.status === 403 || error.message?.includes(\"rate limit\")) {\n        console.error(`⏱️  RATE LIMIT HIT! Error:`, error.message);\n      }\n\n      this.setCached(owner, repo, \"icon\", null);\n      return null;\n    }\n  }\n}\n","import { BaseResource } from \"./base.js\";\nimport { Repository } from \"../types/index.js\";\nimport { RepoAnalyzer } from \"../github/index.js\";\n\nexport class RepositoryResource extends BaseResource {\n  private analyzer: RepoAnalyzer;\n\n  constructor(cache: any, githubToken?: string) {\n    super(cache);\n    this.analyzer = new RepoAnalyzer({\n      githubToken,\n    });\n  }\n\n  async getRepoInfo(owner: string, repo: string): Promise<Repository> {\n    // Check cache first\n    const cached = await this.getCached<Repository>(owner, repo, \"repo\");\n    if (cached) {\n      console.log(`💾 Cache hit for repo info: ${owner}/${repo}`);\n      return cached;\n    }\n\n    console.log(`📡 Fetching repository info for ${owner}/${repo}...`);\n\n    try {\n      const repoData = await this.analyzer.getRepoInfo(owner, repo);\n\n      console.log(`📋 Repository info loaded: ${repoData.full_name}`);\n\n      // Cache the result\n      this.setCached(owner, repo, \"repo\", repoData);\n\n      return repoData as Repository;\n    } catch (error: any) {\n      console.error(\n        `💥 Error fetching repository info for ${owner}/${repo}:`,\n        error.message\n      );\n\n      // Check if it's a rate limit error\n      if (error.status === 403 || error.message?.includes(\"rate limit\")) {\n        console.error(`⏱️  RATE LIMIT HIT for repository!`);\n      }\n\n      throw error;\n    }\n  }\n}\n","import { BaseResource } from \"./base.js\";\nimport { Commit } from \"../types/index.js\";\nimport { RepoAnalyzer } from \"../github/index.js\";\n\nexport class CommitsResource extends BaseResource {\n  private analyzer: RepoAnalyzer;\n\n  constructor(cache: any, githubToken?: string) {\n    super(cache);\n    this.analyzer = new RepoAnalyzer({\n      githubToken,\n      defaultLimit: 50,\n    });\n  }\n\n  async getCommits(owner: string, repo: string): Promise<string> {\n    // Check cache first\n    const cached = await this.getCached<string>(owner, repo, \"commits\");\n    if (cached) {\n      console.log(`💾 Cache hit for commits: ${owner}/${repo}`);\n      return cached;\n    }\n\n    console.log(`📡 Fetching commits for ${owner}/${repo}...`);\n\n    try {\n      const commits = await this.analyzer.getRecentCommits(owner, repo, {\n        limit: 50,\n      });\n\n      console.log(`📝 Commits fetched successfully`);\n\n      // Cache the result\n      this.setCached(owner, repo, \"commits\", commits);\n\n      return commits;\n    } catch (error: any) {\n      console.error(\n        `💥 Error fetching commits for ${owner}/${repo}:`,\n        error.message\n      );\n\n      // Check if it's a rate limit error\n      if (error.status === 403 || error.message?.includes(\"rate limit\")) {\n        console.error(`⏱️  RATE LIMIT HIT for commits!`);\n      }\n\n      throw error;\n    }\n  }\n}\n","import { BaseResource } from \"./base.js\";\nimport { Branch } from \"../types/index.js\";\nimport { RepoAnalyzer } from \"../github/index.js\";\n\nexport class BranchesResource extends BaseResource {\n  private analyzer: RepoAnalyzer;\n\n  constructor(cache: any, githubToken?: string) {\n    super(cache);\n    this.analyzer = new RepoAnalyzer({\n      githubToken,\n    });\n  }\n\n  async getBranches(owner: string, repo: string): Promise<Branch[]> {\n    // Check cache first\n    const cached = await this.getCached<Branch[]>(owner, repo, \"branches\");\n    if (cached) {\n      console.log(`💾 Cache hit for branches: ${owner}/${repo}`);\n      return cached;\n    }\n\n    console.log(`📡 Fetching branches for ${owner}/${repo}...`);\n\n    try {\n      const branches = await this.analyzer.getBranches(owner, repo);\n\n      console.log(`🌿 Found ${branches.length} branches`);\n\n      // Cache the result\n      this.setCached(owner, repo, \"branches\", branches);\n\n      return branches as Branch[];\n    } catch (error: any) {\n      console.error(\n        `💥 Error fetching branches for ${owner}/${repo}:`,\n        error.message\n      );\n\n      // Check if it's a rate limit error\n      if (error.status === 403 || error.message?.includes(\"rate limit\")) {\n        console.error(`⏱️  RATE LIMIT HIT for branches!`);\n      }\n\n      throw error;\n    }\n  }\n}\n","import { BaseResource } from \"./base.js\";\nimport { RepoAnalyzer, FileInfo, FileContent } from \"../github/index.js\";\n\nexport class FilesResource extends BaseResource {\n  private analyzer: RepoAnalyzer;\n\n  constructor(cache: any, githubToken?: string) {\n    super(cache);\n    this.analyzer = new RepoAnalyzer({\n      githubToken,\n    });\n  }\n\n  async getKeyFiles(owner: string, repo: string): Promise<FileInfo[]> {\n    // Check cache first\n    const cached = await this.getCached<FileInfo[]>(owner, repo, \"files\");\n    if (cached) {\n      console.log(\"📁 Using cached files data\");\n      return cached;\n    }\n\n    console.log(`🔍 Fetching key files for ${owner}/${repo}...`);\n\n    const foundFiles = await this.analyzer.getKeyFiles(owner, repo);\n\n    console.log(`📁 Found ${foundFiles.length} key files in ${owner}/${repo}`);\n    foundFiles.forEach((file) => console.log(`✅ Found file: ${file.name}`));\n\n    // Cache the results\n    this.setCached(owner, repo, \"files\", foundFiles);\n\n    return foundFiles;\n  }\n\n  async getFileContent(\n    owner: string,\n    repo: string,\n    path: string\n  ): Promise<FileContent | null> {\n    // Check cache first\n    const cacheKey = `file-content-${path}`;\n    const cached = await this.getCached<FileContent>(owner, repo, cacheKey);\n    if (cached) {\n      console.log(`📄 Using cached file content for ${path}`);\n      return cached;\n    }\n\n    console.log(`> Fetching file content for ${owner}/${repo}:${path}...`);\n\n    const fileContent = await this.analyzer.getFileContent(owner, repo, path);\n\n    if (fileContent) {\n      console.log(\n        `✅ Retrieved file content for ${path} (${fileContent.size} bytes)`\n      );\n\n      // Cache the results\n      this.setCached(owner, repo, cacheKey, fileContent);\n    }\n\n    return fileContent;\n  }\n}\n","import { BaseResource } from \"./base.js\";\nimport { RepoStats } from \"../types/index.js\";\nimport { RepoAnalyzer } from \"../github/index.js\";\n\nexport class StatsResource extends BaseResource {\n  private analyzer: RepoAnalyzer;\n\n  constructor(cache: any, githubToken?: string) {\n    super(cache);\n    this.analyzer = new RepoAnalyzer({\n      githubToken,\n    });\n  }\n\n  async getRepoStats(owner: string, repo: string): Promise<RepoStats> {\n    // Check cache first\n    const cached = await this.getCached<RepoStats>(owner, repo, \"stats\");\n    if (cached) {\n      console.log(\"📊 Using cached stats data\");\n      return cached;\n    }\n\n    console.log(`🔍 Fetching stats for ${owner}/${repo}...`);\n\n    try {\n      const stats = await this.analyzer.getRepoStats(owner, repo);\n\n      console.log(`📊 Stats for ${owner}/${repo}:`, {\n        stars: stats.stars,\n        totalIssues: stats.totalIssues,\n        totalCommits: stats.totalCommits,\n        ageInYears: stats.ageInYears,\n      });\n\n      // Cache the results\n      this.setCached(owner, repo, \"stats\", stats);\n\n      return stats;\n    } catch (error: any) {\n      console.error(\n        `💥 Error fetching stats for ${owner}/${repo}:`,\n        error.message\n      );\n\n      // Check if it's a rate limit error\n      if (error.status === 403 || error.message?.includes(\"rate limit\")) {\n        console.error(`⏱️  RATE LIMIT HIT for stats!`);\n      }\n\n      throw error;\n    }\n  }\n}\n","import { spawn } from \"child_process\";\nimport * as fs from \"fs\";\nimport * as path from \"path\";\n\nexport interface CloneResult {\n  success: boolean;\n  localPath: string;\n  error?: string;\n  duration?: number;\n}\n\nexport interface CloneOptions {\n  username?: string;\n  token?: string;\n  branch?: string;\n}\n\nexport class RepoCloner {\n  private static readonly BASE_PATH =\n    process.env.GITSEE_BASE_PATH || \"/tmp/gitsee\";\n  private static clonePromises: Map<string, Promise<CloneResult>> = new Map();\n\n  /**\n   * Clone a repository in the background (fire-and-forget)\n   */\n  static async cloneInBackground(\n    owner: string,\n    repo: string,\n    options?: CloneOptions\n  ): Promise<void> {\n    const repoKey = `${owner}/${repo}`;\n\n    // If already cloning, don't start another clone\n    if (this.clonePromises.has(repoKey)) {\n      return;\n    }\n\n    // Start clone and store promise\n    const clonePromise = this.cloneRepo(owner, repo, options);\n    this.clonePromises.set(repoKey, clonePromise);\n\n    // Handle completion (success or failure)\n    clonePromise\n      .finally(() => {\n        // Clean up the promise from the map after completion\n        setTimeout(() => {\n          this.clonePromises.delete(repoKey);\n        }, 5000); // Keep for 5 seconds to allow quick access\n      })\n      .catch((error) => {\n        console.error(\n          `🚨 Background clone failed for ${owner}/${repo}:`,\n          error.message\n        );\n      });\n  }\n\n  /**\n   * Clone a repository to /tmp/gitsee/{owner}/{repo}\n   */\n  static async cloneRepo(\n    owner: string,\n    repo: string,\n    options?: CloneOptions\n  ): Promise<CloneResult> {\n    const startTime = Date.now();\n    const repoPath = path.join(this.BASE_PATH, owner, repo);\n\n    // Build GitHub URL with authentication if provided\n    let githubUrl: string;\n    if (options?.username && options?.token) {\n      githubUrl = `https://${options.username}:${options.token}@github.com/${owner}/${repo}.git`;\n    } else {\n      githubUrl = `https://github.com/${owner}/${repo}.git`;\n    }\n\n    console.log(`📥 Starting clone of ${owner}/${repo} to ${repoPath}`);\n\n    try {\n      // Check if already exists AND is a valid clone (has .git or at least some files)\n      if (fs.existsSync(repoPath)) {\n        const hasGit = fs.existsSync(path.join(repoPath, \".git\"));\n        const hasFiles = fs.readdirSync(repoPath).length > 0;\n\n        if (hasGit || hasFiles) {\n          console.log(\n            `📂 Repository ${owner}/${repo} already exists at ${repoPath}`\n          );\n          return {\n            success: true,\n            localPath: repoPath,\n            duration: Date.now() - startTime,\n          };\n        } else {\n          console.log(\n            `🗑️ Repository ${owner}/${repo} exists but appears invalid, removing...`\n          );\n          fs.rmSync(repoPath, { recursive: true, force: true });\n        }\n      }\n\n      // Ensure parent directory exists\n      const parentDir = path.dirname(repoPath);\n      fs.mkdirSync(parentDir, { recursive: true });\n\n      // Clone with shallow copy (depth 1) and single branch for speed\n      const result = await this.executeGitClone(\n        githubUrl,\n        repoPath,\n        options?.branch\n      );\n\n      const duration = Date.now() - startTime;\n\n      if (result.success) {\n        console.log(`✅ Successfully cloned ${owner}/${repo} in ${duration}ms`);\n        return {\n          success: true,\n          localPath: repoPath,\n          duration,\n        };\n      } else {\n        console.error(`❌ Failed to clone ${owner}/${repo}:`, result.error);\n        return {\n          success: false,\n          localPath: repoPath,\n          error: result.error,\n          duration,\n        };\n      }\n    } catch (error: any) {\n      const duration = Date.now() - startTime;\n      console.error(`💥 Clone error for ${owner}/${repo}:`, error.message);\n\n      return {\n        success: false,\n        localPath: repoPath,\n        error: error.message,\n        duration,\n      };\n    }\n  }\n\n  /**\n   * Execute git clone command with shallow clone and single branch\n   */\n  private static executeGitClone(\n    githubUrl: string,\n    targetPath: string,\n    branch?: string\n  ): Promise<{ success: boolean; error?: string }> {\n    return new Promise((resolve) => {\n      // Build git clone arguments\n      const gitArgs = [\n        \"clone\",\n        \"--depth\",\n        \"1\", // Shallow clone (only latest commit)\n        \"--single-branch\", // Only clone the specified branch\n        \"--no-tags\", // Skip tags for speed\n      ];\n\n      // Add branch specification if provided\n      if (branch) {\n        gitArgs.push(\"--branch\", branch);\n      }\n\n      gitArgs.push(githubUrl, targetPath);\n\n      // Use shallow clone with single branch for maximum speed\n      const gitProcess = spawn(\"git\", gitArgs);\n\n      let errorOutput = \"\";\n\n      gitProcess.stderr.on(\"data\", (data) => {\n        errorOutput += data.toString();\n      });\n\n      gitProcess.stdout.on(\"data\", (data) => {\n        // Git clone sends progress to stderr, but we can capture stdout too\n        const output = data.toString();\n        if (output.includes(\"Cloning\") || output.includes(\"Receiving\")) {\n          console.log(`📥 ${output.trim()}`);\n        }\n      });\n\n      gitProcess.on(\"close\", (code) => {\n        if (code === 0) {\n          resolve({ success: true });\n        } else {\n          resolve({\n            success: false,\n            error: errorOutput || `Git clone exited with code ${code}`,\n          });\n        }\n      });\n\n      gitProcess.on(\"error\", (error) => {\n        resolve({\n          success: false,\n          error: `Failed to start git process: ${error.message}`,\n        });\n      });\n    });\n  }\n\n  /**\n   * Check if a repository is already cloned\n   */\n  static isRepoCloned(owner: string, repo: string): boolean {\n    const repoPath = path.join(this.BASE_PATH, owner, repo);\n    return (\n      fs.existsSync(repoPath) && fs.existsSync(path.join(repoPath, \".git\"))\n    );\n  }\n\n  /**\n   * Get the local path for a repository\n   */\n  static getRepoPath(owner: string, repo: string): string {\n    return path.join(this.BASE_PATH, owner, repo);\n  }\n\n  /**\n   * Wait for a repository clone to complete\n   */\n  static async waitForClone(\n    owner: string,\n    repo: string,\n    options?: CloneOptions\n  ): Promise<CloneResult> {\n    const repoKey = `${owner}/${repo}`;\n\n    // Check if already cloned\n    if (this.isRepoCloned(owner, repo)) {\n      return {\n        success: true,\n        localPath: this.getRepoPath(owner, repo),\n      };\n    }\n\n    // Check if currently cloning\n    const clonePromise = this.clonePromises.get(repoKey);\n    if (clonePromise) {\n      console.log(`⏳ Waiting for ongoing clone of ${owner}/${repo}...`);\n      return await clonePromise;\n    }\n\n    // Start a new clone\n    console.log(`🚀 Starting new clone for ${owner}/${repo}...`);\n    return await this.cloneRepo(owner, repo, options);\n  }\n\n  /**\n   * Get clone result if available (non-blocking)\n   */\n  static async getCloneResult(\n    owner: string,\n    repo: string\n  ): Promise<CloneResult | null> {\n    const repoKey = `${owner}/${repo}`;\n\n    // Check if already cloned\n    if (this.isRepoCloned(owner, repo)) {\n      return {\n        success: true,\n        localPath: this.getRepoPath(owner, repo),\n      };\n    }\n\n    // Check if currently cloning\n    const clonePromise = this.clonePromises.get(repoKey);\n    if (clonePromise) {\n      try {\n        return await clonePromise;\n      } catch (error) {\n        return {\n          success: false,\n          localPath: this.getRepoPath(owner, repo),\n          error: error instanceof Error ? error.message : \"Unknown error\",\n        };\n      }\n    }\n\n    // Not cloned and not cloning\n    return null;\n  }\n\n  /**\n   * Clean up old repositories (optional utility)\n   */\n  static async cleanupOldRepos(maxAgeHours: number = 24): Promise<void> {\n    try {\n      if (!fs.existsSync(this.BASE_PATH)) {\n        return;\n      }\n\n      const cutoffTime = Date.now() - maxAgeHours * 60 * 60 * 1000;\n\n      // Walk through /tmp/gitsee/{owner}/{repo} directories\n      const owners = fs.readdirSync(this.BASE_PATH);\n\n      for (const owner of owners) {\n        const ownerPath = path.join(this.BASE_PATH, owner);\n        if (!fs.statSync(ownerPath).isDirectory()) continue;\n\n        const repos = fs.readdirSync(ownerPath);\n\n        for (const repo of repos) {\n          const repoPath = path.join(ownerPath, repo);\n          const stats = fs.statSync(repoPath);\n\n          if (stats.isDirectory() && stats.mtime.getTime() < cutoffTime) {\n            console.log(`🗑️ Cleaning up old repo: ${owner}/${repo}`);\n            fs.rmSync(repoPath, { recursive: true, force: true });\n          }\n        }\n      }\n    } catch (error: any) {\n      console.error(\"Error cleaning up old repos:\", error.message);\n    }\n  }\n}\n","import { generateText, tool, hasToolCall, ModelMessage } from \"ai\";\nimport { getModel, getApiKeyForProvider, Provider } from \"aieo\";\nimport * as prompts from \"./prompts\";\nimport { z } from \"zod\";\nimport { getRepoMap, getFileSummary, fulltextSearch } from \"./tools\";\n\nfunction logStep(contents: any) {\n  if (!Array.isArray(contents)) return;\n  for (const content of contents) {\n    if (content.type === \"tool-call\" && content.toolName !== \"final_answer\") {\n      console.log(\"TOOL CALL:\", content.toolName, \":\", content.input);\n    }\n  }\n}\n\nexport type RepoContextMode =\n  | \"generic\"\n  | \"first_pass\"\n  | \"features\"\n  | \"services\";\n\ninterface ContextConfig {\n  file_lines: number;\n  final_answer_description: string;\n  system: string;\n}\n\nfunction getConfig(mode: RepoContextMode): ContextConfig {\n  const m = prompts[mode];\n  return {\n    file_lines: m.FILE_LINES,\n    system: m.EXPLORER,\n    final_answer_description: m.FINAL_ANSWER,\n  };\n}\n\nexport interface FeaturesContextResult {\n  summary: string;\n  key_files: string[];\n  features: string[];\n}\n\nexport interface FirstPassContextResult {\n  summary: string;\n  key_files: string[];\n  infrastructure: string[];\n  dependencies: string[];\n  user_stories: string[];\n  pages: string[];\n}\n\nfunction makeFad(\n  conf: ContextConfig,\n  final_answer_description: string | undefined\n) {\n  let fad = conf.final_answer_description;\n  if (final_answer_description) {\n    const generic = prompts.generic.FINAL_ANSWER;\n    fad = generic + `\\n\\n` + final_answer_description;\n  }\n  return fad;\n}\n\nexport interface Overrides {\n  system_prompt?: string;\n  final_answer_description?: string;\n}\n\nexport async function get_context(\n  prompt: string | ModelMessage[],\n  repoPath: string,\n  mode: RepoContextMode = \"features\",\n  overrides?: Overrides\n): Promise<string> {\n  const startTime = Date.now();\n  const CONF = getConfig(mode);\n  const provider = process.env.LLM_PROVIDER || \"anthropic\";\n  const apiKey = getApiKeyForProvider(provider);\n  const model = await getModel(provider as Provider, apiKey as string);\n  let fad = makeFad(CONF, overrides?.final_answer_description);\n  if (mode == \"services\") {\n    // replace all instance of MY_REPO_NAME with the actual repo name\n    fad = fad.replaceAll(\n      \"MY_REPO_NAME\",\n      repoPath.split(\"/\").pop() || \"my-repo\"\n    );\n  }\n  const tools = {\n    repo_overview: tool({\n      description:\n        \"Get a high-level view of the codebase architecture and structure. Use this to understand the project layout and identify where specific functionality might be located. Call this when you need to: 1) Orient yourself in an unfamiliar codebase, 2) Locate which directories/files might contain relevant code for a user's question, 3) Understand the overall project structure before diving deeper. Don't call this if you already know which specific files you need to examine.\",\n      inputSchema: z.object({}),\n      execute: async () => {\n        try {\n          return await getRepoMap(repoPath);\n        } catch (e) {\n          return \"Could not retrieve repository map\";\n        }\n      },\n    }),\n    file_summary: tool({\n      description:\n        \"Get a summary of what a specific file contains and its role in the codebase. Use this when you have identified a potentially relevant file and need to understand: 1) What functions/components it exports, 2) What its main responsibility is, 3) Whether it's worth exploring further for the user's question. Only the first 40-100 lines of the file will be returned. Call this with a hypothesis like 'This file probably handles user authentication' or 'This looks like the main dashboard component'. Don't call this to browse random files.\",\n      inputSchema: z.object({\n        file_path: z.string().describe(\"Path to the file to summarize\"),\n        hypothesis: z\n          .string()\n          .describe(\n            \"What you think this file might contain or handle, based on its name/location\"\n          ),\n      }),\n      execute: async ({ file_path }: { file_path: string }) => {\n        try {\n          return getFileSummary(file_path, repoPath, CONF.file_lines);\n        } catch (e) {\n          return \"Bad file path\";\n        }\n      },\n    }),\n    fulltext_search: tool({\n      description:\n        \"Search the entire codebase for a specific term. Use this when you need to find a specific function, component, or file. Call this when the user provided specific text that might be present in the codebase. For example, if the query is 'Add a subtitle to the User Journeys page', you could call this with the query \\\"User Journeys\\\". Don't call this if you do not have specific text to search for\",\n      inputSchema: z.object({\n        query: z.string().describe(\"The term to search for\"),\n      }),\n      execute: async ({ query }: { query: string }) => {\n        try {\n          return await fulltextSearch(query, repoPath);\n        } catch (e) {\n          return `Search failed: ${e}`;\n        }\n      },\n    }),\n    final_answer: tool({\n      // The tool that signals the end of the process\n      description: fad,\n      inputSchema: z.object({ answer: z.string() }),\n      execute: async ({ answer }: { answer: string }) => answer,\n    }),\n  };\n  if (mode === \"first_pass\") {\n    delete (tools as Record<string, any>).fulltext_search;\n  }\n  const { steps } = await generateText({\n    model,\n    tools,\n    prompt,\n    system: overrides?.system_prompt || CONF.system,\n    stopWhen: hasToolCall(\"final_answer\"),\n    onStepFinish: (sf) => logStep(sf.content),\n  });\n  let final = \"\";\n  let lastText = \"\";\n  for (const step of steps) {\n    for (const item of step.content) {\n      if (item.type === \"text\" && item.text && item.text.trim().length > 0) {\n        lastText = item.text.trim();\n      }\n    }\n  }\n  steps.reverse();\n  for (const step of steps) {\n    // console.log(\"step\", JSON.stringify(step.content, null, 2));\n    const final_answer = step.content.find((c) => {\n      return c.type === \"tool-result\" && c.toolName === \"final_answer\";\n    });\n    if (final_answer) {\n      final = (final_answer as any).output;\n    }\n  }\n  if (!final && lastText) {\n    console.warn(\n      \"No final_answer tool call detected; falling back to last reasoning text.\"\n    );\n    final = `${lastText}\\n\\n(Note: Model did not invoke final_answer tool; using last reasoning text as answer.)`;\n  }\n\n  const endTime = Date.now();\n  const duration = endTime - startTime;\n  console.log(\n    `⏱️ get_context completed in ${duration}ms (${(duration / 1000).toFixed(2)}s)`\n  );\n\n  return final;\n}\n\n// infra, dependencies/integratins, user stories, pages\n","export * as first_pass from \"./first_pass.js\";\nexport * as features from \"./features.js\";\nexport * as services from \"./services.js\";\n\nconst generic = {\n  FILE_LINES: 80,\n  EXPLORER: `You are a code exploration assistant. Please use the provided tools to answer the user's prompt.`,\n  FINAL_ANSWER: `Provide the final answer to the user. YOU **MUST** CALL THIS TOOL AT THE END OF YOUR EXPLORATION.`,\n};\n\nexport { generic };\n","export const FILE_LINES = 100;\n\nexport const EXPLORER = `\nYou are a codebase exploration assistant. Use the provided tools to quickly explore the codebase and get a high-level understanding. DONT GO DEEP. Focus on general language and framework, specific core libraries, integrations, and features. Try to understand the main user story of the codebase just by looking at the file structure. YOU NEED TO RETURN AN ANSWER AS FAST AS POSSIBLE! So the best approach is 3-4 tool calls only: 1) repo_overview 2) file_summary of the package.json (or other main package file), 3) The main router file of page/endpoint names, ONLY if you can identify it first try, and 4) final_answer. DO NOT GO DEEPER THAN THIS.\n`;\n\nexport const FINAL_ANSWER = `\nProvide the final answer to the user. YOU **MUST** CALL THIS TOOL AT THE END OF YOUR EXPLORATION.\n\nReturn a simple JSON object with the following fields:\n\n- \"summary\": a SHORT 1-2 sentence synopsis of the codebase.\n- \"key_files\": an array of a few core package and LLM agent files. Focus on package files like package.json, and core markdown files. DO NOT include code files unless they are central to the codebase, such as the main DB schema file.\n- \"infrastructure\"/\"dependencies\"/\"user_stories\"/\"pages\": short arrays of core elements of the application,: 1-2 words each. Include just a few dependencies, ONLY if it seems like they are central to the application. Try to find the main user flows and pages just by looking at file names, or a couple file contents. In total try to target 10-12 items for these four categories. Get at least one in each category, but don't make anything up!\n\n{\n  \"summary\": \"This is a next.js project with a postgres database and a github oauth implementation\",\n  \"key_files\": [\"package.json\", \"README.md\", \"CLAUDE.md\", \"AGENTS.md\", \"schema.prisma\"],\n  \"infrastructure\": [\"Next.js\", \"Postgres\", \"Typescript\"],\n  \"dependencies\": [\"Github Integration\", \"D3.js\", \"React\"],\n  \"user_stories\": [\"Authentication\", \"Payments\"],\n  \"pages\": [\"User Journeys page\", \"Admin Dashboard\"]\n}\n`;\n","export const FILE_LINES = 40;\n\nexport const EXPLORER = `\nYou are a codebase exploration assistant. Use the provided tools to explore the codebase and answer the user's question. Focus on general language and framework first, then specific core libraries, integrations, and features. Try to understand the core functionallity (user stories) of the codebase. Explore files, functions, and component names to understand the main user stories, pages, UX components, or workflows in the application.\n`;\n\nexport const FINAL_ANSWER = `\nProvide the final answer to the user. YOU **MUST** CALL THIS TOOL AT THE END OF YOUR EXPLORATION.\n\nReturn a simple JSON object with the following fields:\n\n- \"summary\": a 1-4 sentence short synopsis of the codebase.\n- \"key_files\": an array of the core package and LLM agent files. Focus on package files like package.json, and core markdown files. DO NOT include code files unless they are central to the codebase, such as the main DB schema file.\n- \"features\": an array of about 20 core user stories or pages, 1-4 words each. Each one should be focused on ONE SINGLE user action... DO NOT flesh these out for not reason!! Keep them short and to the point BUT SPECIFIC, NOT GENERAL! For example \"Github Integration\" and \"Google Oauth Login\" are separate, not one \"Integrations\".\n\n{\n  \"summary\": \"This is a next.js project with a postgres database and a github oauth implementation\",\n  \"key_files\": [\"package.json\", \"README.md\", \"CLAUDE.md\", \"AGENTS.md\", \"schema.prisma\"],\n  \"features\": [\"Authentication\", \"User Journeys page\", \"Payments\", \"Admin Dashboard\", \"Notifications\", \"User Profile\", \"Settings page\", \"Data Visualization\", \"Github Integration\", \"File Uploads\", \"Search Functionality\", \"Real-time Collaboration Tools\", \"Activity Logs\", \"Billing and Subscription Management\", \"Help and Support\"]\n}\n`;\n","export const FILE_LINES = 100;\n\nexport const EXPLORER = `\nYou are a codebase exploration assistant. Your job is to identify the various services, integrations, and environment variables need to setup and run this codebase. Take your time exploring the codebase to find the most likely setup services, and env vars. You might need to use the fulltext_search tool to find instance of \"process.env.\" or other similar patterns, based on the coding language(s) used in the project. You will be asked to output actual configuration files at the end, so make sure you find everything you need to do that!\n`;\n\nexport const FINAL_ANSWER = `\nProvide the final answer to the user. YOU **MUST** CALL THIS TOOL AT THE END OF YOUR EXPLORATION.\n\nReturn three files: a pm2.config.js, a .env file, and a docker-compose.yml. Please put the title of each file, then the content in backticks. YOU MUST RETURN ALL 3 FILES!!!\n\n- pm2.config.js: the actual dev services for running this project (MY_REPO_NAME). Often its just one single service! But sometimes the backend/frontend might be separate services. IMPORTANT: each service env should have a INSTALL_COMMAND so our sandbox system knows how to install dependencies! You can also add optional BUILD_COMMAND, TEST_COMMAND, E2E_TEST_COMMAND, and PRE_START_COMMAND if you find those in the package file. (an example of a PRE_START_COMMAND is a db migration script). Please name one of the services \"frontend\" no matter what. The cwd should start with /workspaces/MY_REPO_NAME. For instance, if the frontend is within an \"app\" dir, the cwd should be \"/workspaces/MY_REPO_NAME/app\".\n- .env: the environment variables needed to run the project, with example values.\n- docker-compose.yml: the auxiliary services needed to run the project, such as databases, caches, queues, etc. IMPORTANT: there is a special \"app\" service in the docker-compsose.yaml that you MUST include! It is the service in which the codebase is mounted. Here is the EXACT content that it should have:\n\\`\\`\\`\n  app:\n    build:\n      context: .\n      dockerfile: Dockerfile\n    volumes:\n      - ../..:/workspaces:cached\n    command: sleep infinity\n    networks:\n      - app_network\n    extra_hosts:\n      - \"localhost:172.17.0.1\"\n      - \"host.docker.internal:host-gateway\"\n\\`\\`\\`\n\n# HERE IS AN EXAMPLE OUTPUT:\n\npm2.config.js\n\n\\`\\`\\`js\nmodule.exports = {\n  apps: [\n    {\n      name: \"frontend\",\n      script: \"npm run dev\",\n      cwd: \"/workspaces/MY_REPO_NAME\",\n      instances: 1,\n      autorestart: true,\n      watch: false,\n      max_memory_restart: \"1G\",\n      env: {\n        PORT: \"3000\",\n        INSTALL_COMMAND: \"npm install\",\n        BUILD_COMMAND: \"npm run build\"\n      }\n    }\n  ],\n};\n\\`\\`\\`\n\n.env\n\n\\`\\`\\`sh\n# Database\nDATABASE_URL=postgresql://postgres:password@localhost:5432/backend_db\nJWT_KEY=your_jwt_secret_key\n\\`\\`\\`\n\ndocker-compose.yml\n\n\\`\\`\\`yaml\nversion: '3.8'\nnetworks:\n  app_network:\n    driver: bridge\nservices:\n  app:\n    build:\n      context: .\n      dockerfile: Dockerfile\n    volumes:\n      - ../..:/workspaces:cached\n    command: sleep infinity\n    networks:\n      - app_network\n    extra_hosts:\n      - \"localhost:172.17.0.1\"\n      - \"host.docker.internal:host-gateway\"\n  postgres:\n    image: postgres:15\n    container_name: backend-postgres\n    environment:\n      - POSTGRES_DB=backend_db\n      - POSTGRES_USER=postgres\n      - POSTGRES_PASSWORD=password\n    ports:\n      - \"5432:5432\"\n    volumes:\n      - postgres_data:/var/lib/postgresql/data\n    networks:\n      - app_network\n    restart: unless-stopped\nvolumes:\n  postgres_data:\n\\`\\`\\`\n\n`;\n","import { spawn } from \"child_process\";\nimport * as fs from \"fs\";\nimport * as path from \"path\";\n\n// Execute ripgrep commands with proper streaming\nfunction execCommand(\n  command: string,\n  cwd: string,\n  timeoutMs: number = 10000\n): Promise<string> {\n  return new Promise((resolve, reject) => {\n    // Parse the ripgrep command and add explicit directory\n    const parts = command.split(\" \");\n    const rgIndex = parts.findIndex(\n      (part) => part === \"rg\" || part.endsWith(\"/rg\")\n    );\n\n    // if (rgIndex === -1) {\n    //   reject(new Error(\"Not a ripgrep command\"));\n    //   return;\n    // }\n\n    // Build ripgrep arguments properly, removing quotes and adding explicit directory\n    const args = parts.slice(rgIndex + 1).map((arg) => {\n      // Remove surrounding quotes (both single and double)\n      if (\n        (arg.startsWith('\"') && arg.endsWith('\"')) ||\n        (arg.startsWith(\"'\") && arg.endsWith(\"'\"))\n      ) {\n        return arg.slice(1, -1);\n      }\n      return arg;\n    });\n    args.push(\"./\"); // Add explicit directory to prevent stdin detection issues\n\n    const process = spawn(\"rg\", args, {\n      cwd,\n      stdio: [\"ignore\", \"pipe\", \"pipe\"],\n    });\n\n    let stdout = \"\";\n    let stderr = \"\";\n    let resolved = false;\n\n    // Set up timeout\n    const timeout = setTimeout(() => {\n      if (!resolved) {\n        process.kill(\"SIGKILL\");\n        resolved = true;\n        reject(new Error(`Command timed out after ${timeoutMs}ms`));\n      }\n    }, timeoutMs);\n\n    process.stdout.on(\"data\", (data) => {\n      stdout += data.toString();\n\n      // Safety check: if output gets too large, kill process and resolve\n      if (stdout.length > 10000) {\n        process.kill(\"SIGKILL\");\n        if (!resolved) {\n          resolved = true;\n          clearTimeout(timeout);\n          const truncated =\n            stdout.substring(0, 10000) +\n            \"\\n\\n[... output truncated due to size limit ...]\";\n          resolve(truncated);\n        }\n        return;\n      }\n    });\n\n    process.stderr.on(\"data\", (data) => {\n      stderr += data.toString();\n    });\n\n    process.on(\"close\", (code) => {\n      if (!resolved) {\n        resolved = true;\n        clearTimeout(timeout);\n\n        if (code === 0) {\n          if (stdout.length > 10000) {\n            const truncated =\n              stdout.substring(0, 10000) +\n              \"\\n\\n[... output truncated to 10,000 characters ...]\";\n            resolve(truncated);\n          } else {\n            resolve(stdout);\n          }\n        } else if (code === 1) {\n          // ripgrep returns exit code 1 when no matches found\n          resolve(\"No matches found\");\n        } else {\n          reject(new Error(`Command failed with code ${code}: ${stderr}`));\n        }\n      }\n    });\n\n    process.on(\"error\", (error) => {\n      if (!resolved) {\n        resolved = true;\n        clearTimeout(timeout);\n        reject(error);\n      }\n    });\n  });\n}\n\n// Get repository map using ripgrep --files\nexport async function getRepoMap(repoPath: string): Promise<string> {\n  if (!repoPath) {\n    return \"No repository path provided\";\n  }\n\n  if (!fs.existsSync(repoPath)) {\n    return \"Repository not cloned yet\";\n  }\n\n  // \"rg --files\",\n  try {\n    const result = await execCommand(\n      \"git ls-tree -r --name-only HEAD | tree -L 3 --fromfile\",\n      repoPath\n    );\n    return result;\n  } catch (error: any) {\n    return `Error getting repo map: ${error.message}`;\n  }\n}\n\n// Get file summary by reading first 40 lines\nexport function getFileSummary(\n  filePath: string,\n  repoPath: string,\n  linesLimit: number\n): string {\n  if (!repoPath) {\n    return \"No repository path provided\";\n  }\n\n  const fullPath = path.join(repoPath, filePath);\n\n  if (!fs.existsSync(fullPath)) {\n    return \"File not found\";\n  }\n\n  try {\n    const content = fs.readFileSync(fullPath, \"utf-8\");\n    const lines = content\n      .split(\"\\n\")\n      .slice(0, linesLimit || 40)\n      .map((line) => {\n        // Limit each line to 200 characters to handle minified files\n        return line.length > 200 ? line.substring(0, 200) + \"...\" : line;\n      });\n\n    return lines.join(\"\\n\");\n  } catch (error: any) {\n    return `Error reading file: ${error.message}`;\n  }\n}\n\n// Fulltext search using ripgrep\nexport async function fulltextSearch(\n  query: string,\n  repoPath: string\n): Promise<string> {\n  if (!repoPath) {\n    return \"No repository path provided\";\n  }\n\n  if (!fs.existsSync(repoPath)) {\n    return \"Repository not cloned yet\";\n  }\n\n  try {\n    const result = await execCommand(\n      `rg --glob '!dist' --ignore-file .gitignore -C 2 -n --max-count 10 --max-columns 200 \"${query}\"`,\n      repoPath,\n      5000\n    );\n\n    // Limit the result to 10,000 characters to prevent overwhelming output\n    if (result.length > 10000) {\n      return (\n        result.substring(0, 10000) +\n        \"\\n\\n[... output truncated to 10,000 characters ...]\"\n      );\n    }\n\n    return result;\n  } catch (error: any) {\n    // Ripgrep returns exit code 1 when no matches found, which is not really an error\n    if (error.message.includes(\"code 1\")) {\n      return `No matches found for \"${query}\"`;\n    }\n    return `Error searching: ${error.message}`;\n  }\n}\n","import {\n  get_context,\n  RepoContextMode,\n  FeaturesContextResult,\n  FirstPassContextResult,\n} from \"./explore.js\";\n\nexport type ExplorationResult =\n  | FeaturesContextResult\n  | FirstPassContextResult\n  | string; // services\n\nexport async function explore(\n  prompt: string | any[],\n  repoPath: string,\n  mode: RepoContextMode = \"first_pass\"\n): Promise<ExplorationResult> {\n  const startTime = Date.now();\n  console.log(`🤖 Starting ${mode} exploration...`);\n\n  try {\n    // Get raw JSON string from get_context\n    const jsonString = await get_context(prompt, repoPath, mode);\n    console.log(\n      `📋 Raw exploration result:`,\n      jsonString.substring(0, 200) + \"...\"\n    );\n\n    if (mode === \"services\") {\n      return jsonString; // Return raw string for services mode (not JSON)\n    }\n\n    // Parse the JSON string\n    let parsedResult: any;\n    try {\n      parsedResult = JSON.parse(jsonString);\n    } catch (parseError) {\n      console.warn(\"⚠️ Failed to parse JSON, treating as raw summary\");\n      // Fallback: create a structured result with the raw string as summary\n      if (mode === \"first_pass\") {\n        parsedResult = {\n          summary: jsonString,\n          key_files: [],\n          infrastructure: [],\n          dependencies: [],\n          user_stories: [],\n          pages: [],\n        };\n      } else {\n        parsedResult = {\n          summary: jsonString,\n          key_files: [],\n          features: [],\n        };\n      }\n    }\n\n    // Validate and ensure proper structure based on mode\n    let result: ExplorationResult;\n\n    if (mode === \"first_pass\") {\n      result = {\n        summary: parsedResult.summary || jsonString,\n        key_files: parsedResult.key_files || [],\n        infrastructure: parsedResult.infrastructure || [],\n        dependencies: parsedResult.dependencies || [],\n        user_stories: parsedResult.user_stories || [],\n        pages: parsedResult.pages || [],\n      } as FirstPassContextResult;\n    } else {\n      result = {\n        summary: parsedResult.summary || jsonString,\n        key_files: parsedResult.key_files || [],\n        features: parsedResult.features || [],\n      } as FeaturesContextResult;\n    }\n\n    const endTime = Date.now();\n    const duration = endTime - startTime;\n    console.log(`✅ ${mode} exploration completed in ${duration}ms`);\n    console.log(\n      `📊 Result: ${result.key_files.length} key files, summary: ${result.summary.substring(0, 100)}...`\n    );\n\n    return result;\n  } catch (error) {\n    console.error(`💥 Exploration failed:`, error);\n\n    // Return error result with proper structure\n    if (mode === \"first_pass\") {\n      return {\n        summary: `Exploration failed: ${error instanceof Error ? error.message : \"Unknown error\"}`,\n        key_files: [],\n        infrastructure: [],\n        dependencies: [],\n        user_stories: [],\n        pages: [],\n      } as FirstPassContextResult;\n    } else {\n      return {\n        summary: `Exploration failed: ${error instanceof Error ? error.message : \"Unknown error\"}`,\n        key_files: [],\n        features: [],\n      } as FeaturesContextResult;\n    }\n  }\n}\n","import * as fs from \"fs\";\nimport * as path from \"path\";\nimport {\n  FeaturesContextResult,\n  FirstPassContextResult,\n  RepoContextMode,\n} from \"../agent/index.js\";\n\n// Union type for all exploration results\nexport type ExplorationResult =\n  | FeaturesContextResult\n  | FirstPassContextResult\n  | string;\n\n// Stored exploration data with metadata\nexport interface StoredExploration {\n  mode: RepoContextMode;\n  result: ExplorationResult;\n  timestamp: number;\n  owner: string;\n  repo: string;\n  version: string; // For future schema migrations\n}\n\nexport class FileStore {\n  private dataDir: string;\n  private version = \"1.0.0\";\n\n  constructor(dataDir: string = \"./data/repos\") {\n    this.dataDir = dataDir;\n    this.ensureDataDir();\n  }\n\n  private ensureDataDir(): void {\n    if (!fs.existsSync(this.dataDir)) {\n      fs.mkdirSync(this.dataDir, { recursive: true });\n    }\n  }\n\n  private getRepoDir(owner: string, repo: string): string {\n    const repoKey = `${owner}-${repo}`.replace(/[^a-zA-Z0-9-]/g, \"_\");\n    return path.join(this.dataDir, repoKey);\n  }\n\n  private ensureRepoDir(owner: string, repo: string): string {\n    const repoDir = this.getRepoDir(owner, repo);\n    if (!fs.existsSync(repoDir)) {\n      fs.mkdirSync(repoDir, { recursive: true });\n    }\n    return repoDir;\n  }\n\n  // Store basic API data (what you already have)\n  async storeBasicData(owner: string, repo: string, data: any): Promise<void> {\n    const repoDir = this.ensureRepoDir(owner, repo);\n    const filePath = path.join(repoDir, \"basic.json\");\n\n    const enrichedData = {\n      ...data,\n      stored_at: new Date().toISOString(),\n      timestamp: Date.now(),\n      owner,\n      repo,\n    };\n\n    fs.writeFileSync(filePath, JSON.stringify(enrichedData, null, 2));\n    console.log(`💾 Stored basic data for ${owner}/${repo}`);\n  }\n\n  // Get cached basic API data\n  async getBasicData(owner: string, repo: string): Promise<any | null> {\n    const repoDir = this.getRepoDir(owner, repo);\n    const filePath = path.join(repoDir, \"basic.json\");\n\n    if (!fs.existsSync(filePath)) {\n      return null;\n    }\n\n    try {\n      const content = fs.readFileSync(filePath, \"utf-8\");\n      const data = JSON.parse(content);\n      console.log(`📂 Retrieved cached basic data for ${owner}/${repo} (stored at: ${data.stored_at})`);\n      return data;\n    } catch (error) {\n      console.error(`Error reading basic data: ${error}`);\n      return null;\n    }\n  }\n\n  // Check if we have recent basic data\n  async hasRecentBasicData(\n    owner: string,\n    repo: string,\n    maxAgeHours: number = 24\n  ): Promise<boolean> {\n    const data = await this.getBasicData(owner, repo);\n    if (!data || !data.timestamp) return false;\n\n    const ageMs = Date.now() - data.timestamp;\n    const ageHours = ageMs / (1000 * 60 * 60);\n    return ageHours < maxAgeHours;\n  }\n\n  // Store agent exploration results\n  async storeExploration(\n    owner: string,\n    repo: string,\n    mode: RepoContextMode,\n    result: ExplorationResult\n  ): Promise<void> {\n    const repoDir = this.ensureRepoDir(owner, repo);\n    const filePath = path.join(repoDir, `exploration-${mode}.json`);\n\n    const storedExploration: StoredExploration = {\n      mode,\n      result,\n      timestamp: Date.now(),\n      owner,\n      repo,\n      version: this.version,\n    };\n\n    fs.writeFileSync(filePath, JSON.stringify(storedExploration, null, 2));\n    console.log(`🔍 Stored ${mode} exploration for ${owner}/${repo}`);\n  }\n\n  // Get stored exploration data\n  async getExploration(\n    owner: string,\n    repo: string,\n    mode: RepoContextMode\n  ): Promise<StoredExploration | null> {\n    const repoDir = this.getRepoDir(owner, repo);\n    const filePath = path.join(repoDir, `exploration-${mode}.json`);\n\n    if (!fs.existsSync(filePath)) {\n      return null;\n    }\n\n    try {\n      const content = fs.readFileSync(filePath, \"utf-8\");\n      return JSON.parse(content);\n    } catch (error) {\n      console.error(`Error reading exploration data: ${error}`);\n      return null;\n    }\n  }\n\n  // Get all exploration data for a repo\n  async getAllExplorations(\n    owner: string,\n    repo: string\n  ): Promise<StoredExploration[]> {\n    const repoDir = this.getRepoDir(owner, repo);\n\n    if (!fs.existsSync(repoDir)) {\n      return [];\n    }\n\n    const explorations: StoredExploration[] = [];\n    const modes: RepoContextMode[] = [\"first_pass\", \"features\"];\n\n    for (const mode of modes) {\n      const exploration = await this.getExploration(owner, repo, mode);\n      if (exploration) {\n        explorations.push(exploration);\n      }\n    }\n\n    return explorations;\n  }\n\n  // Check if we have recent exploration data\n  async hasRecentExploration(\n    owner: string,\n    repo: string,\n    mode: RepoContextMode,\n    maxAgeHours: number = 24\n  ): Promise<boolean> {\n    const exploration = await this.getExploration(owner, repo, mode);\n    if (!exploration) return false;\n\n    const ageMs = Date.now() - exploration.timestamp;\n    const ageHours = ageMs / (1000 * 60 * 60);\n    return ageHours < maxAgeHours;\n  }\n\n  // Helper to get first_pass data typed correctly\n  async getFirstPassExploration(\n    owner: string,\n    repo: string\n  ): Promise<FirstPassContextResult | null> {\n    const stored = await this.getExploration(owner, repo, \"first_pass\");\n    return (stored?.result as FirstPassContextResult) || null;\n  }\n\n  // Helper to get features exploration data typed correctly\n  async getFeaturesExploration(\n    owner: string,\n    repo: string\n  ): Promise<FeaturesContextResult | null> {\n    const stored = await this.getExploration(owner, repo, \"features\");\n    return (stored?.result as FeaturesContextResult) || null;\n  }\n\n  // List all stored repositories with exploration status\n  async listRepos(): Promise<\n    Array<{\n      owner: string;\n      repo: string;\n      explorations: {\n        first_pass: boolean;\n        features: boolean;\n      };\n      lastExplored?: number;\n    }>\n  > {\n    if (!fs.existsSync(this.dataDir)) {\n      return [];\n    }\n\n    const repos = [];\n    const entries = fs.readdirSync(this.dataDir);\n\n    for (const entry of entries) {\n      const parts = entry.split(\"-\");\n      if (parts.length >= 2) {\n        const owner = parts[0];\n        const repo = parts.slice(1).join(\"-\");\n\n        const explorations = await this.getAllExplorations(owner, repo);\n        const hasFirstPass = explorations.some((e) => e.mode === \"first_pass\");\n        const hasFeatures = explorations.some((e) => e.mode === \"features\");\n\n        const lastExplored =\n          explorations.length > 0\n            ? Math.max(...explorations.map((e) => e.timestamp))\n            : undefined;\n\n        repos.push({\n          owner,\n          repo,\n          explorations: {\n            first_pass: hasFirstPass,\n            features: hasFeatures,\n          },\n          lastExplored,\n        });\n      }\n    }\n\n    return repos;\n  }\n\n  // Clean up old exploration data\n  async cleanupOldExplorations(maxAgeHours: number = 24 * 7): Promise<void> {\n    const repos = await this.listRepos();\n    const cutoff = Date.now() - maxAgeHours * 60 * 60 * 1000;\n\n    for (const repoInfo of repos) {\n      if (repoInfo.lastExplored && repoInfo.lastExplored < cutoff) {\n        const repoDir = this.getRepoDir(repoInfo.owner, repoInfo.repo);\n\n        // Only remove exploration files, keep basic data\n        const modes: RepoContextMode[] = [\"first_pass\", \"features\"];\n        for (const mode of modes) {\n          const filePath = path.join(repoDir, `exploration-${mode}.json`);\n          if (fs.existsSync(filePath)) {\n            fs.unlinkSync(filePath);\n            console.log(\n              `🧹 Cleaned up old ${mode} exploration for ${repoInfo.owner}/${repoInfo.repo}`\n            );\n          }\n        }\n      }\n    }\n  }\n}\n","import { EventEmitter } from 'events';\nimport { ExplorationResult } from '../persistence/index.js';\nimport { RepoContextMode } from '../agent/index.js';\n\nexport interface ExplorationEvent {\n  type: 'clone_started' | 'clone_completed' | 'exploration_started' | 'exploration_progress' | 'exploration_completed' | 'exploration_failed';\n  owner: string;\n  repo: string;\n  mode?: RepoContextMode;\n  data?: any;\n  error?: string;\n  timestamp: number;\n}\n\nexport class ExplorationEmitter extends EventEmitter {\n  private static instance: ExplorationEmitter;\n\n  static getInstance(): ExplorationEmitter {\n    if (!this.instance) {\n      this.instance = new ExplorationEmitter();\n    }\n    return this.instance;\n  }\n\n  private constructor() {\n    super();\n    this.setMaxListeners(100); // Allow many concurrent listeners\n  }\n\n  private getRepoKey(owner: string, repo: string): string {\n    return `${owner}/${repo}`;\n  }\n\n  // Emit clone events\n  emitCloneStarted(owner: string, repo: string): void {\n    const event: ExplorationEvent = {\n      type: 'clone_started',\n      owner,\n      repo,\n      timestamp: Date.now()\n    };\n\n    this.emit(this.getRepoKey(owner, repo), event);\n    console.log(`🔔 Emitted clone_started for ${owner}/${repo}`);\n  }\n\n  emitCloneCompleted(owner: string, repo: string, success: boolean, localPath?: string): void {\n    const event: ExplorationEvent = {\n      type: 'clone_completed',\n      owner,\n      repo,\n      data: { success, localPath },\n      timestamp: Date.now()\n    };\n\n    this.emit(this.getRepoKey(owner, repo), event);\n    console.log(`🔔 Emitted clone_completed for ${owner}/${repo}: ${success ? 'success' : 'failed'}`);\n  }\n\n  // Emit exploration events\n  emitExplorationStarted(owner: string, repo: string, mode: RepoContextMode): void {\n    const event: ExplorationEvent = {\n      type: 'exploration_started',\n      owner,\n      repo,\n      mode,\n      timestamp: Date.now()\n    };\n\n    this.emit(this.getRepoKey(owner, repo), event);\n    console.log(`🔔 Emitted exploration_started for ${owner}/${repo} (${mode})`);\n  }\n\n  emitExplorationProgress(owner: string, repo: string, mode: RepoContextMode, progress: string): void {\n    const event: ExplorationEvent = {\n      type: 'exploration_progress',\n      owner,\n      repo,\n      mode,\n      data: { progress },\n      timestamp: Date.now()\n    };\n\n    this.emit(this.getRepoKey(owner, repo), event);\n    console.log(`🔔 Emitted exploration_progress for ${owner}/${repo} (${mode}): ${progress}`);\n  }\n\n  emitExplorationCompleted(owner: string, repo: string, mode: RepoContextMode, result: ExplorationResult): void {\n    const event: ExplorationEvent = {\n      type: 'exploration_completed',\n      owner,\n      repo,\n      mode,\n      data: { result },\n      timestamp: Date.now()\n    };\n\n    this.emit(this.getRepoKey(owner, repo), event);\n    console.log(`🔔 Emitted exploration_completed for ${owner}/${repo} (${mode})`);\n  }\n\n  emitExplorationFailed(owner: string, repo: string, mode: RepoContextMode, error: string): void {\n    const event: ExplorationEvent = {\n      type: 'exploration_failed',\n      owner,\n      repo,\n      mode,\n      error,\n      timestamp: Date.now()\n    };\n\n    this.emit(this.getRepoKey(owner, repo), event);\n    console.log(`🔔 Emitted exploration_failed for ${owner}/${repo} (${mode}): ${error}`);\n  }\n\n  // Subscribe to repository events\n  subscribeToRepo(owner: string, repo: string, callback: (event: ExplorationEvent) => void): () => void {\n    const repoKey = this.getRepoKey(owner, repo);\n    this.on(repoKey, callback);\n\n    console.log(`📡 New subscriber for ${owner}/${repo} (total: ${this.listenerCount(repoKey)})`);\n\n    // Emit connection established event for potential cached data handling\n    this.emit(`connection:${repoKey}`, { owner, repo });\n\n    // Return unsubscribe function\n    return () => {\n      this.removeListener(repoKey, callback);\n      console.log(`📡 Unsubscribed from ${owner}/${repo} (remaining: ${this.listenerCount(repoKey)})`);\n    };\n  }\n\n  // Wait for at least one SSE connection\n  waitForConnection(owner: string, repo: string, timeoutMs: number = 5000): Promise<void> {\n    return new Promise((resolve, reject) => {\n      const repoKey = this.getRepoKey(owner, repo);\n\n      // Check if already connected\n      if (this.listenerCount(repoKey) > 0) {\n        resolve();\n        return;\n      }\n\n      // Wait for connection\n      const timeout = setTimeout(() => {\n        this.removeListener(`connection:${repoKey}`, onConnection);\n        reject(new Error(`Timeout waiting for SSE connection to ${owner}/${repo}`));\n      }, timeoutMs);\n\n      const onConnection = () => {\n        clearTimeout(timeout);\n        this.removeListener(`connection:${repoKey}`, onConnection);\n        resolve();\n      };\n\n      this.once(`connection:${repoKey}`, onConnection);\n    });\n  }\n\n  // Get current listener count for debugging\n  getListenerCount(owner: string, repo: string): number {\n    return this.listenerCount(this.getRepoKey(owner, repo));\n  }\n\n  // Cleanup old listeners (optional)\n  cleanupRepo(owner: string, repo: string): void {\n    const repoKey = this.getRepoKey(owner, repo);\n    this.removeAllListeners(repoKey);\n    console.log(`🧹 Cleaned up all listeners for ${owner}/${repo}`);\n  }\n}","import { IncomingMessage, ServerResponse } from \"http\";\nimport { GitSeeCache } from \"./utils/cache.js\";\nimport {\n  ContributorsResource,\n  IconsResource,\n  RepositoryResource,\n  CommitsResource,\n  BranchesResource,\n  FilesResource,\n  StatsResource,\n} from \"./resources/index.js\";\nimport { GitSeeRequest, GitSeeResponse, GitSeeOptions } from \"./types/index.js\";\nimport {\n  RepoCloner,\n  explore,\n  RepoContextMode,\n  CloneOptions,\n} from \"./agent/index.js\";\nimport { FileStore } from \"./persistence/index.js\";\nimport { ExplorationEmitter } from \"./events/index.js\";\n\nexport class GitSeeHandler {\n  private cache: GitSeeCache;\n  private store: FileStore;\n  private emitter: ExplorationEmitter;\n\n  // Resource modules\n  private contributors: ContributorsResource;\n  private icons: IconsResource;\n  private repository: RepositoryResource;\n  private commits: CommitsResource;\n  private branches: BranchesResource;\n  private files: FilesResource;\n  private stats: StatsResource;\n\n  constructor(options: GitSeeOptions = {}) {\n    this.cache = new GitSeeCache(options.cache?.ttl);\n    this.store = new FileStore(options.cacheDir);\n    this.emitter = ExplorationEmitter.getInstance();\n\n    // Initialize resource modules\n    this.contributors = new ContributorsResource(this.cache, options.token);\n    this.icons = new IconsResource(this.cache, options.token);\n    this.repository = new RepositoryResource(this.cache, options.token);\n    this.commits = new CommitsResource(this.cache, options.token);\n    this.branches = new BranchesResource(this.cache, options.token);\n    this.files = new FilesResource(this.cache, options.token);\n    this.stats = new StatsResource(this.cache, options.token);\n  }\n\n  async handleEvents(\n    req: IncomingMessage,\n    res: ServerResponse,\n    owner: string,\n    repo: string\n  ): Promise<void> {\n    console.log(`📡 SSE connection established for ${owner}/${repo}`);\n\n    // Set SSE headers\n    res.writeHead(200, {\n      \"Content-Type\": \"text/event-stream\",\n      \"Cache-Control\": \"no-cache\",\n      Connection: \"keep-alive\",\n      \"Access-Control-Allow-Origin\": \"*\",\n      \"Access-Control-Allow-Headers\": \"Cache-Control\",\n    });\n\n    // Send initial connection event\n    res.write(\n      `data: ${JSON.stringify({\n        type: \"connected\",\n        owner,\n        repo,\n        timestamp: Date.now(),\n      })}\\n\\n`\n    );\n\n    // Subscribe to repository events\n    const unsubscribe = this.emitter.subscribeToRepo(owner, repo, (event) => {\n      try {\n        res.write(`data: ${JSON.stringify(event)}\\n\\n`);\n      } catch (error) {\n        console.error(\n          `💥 Error writing SSE event for ${owner}/${repo}:`,\n          error\n        );\n      }\n    });\n\n    // Handle client disconnect\n    req.on(\"close\", () => {\n      console.log(`📡 SSE connection closed for ${owner}/${repo}`);\n      unsubscribe();\n    });\n\n    req.on(\"error\", (error) => {\n      console.error(`💥 SSE connection error for ${owner}/${repo}:`, error);\n      unsubscribe();\n    });\n\n    // Keep connection alive with periodic heartbeat\n    const heartbeat = setInterval(() => {\n      try {\n        res.write(\n          `data: ${JSON.stringify({\n            type: \"heartbeat\",\n            timestamp: Date.now(),\n          })}\\n\\n`\n        );\n      } catch (error) {\n        console.error(`💥 Heartbeat failed for ${owner}/${repo}:`, error);\n        clearInterval(heartbeat);\n        unsubscribe();\n      }\n    }, 30000); // 30 second heartbeat\n\n    // Clean up heartbeat when connection closes\n    req.on(\"close\", () => {\n      clearInterval(heartbeat);\n    });\n  }\n\n  async handle(req: IncomingMessage, res: ServerResponse): Promise<void> {\n    // console.log(`🔗 GitSeeHandler.handle() - URL: ${req.url}`);\n\n    // Set CORS headers\n    res.setHeader(\"Access-Control-Allow-Origin\", \"*\");\n    res.setHeader(\"Access-Control-Allow-Methods\", \"POST, OPTIONS\");\n    res.setHeader(\"Access-Control-Allow-Headers\", \"Content-Type\");\n\n    if (req.method === \"OPTIONS\") {\n      res.writeHead(200);\n      res.end();\n      return;\n    }\n\n    if (req.method !== \"POST\") {\n      res.writeHead(405, { \"Content-Type\": \"application/json\" });\n      res.end(JSON.stringify({ error: \"Method not allowed\" }));\n      return;\n    }\n\n    try {\n      const body = await this.parseRequestBody(req);\n      const request: GitSeeRequest = JSON.parse(body);\n\n      const response = await this.processRequest(request);\n\n      res.writeHead(200, { \"Content-Type\": \"application/json\" });\n      res.end(JSON.stringify(response));\n    } catch (error) {\n      console.error(\"GitSee handler error:\", error);\n      res.writeHead(500, { \"Content-Type\": \"application/json\" });\n      res.end(\n        JSON.stringify({\n          error:\n            error instanceof Error ? error.message : \"Internal server error\",\n        })\n      );\n    }\n  }\n\n  /**\n   * Handle request with pre-parsed JSON body (for Express.js integration)\n   * Use this when your framework already parsed the JSON body (e.g., express.json() middleware)\n   */\n  async handleJson(body: GitSeeRequest, res: ServerResponse): Promise<void> {\n    // Set CORS headers\n    res.setHeader(\"Access-Control-Allow-Origin\", \"*\");\n    res.setHeader(\"Access-Control-Allow-Methods\", \"POST, OPTIONS\");\n    res.setHeader(\"Access-Control-Allow-Headers\", \"Content-Type\");\n\n    try {\n      const response = await this.processRequest(body);\n\n      res.writeHead(200, { \"Content-Type\": \"application/json\" });\n      res.end(JSON.stringify(response));\n    } catch (error) {\n      console.error(\"GitSee handleJson error:\", error);\n      res.writeHead(500, { \"Content-Type\": \"application/json\" });\n      res.end(\n        JSON.stringify({\n          error:\n            error instanceof Error ? error.message : \"Internal server error\",\n        })\n      );\n    }\n  }\n\n  private autoStartFirstPassExploration(\n    owner: string,\n    repo: string,\n    cloneOptions?: CloneOptions\n  ): void {\n    // Use setImmediate to completely defer this work\n    setImmediate(async () => {\n      try {\n        // Check if we already have recent first_pass exploration\n        const hasRecent = await this.store.hasRecentExploration(\n          owner,\n          repo,\n          \"first_pass\",\n          24\n        );\n\n        if (!hasRecent) {\n          console.log(\n            `🚀 Auto-starting first_pass exploration for ${owner}/${repo}...`\n          );\n          this.emitter.emitExplorationStarted(owner, repo, \"first_pass\");\n\n          // Fire and forget - don't await, let it run in background\n          this.runBackgroundExploration(\n            owner,\n            repo,\n            \"first_pass\",\n            cloneOptions\n          ).catch((error) => {\n            console.error(\n              `🚨 Background first_pass exploration failed for ${owner}/${repo}:`,\n              error.message\n            );\n            this.emitter.emitExplorationFailed(\n              owner,\n              repo,\n              \"first_pass\",\n              error.message\n            );\n          });\n        } else {\n          console.log(\n            `✅ Recent first_pass exploration found for ${owner}/${repo}, emitting cached result`\n          );\n\n          // Wait for SSE connection then emit cached exploration\n          setImmediate(async () => {\n            try {\n              const cached = await this.store.getExploration(\n                owner,\n                repo,\n                \"first_pass\"\n              );\n              if (cached?.result) {\n                console.log(\n                  `⏳ Waiting for SSE connection before emitting cached first_pass exploration for ${owner}/${repo}`\n                );\n\n                // Wait for SSE connection with timeout\n                try {\n                  await this.emitter.waitForConnection(owner, repo, 10000);\n                  console.log(\n                    `🔔 SSE connected! Emitting cached first_pass exploration for ${owner}/${repo}`\n                  );\n                  console.log(\n                    `🔔 Infrastructure in cached result:`,\n                    (cached.result as any).infrastructure\n                  );\n                  console.log(\n                    `🔔 Current SSE listeners:`,\n                    this.emitter.getListenerCount(owner, repo)\n                  );\n                  this.emitter.emitExplorationCompleted(\n                    owner,\n                    repo,\n                    \"first_pass\",\n                    cached.result\n                  );\n                } catch (timeoutError) {\n                  console.warn(\n                    `⏰ Timeout waiting for SSE connection, emitting anyway for ${owner}/${repo}`\n                  );\n                  this.emitter.emitExplorationCompleted(\n                    owner,\n                    repo,\n                    \"first_pass\",\n                    cached.result\n                  );\n                }\n              }\n            } catch (error) {\n              console.error(\n                `💥 Error emitting cached exploration for ${owner}/${repo}:`,\n                error\n              );\n            }\n          });\n        }\n      } catch (error) {\n        console.error(\n          `💥 Error checking exploration status for ${owner}/${repo}:`,\n          error\n        );\n      }\n    });\n  }\n\n  private async runBackgroundExploration(\n    owner: string,\n    repo: string,\n    mode: RepoContextMode,\n    cloneOptions?: CloneOptions\n  ): Promise<void> {\n    try {\n      // Wait for repo to be cloned with options if provided\n      await RepoCloner.waitForClone(owner, repo, cloneOptions);\n      const cloneResult = await RepoCloner.getCloneResult(owner, repo);\n\n      if (cloneResult?.success && cloneResult.localPath) {\n        this.emitter.emitCloneCompleted(\n          owner,\n          repo,\n          true,\n          cloneResult.localPath\n        );\n\n        const prompt =\n          mode === \"first_pass\"\n            ? \"Analyze this repository and provide a comprehensive overview\"\n            : \"What are the key features and components of this codebase?\";\n\n        console.log(\n          `🤖 Running background ${mode} exploration for ${owner}/${repo}...`\n        );\n        this.emitter.emitExplorationProgress(\n          owner,\n          repo,\n          mode,\n          \"Running AI analysis...\"\n        );\n\n        const explorationResult = await explore(\n          prompt,\n          cloneResult.localPath,\n          mode\n        );\n\n        // Store the results\n        await this.store.storeExploration(owner, repo, mode, explorationResult);\n\n        console.log(\n          `✅ Background ${mode} exploration completed for ${owner}/${repo}`\n        );\n        this.emitter.emitExplorationCompleted(\n          owner,\n          repo,\n          mode,\n          explorationResult\n        );\n      } else {\n        console.error(\n          `❌ Repository clone failed for background exploration: ${owner}/${repo}`\n        );\n        this.emitter.emitCloneCompleted(owner, repo, false);\n        this.emitter.emitExplorationFailed(\n          owner,\n          repo,\n          mode,\n          \"Repository clone failed\"\n        );\n      }\n    } catch (error) {\n      console.error(\n        `💥 Background ${mode} exploration failed for ${owner}/${repo}:`,\n        error\n      );\n      this.emitter.emitExplorationFailed(\n        owner,\n        repo,\n        mode,\n        error instanceof Error ? error.message : \"Unknown error\"\n      );\n    }\n  }\n\n  private async parseRequestBody(req: IncomingMessage): Promise<string> {\n    return new Promise((resolve, reject) => {\n      let body = \"\";\n      req.on(\"data\", (chunk: any) => (body += chunk));\n      req.on(\"end\", () => resolve(body));\n      req.on(\"error\", reject);\n    });\n  }\n\n  private async processRequest(\n    request: GitSeeRequest\n  ): Promise<GitSeeResponse> {\n    const { owner, repo, data, cloneOptions, useCache } = request;\n    const response: GitSeeResponse = {};\n\n    // Check if we should use cached data (default: true, skip only if explicitly false)\n    if (useCache !== false) {\n      const cachedData = await this.store.getBasicData(owner, repo);\n      if (cachedData) {\n        console.log(`💾 Using cached data for ${owner}/${repo}`);\n        // Return cached data directly\n        return {\n          repo: cachedData.repo,\n          contributors: cachedData.contributors,\n          icon: cachedData.icon,\n          files: cachedData.files,\n          stats: cachedData.stats,\n        };\n      } else {\n        console.log(`💾 No cached data found for ${owner}/${repo}, fetching fresh...`);\n      }\n    } else {\n      console.log(`🔄 useCache=false, skipping cache and fetching fresh data for ${owner}/${repo}`);\n    }\n\n    // Create per-request resource instances if token provided\n    const contributors = cloneOptions?.token\n      ? new ContributorsResource(this.cache, cloneOptions.token)\n      : this.contributors;\n    const icons = cloneOptions?.token\n      ? new IconsResource(this.cache, cloneOptions.token)\n      : this.icons;\n    const repository = cloneOptions?.token\n      ? new RepositoryResource(this.cache, cloneOptions.token)\n      : this.repository;\n    const commits = cloneOptions?.token\n      ? new CommitsResource(this.cache, cloneOptions.token)\n      : this.commits;\n    const branches = cloneOptions?.token\n      ? new BranchesResource(this.cache, cloneOptions.token)\n      : this.branches;\n    const files = cloneOptions?.token\n      ? new FilesResource(this.cache, cloneOptions.token)\n      : this.files;\n    const stats = cloneOptions?.token\n      ? new StatsResource(this.cache, cloneOptions.token)\n      : this.stats;\n\n    // 🚀 AGENTIC: Start background clone immediately (fire-and-forget) with clone options\n    console.log(`🔄 Starting background clone for ${owner}/${repo}...`);\n    this.emitter.emitCloneStarted(owner, repo);\n    RepoCloner.cloneInBackground(owner, repo, cloneOptions);\n\n    // 🤖 AGENTIC: Auto-start first_pass exploration if we don't have recent data (fire-and-forget)\n    this.autoStartFirstPassExploration(owner, repo, cloneOptions);\n\n    // No more visualization options sent from backend\n\n    // Validate input\n    if (!owner || !repo) {\n      throw new Error(\"Owner and repo are required\");\n    }\n\n    if (!Array.isArray(data) || data.length === 0) {\n      throw new Error(\"Data array is required and must not be empty\");\n    }\n\n    console.log(\n      `🔍 Processing request for ${owner}/${repo} with data: [${data.join(\", \")}]`\n    );\n\n    // Process each requested data type using resource modules\n    for (const dataType of data) {\n      try {\n        switch (dataType) {\n          case \"repo_info\":\n            console.log(`🔍 Fetching repository info for ${owner}/${repo}...`);\n            response.repo = await repository.getRepoInfo(owner, repo);\n            console.log(`📋 Repository info result: Found`);\n            break;\n\n          case \"contributors\":\n            console.log(`🔍 Fetching contributors for ${owner}/${repo}...`);\n            response.contributors = await contributors.getContributors(\n              owner,\n              repo\n            );\n            console.log(\n              `👥 Contributors result: ${response.contributors?.length || 0} found`\n            );\n            break;\n\n          case \"icon\":\n            console.log(`🔍 Fetching icon for ${owner}/${repo}...`);\n            response.icon = await icons.getRepoIcon(owner, repo);\n            console.log(\n              `📷 Icon result:`,\n              response.icon ? \"Found\" : \"Not found\"\n            );\n            break;\n\n          case \"commits\":\n            console.log(`🔍 Fetching commits for ${owner}/${repo}...`);\n            response.commits = await commits.getCommits(owner, repo);\n            console.log(`📝 Commits result: Retrieved commit summary`);\n            break;\n\n          case \"branches\":\n            console.log(`🔍 Fetching branches for ${owner}/${repo}...`);\n            response.branches = await branches.getBranches(owner, repo);\n            console.log(\n              `🌿 Branches result: ${response.branches?.length || 0} found`\n            );\n            break;\n\n          case \"files\":\n            console.log(`🔍 Fetching key files for ${owner}/${repo}...`);\n            response.files = await files.getKeyFiles(owner, repo);\n            console.log(\n              `📁 Files result: ${response.files?.length || 0} found`\n            );\n            break;\n\n          case \"stats\":\n            console.log(`🔍 Fetching stats for ${owner}/${repo}...`);\n            response.stats = await stats.getRepoStats(owner, repo);\n            console.log(\n              `📊 Stats result: ${response.stats?.stars} stars, ${response.stats?.totalIssues} issues, ${response.stats?.totalCommits} commits, ${response.stats?.ageInYears}y old`\n            );\n            break;\n\n          case \"file_content\":\n            if (!request.filePath) {\n              console.warn(\n                `⚠️ File content requested but no filePath provided`\n              );\n              break;\n            }\n            console.log(\n              `🔍 Fetching file content for ${owner}/${repo}:${request.filePath}...`\n            );\n            response.fileContent = await files.getFileContent(\n              owner,\n              repo,\n              request.filePath\n            );\n            console.log(\n              `📄 File content result: ${\n                response.fileContent\n                  ? `Found (${response.fileContent.size} bytes)`\n                  : \"Not found\"\n              }`\n            );\n            break;\n\n          case \"exploration\":\n            console.log(`🔍 Fetching exploration data for ${owner}/${repo}...`);\n            const explorationMode: RepoContextMode =\n              request.explorationMode || \"features\";\n\n            // Check if we have recent exploration data\n            if (\n              await this.store.hasRecentExploration(\n                owner,\n                repo,\n                explorationMode,\n                24\n              )\n            ) {\n              console.log(\n                `♻️ Using cached ${explorationMode} exploration data`\n              );\n              const cached = await this.store.getExploration(\n                owner,\n                repo,\n                explorationMode\n              );\n              response.exploration = cached?.result;\n\n              // Emit the cached result for any SSE listeners\n              if (cached?.result) {\n                this.emitter.emitExplorationCompleted(\n                  owner,\n                  repo,\n                  explorationMode,\n                  cached.result\n                );\n              }\n            } else {\n              console.log(`🤖 Running ${explorationMode} agent exploration...`);\n              try {\n                // Wait for repo to be cloned first with options if provided\n                await RepoCloner.waitForClone(owner, repo, cloneOptions);\n                const cloneResult = await RepoCloner.getCloneResult(\n                  owner,\n                  repo\n                );\n\n                if (cloneResult?.success && cloneResult.localPath) {\n                  const prompt =\n                    request.explorationPrompt ||\n                    (explorationMode === \"first_pass\"\n                      ? \"Analyze this repository and provide a comprehensive overview\"\n                      : \"What are the key features and components of this codebase?\");\n\n                  const explorationResult = await explore(\n                    prompt,\n                    cloneResult.localPath,\n                    explorationMode\n                  );\n\n                  // Store for future requests\n                  await this.store.storeExploration(\n                    owner,\n                    repo,\n                    explorationMode,\n                    explorationResult\n                  );\n                  response.exploration = explorationResult;\n\n                  // Also store basic data if this is our first interaction\n                  await this.store.storeBasicData(owner, repo, {\n                    repo: response.repo,\n                    contributors: response.contributors,\n                    files: response.files,\n                    stats: response.stats,\n                    icon: response.icon,\n                  });\n\n                  console.log(\n                    `✅ ${explorationMode} exploration completed and cached`\n                  );\n                } else {\n                  console.error(\"Repository clone failed or not available\");\n                  response.exploration = {\n                    error: \"Repository not accessible for exploration\",\n                  };\n                }\n              } catch (error) {\n                console.error(\n                  `Failed to run ${explorationMode} exploration:`,\n                  error\n                );\n                response.exploration = {\n                  error: `Exploration failed: ${error instanceof Error ? error.message : \"Unknown error\"}`,\n                };\n              }\n            }\n            break;\n\n          default:\n            console.warn(`⚠️  Unknown data type: ${dataType}`);\n        }\n      } catch (error) {\n        console.error(\n          `💥 Error processing ${dataType} for ${owner}/${repo}:`,\n          error\n        );\n        // Continue processing other data types instead of failing completely\n      }\n    }\n\n    return response;\n  }\n}\n\n// Factory function for easy integration\nexport function createGitSeeHandler(options: GitSeeOptions = {}) {\n  const handler = new GitSeeHandler(options);\n  return (req: IncomingMessage, res: ServerResponse) =>\n    handler.handle(req, res);\n}\n","import { IncomingMessage, ServerResponse, createServer } from 'http';\nimport { URL } from 'url';\nimport { GitSeeHandler } from './handler.js';\nimport type { GitSeeOptions } from './types/index.js';\n\nexport function createGitSeeServer(options: GitSeeOptions = {}) {\n  const handler = new GitSeeHandler(options);\n\n  return createServer(async (req: IncomingMessage, res: ServerResponse) => {\n    try {\n      const url = new URL(req.url || '/', `http://${req.headers.host}`);\n\n      // Handle SSE endpoint: /api/gitsee/events/:owner/:repo\n      if (url.pathname.startsWith('/api/gitsee/events/')) {\n        const pathParts = url.pathname.split('/');\n        if (pathParts.length >= 6) {\n          const owner = pathParts[4];\n          const repo = pathParts[5];\n\n          console.log(`📡 SSE request for ${owner}/${repo}`);\n          return await handler.handleEvents(req, res, owner, repo);\n        }\n      }\n\n      // Handle regular API endpoint: /api/gitsee\n      if (url.pathname === '/api/gitsee') {\n        return await handler.handle(req, res);\n      }\n\n      // Handle CORS preflight for SSE\n      if (req.method === 'OPTIONS') {\n        res.writeHead(200, {\n          'Access-Control-Allow-Origin': '*',\n          'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',\n          'Access-Control-Allow-Headers': 'Content-Type, Cache-Control',\n        });\n        res.end();\n        return;\n      }\n\n      // 404 for other routes\n      res.writeHead(404, { 'Content-Type': 'application/json' });\n      res.end(JSON.stringify({ error: 'Not found' }));\n\n    } catch (error) {\n      console.error('Server error:', error);\n      res.writeHead(500, { 'Content-Type': 'application/json' });\n      res.end(JSON.stringify({\n        error: error instanceof Error ? error.message : 'Internal server error'\n      }));\n    }\n  });\n}\n\n// Factory function for easy integration (keeps compatibility)\nexport function createGitSeeHandler(options: GitSeeOptions = {}) {\n  const handler = new GitSeeHandler(options);\n  return (req: IncomingMessage, res: ServerResponse) => handler.handle(req, res);\n}\n\n// Export the handler class\nexport { GitSeeHandler };"],"mappings":";;;;;;;AAKO,IAAM,cAAN,MAAkB;AAAA,EAIvB,YAAY,MAAc,KAAK;AAH/B,SAAQ,QAAQ,oBAAI,IAAwB;AAK1C,SAAK,MAAM,MAAM;AAAA,EACnB;AAAA,EAEA,IAAI,KAAyB;AAC3B,UAAM,QAAQ,KAAK,MAAM,IAAI,GAAG;AAChC,QAAI,CAAC,MAAO,QAAO;AAEnB,QAAI,KAAK,IAAI,IAAI,MAAM,SAAS;AAC9B,WAAK,MAAM,OAAO,GAAG;AACrB,aAAO;AAAA,IACT;AAEA,WAAO,MAAM;AAAA,EACf;AAAA,EAEA,IAAI,KAAa,MAAiB;AAChC,SAAK,MAAM,IAAI,KAAK;AAAA,MAClB;AAAA,MACA,SAAS,KAAK,IAAI,IAAI,KAAK;AAAA,IAC7B,CAAC;AAAA,EACH;AAAA,EAEA,QAAc;AACZ,SAAK,MAAM,MAAM;AAAA,EACnB;AACF;;;AClCO,IAAe,eAAf,MAA4B;AAAA,EAGjC,YAAY,OAAoB;AAC9B,SAAK,QAAQ;AAAA,EACf;AAAA,EAEU,YAAY,OAAe,MAAc,MAAsB;AACvE,WAAO,GAAG,IAAI,IAAI,KAAK,IAAI,IAAI;AAAA,EACjC;AAAA,EAEA,MAAgB,UACd,OACA,MACA,MACwB;AACxB,UAAM,WAAW,KAAK,YAAY,OAAO,MAAM,IAAI;AACnD,WAAO,KAAK,MAAM,IAAI,QAAQ;AAAA,EAChC;AAAA,EAEU,UACR,OACA,MACA,MACA,MACM;AACN,UAAM,WAAW,KAAK,YAAY,OAAO,MAAM,IAAI;AACnD,SAAK,MAAM,IAAI,UAAU,IAAI;AAAA,EAC/B;AACF;;;AC/BA,SAAS,eAAe;AAQjB,IAAe,eAAf,MAA4B;AAAA,EAIjC,YAAY,SAA6B,CAAC,GAAG;AAC3C,SAAK,SAAS;AAAA,MACZ,cAAc;AAAA,MACd,aAAa;AAAA,MACb,GAAG;AAAA,IACL;AAEA,SAAK,UAAU,IAAI,QAAQ;AAAA,MACzB,MAAM,OAAO;AAAA,IACf,CAAC;AAAA,EACH;AAAA,EAEA,MAAgB,SAAY,SAAc,OAA8B;AACtE,UAAM,cAAc,SAAS,KAAK,OAAO,gBAAgB;AAEzD,QAAI,eAAe,KAAK;AAEtB,YAAM,WAAW,MAAM,QAAQ,EAAE,UAAU,YAAY,CAAC;AACxD,aAAO,SAAS;AAAA,IAClB;AAGA,UAAM,UAAe,CAAC;AACtB,QAAI,OAAO;AACX,UAAM,UAAU;AAEhB,WAAO,QAAQ,SAAS,aAAa;AACnC,YAAM,YAAY,cAAc,QAAQ;AACxC,YAAM,cAAc,KAAK,IAAI,SAAS,SAAS;AAE/C,YAAM,WAAW,MAAM,QAAQ;AAAA,QAC7B,UAAU;AAAA,QACV;AAAA,MACF,CAAC;AAED,UAAI,SAAS,KAAK,WAAW,EAAG;AAEhC,cAAQ,KAAK,GAAG,SAAS,IAAI;AAC7B;AAAA,IACF;AAEA,WAAO,QAAQ,MAAM,GAAG,WAAW;AAAA,EACrC;AACF;;;ACpDO,IAAM,iBAAN,cAA6B,aAAa;AAAA;AAAA,EAE/C,MAAc,oBACZ,OACA,MACA,UAAgC,CAAC,GACV;AACvB,UAAM;AAAA,MACJ,OAAO,KAAK,OAAO;AAAA,MACnB,QAAQ,KAAK,OAAO;AAAA,MACpB;AAAA,MACA;AAAA,MACA;AAAA,IACF,IAAI;AAEJ,UAAM,YACJ,UACC,OACG,IAAI,KAAK,KAAK,IAAI,IAAI,OAAO,KAAK,KAAK,KAAK,GAAI,EAAE,YAAY,IAC9D;AAEN,UAAM,UAAU,MAAM,KAAK;AAAA,MACzB,CAAC,WACC,KAAK,QAAQ,KAAK,MAAM,YAAY;AAAA,QAClC;AAAA,QACA;AAAA,QACA;AAAA,QACA,OAAO;AAAA,QACP;AAAA,QACA,GAAG;AAAA,MACL,CAAC;AAAA,MACH;AAAA,IACF;AAEA,WAAO;AAAA,EACT;AAAA;AAAA,EAGA,MAAc,6BACZ,OACA,MACA,UAAgC,CAAC,GACV;AACvB,UAAM,UAAU,MAAM,KAAK,oBAAoB,OAAO,MAAM,OAAO;AAGnE,UAAM,kBAAkB,MAAM,QAAQ;AAAA,MACpC,QAAQ,IAAI,OAAO,WAAW;AAC5B,YAAI;AACF,gBAAM,iBAAiB,MAAM,KAAK,QAAQ,KAAK,MAAM,UAAU;AAAA,YAC7D;AAAA,YACA;AAAA,YACA,KAAK,OAAO;AAAA,UACd,CAAC;AAED,iBAAO;AAAA,YACL,GAAG;AAAA,YACH,OAAO,eAAe,KAAK,SAAS,CAAC;AAAA,UACvC;AAAA,QACF,SAAS,OAAO;AAEd,kBAAQ;AAAA,YACN,oCAAoC,OAAO,GAAG;AAAA,YAC9C;AAAA,UACF;AACA,iBAAO;AAAA,QACT;AAAA,MACF,CAAC;AAAA,IACH;AAEA,WAAO;AAAA,EACT;AAAA,EACA,MAAM,iBACJ,OACA,MACA,UAAgC,CAAC,GAChB;AACjB,UAAM,UAAU,MAAM,KAAK,oBAAoB,OAAO,MAAM,OAAO;AAEnE,QAAI,SAAS;AAAA,yBAA4B,KAAK,IAAI,IAAI;AAAA;AAAA;AAEtD,eAAW,UAAU,SAAS;AAC5B,gBAAU,aAAM,OAAO,OAAO,QAAQ,MAAM,IAAI,EAAE,CAAC,CAAC;AAAA;AACpD,gBAAU,WAAW,OAAO,IAAI,UAAU,GAAG,CAAC,CAAC;AAAA;AAC/C,gBAAU,cAAc,OAAO,OAAO,OAAO,IAAI,KAAK,OAAO,OAAO,OAAO,KAAK;AAAA;AAChF,gBAAU,YAAY,IAAI,KAAK,OAAO,OAAO,OAAO,IAAI,EAAE,mBAAmB,CAAC,IAAI,IAAI,KAAK,OAAO,OAAO,OAAO,IAAI,EAAE,mBAAmB,CAAC;AAAA;AAAA;AAAA,IAC5I;AAEA,WAAO;AAAA,EACT;AAAA,EAEA,MAAM,0BACJ,OACA,MACA,UAAgC,CAAC,GAChB;AACjB,UAAM,kBAAkB,MAAM,KAAK,6BAA6B,OAAO,MAAM,OAAO;AAEpF,QAAI,SAAS;AAAA,oCAAuC,KAAK,IAAI,IAAI;AAAA;AAAA;AAEjE,eAAW,UAAU,iBAAiB;AACpC,gBAAU,qBAAc,OAAO,OAAO,QAAQ,MAAM,IAAI,EAAE,CAAC,CAAC;AAAA;AAC5D,gBAAU,WAAW,OAAO,IAAI,UAAU,GAAG,CAAC,CAAC;AAAA;AAC/C,gBAAU,cAAc,OAAO,OAAO,OAAO,IAAI,KAAK,OAAO,OAAO,OAAO,KAAK;AAAA;AAChF,gBAAU,YAAY,IAAI,KAAK,OAAO,OAAO,OAAO,IAAI,EAAE,mBAAmB,CAAC,IAAI,IAAI,KAAK,OAAO,OAAO,OAAO,IAAI,EAAE,mBAAmB,CAAC;AAAA;AAE1I,UAAI,OAAO,SAAS,OAAO,MAAM,SAAS,GAAG;AAC3C,kBAAU;AAAA,8BAA0B,OAAO,MAAM,MAAM;AAAA;AACvD,eAAO,MAAM,QAAQ,CAAC,MAAM,QAAQ;AAClC,gBAAM,cAAc;AAAA,YAClB,OAAO;AAAA,YACP,UAAU;AAAA,YACV,SAAS;AAAA,YACT,SAAS;AAAA,YACT,QAAQ;AAAA,YACR,SAAS;AAAA,YACT,WAAW;AAAA,UACb,EAAE,KAAK,MAAM,KAAK;AAElB,oBAAU,QAAQ,MAAM,CAAC,KAAK,WAAW,IAAI,KAAK,QAAQ,MAAM,KAAK,SAAS,KAAK,KAAK,SAAS;AAAA;AAAA,QACnG,CAAC;AAAA,MACH;AAEA,gBAAU,OAAO,IAAI,OAAO,EAAE,IAAI;AAAA,IACpC;AAEA,WAAO;AAAA,EACT;AAAA,EAEA,MAAM,sBACJ,OACA,MACA,aACA,OACiB;AACjB,UAAM,UAAU,MAAM,KAAK,6BAA6B,OAAO,MAAM;AAAA,MACnE,QAAQ;AAAA,MACR,OAAO,SAAS;AAAA,IAClB,CAAC;AAGD,QAAI,SAAS;AAAA,8BAAiC,WAAW,OAAO,KAAK,IAAI,IAAI;AAAA;AAAA;AAE7E,eAAW,UAAU,SAAS;AAC5B,gBAAU,qBAAc,OAAO,OAAO,QAAQ,MAAM,IAAI,EAAE,CAAC,CAAC;AAAA;AAC5D,gBAAU,WAAW,OAAO,IAAI,UAAU,GAAG,CAAC,CAAC;AAAA;AAC/C,gBAAU,cAAc,OAAO,OAAO,OAAO,IAAI,KAAK,OAAO,OAAO,OAAO,KAAK;AAAA;AAChF,gBAAU,YAAY,IAAI,KAAK,OAAO,OAAO,OAAO,IAAI,EAAE,mBAAmB,CAAC,IAAI,IAAI,KAAK,OAAO,OAAO,OAAO,IAAI,EAAE,mBAAmB,CAAC;AAAA;AAE1I,UAAI,OAAO,OAAO,QAAQ,SAAS,IAAI,GAAG;AACxC,cAAM,cAAc,OAAO,OAAO,QAAQ,MAAM,IAAI,EAAE,MAAM,CAAC,EAAE,KAAK,IAAI,EAAE,KAAK;AAC/E,YAAI,aAAa;AACf,oBAAU,oBAAoB,YAAY,UAAU,GAAG,GAAG,CAAC,GAAG,YAAY,SAAS,MAAM,QAAQ,EAAE;AAAA;AAAA,QACrG;AAAA,MACF;AAGA,UAAI,OAAO,SAAS,OAAO,MAAM,SAAS,GAAG;AAC3C,kBAAU;AAAA,8BAA0B,OAAO,MAAM,MAAM;AAAA;AACvD,eAAO,MAAM,QAAQ,CAAC,MAAM,QAAQ;AAClC,gBAAM,cAAc;AAAA,YAClB,OAAO;AAAA,YACP,UAAU;AAAA,YACV,SAAS;AAAA,YACT,SAAS;AAAA,YACT,QAAQ;AAAA,YACR,SAAS;AAAA,YACT,WAAW;AAAA,UACb,EAAE,KAAK,MAAM,KAAK;AAElB,oBAAU,QAAQ,MAAM,CAAC,KAAK,WAAW,IAAI,KAAK,QAAQ,MAAM,KAAK,SAAS,KAAK,KAAK,SAAS;AAAA;AAAA,QACnG,CAAC;AAAA,MACH;AAEA,gBAAU,OAAO,IAAI,OAAO,EAAE,IAAI;AAAA,IACpC;AAEA,WAAO;AAAA,EACT;AAAA,EAEA,MAAM,oBACJ,OACA,MACA,aACA,OAC4B;AAE5B,UAAM,UAAU,MAAM,KAAK,6BAA6B,OAAO,MAAM;AAAA,MACnE,QAAQ;AAAA,MACR,OAAO,SAAS;AAAA;AAAA,IAClB,CAAC;AAGD,UAAM,UAAU,oBAAI,IAAqD;AAEzE,YAAQ,QAAQ,CAAC,WAAW;AAC1B,UAAI,OAAO,OAAO;AAChB,eAAO,MAAM,QAAQ,CAAC,SAAS;AAC7B,gBAAM,WAAW,QAAQ,IAAI,KAAK,QAAQ;AAC1C,cAAI,CAAC,YAAY,OAAO,OAAO,OAAO,OAAO,SAAS,cAAc;AAClE,oBAAQ,IAAI,KAAK,UAAU;AAAA,cACzB,QAAQ,UAAU,SAAS,KAAK;AAAA,cAChC,cAAc,OAAO,OAAO,OAAO;AAAA,YACrC,CAAC;AAAA,UACH;AAAA,QACF,CAAC;AAAA,MACH;AAAA,IACF,CAAC;AAGD,UAAM,QAA2B,MAAM,KAAK,QAAQ,QAAQ,CAAC,EAC1D,IAAI,CAAC,CAAC,UAAU,IAAI,OAAO;AAAA,MAC1B;AAAA,MACA,eAAe,KAAK;AAAA,MACpB,cAAc,KAAK;AAAA,IACrB,EAAE,EACD,KAAK,CAAC,GAAG,MAAM,EAAE,gBAAgB,EAAE,aAAa;AAEnD,WAAO,QAAQ,MAAM,MAAM,GAAG,KAAK,IAAI;AAAA,EACzC;AACF;;;AC5NO,IAAM,sBAAN,cAAkC,aAAa;AAAA,EACpD,MAAM,aACJ,OACA,MACA,UAA4B,CAAC,GACD;AAC5B,UAAM;AAAA,MACJ,OAAO,QAAQ,SAAS,OACpB,OACA,QAAQ,QAAQ,KAAK,OAAO;AAAA,MAChC,QAAQ,KAAK,OAAO;AAAA,MACpB,QAAQ;AAAA,MACR;AAAA,IACF,IAAI;AAEJ,UAAM,MAAM,MAAM,KAAK;AAAA,MACrB,CAAC,WACC,KAAK,QAAQ,KAAK,MAAM,KAAK;AAAA,QAC3B;AAAA,QACA;AAAA,QACA;AAAA,QACA,MAAM;AAAA,QACN,WAAW;AAAA,QACX,GAAI,UAAU,EAAE,SAAS,OAAO;AAAA;AAAA,QAChC,GAAG;AAAA,MACL,CAAC;AAAA,MACH;AAAA,IACF;AAGA,QAAI,cAAc;AAElB,QAAI,SAAS,QAAQ,SAAS,QAAW;AACvC,YAAM,aAAa,IAAI,KAAK,KAAK,IAAI,IAAI,OAAO,KAAK,KAAK,KAAK,GAAI;AACnE,oBAAc,YAAY;AAAA,QACxB,CAAC,OAAO,IAAI,KAAK,GAAG,UAAU,IAAI;AAAA,MACpC;AAAA,IACF;AAIA,WAAO;AAAA,EACT;AAAA,EAEA,MAAM,kBACJ,OACA,MACA,aACA,OACiB;AACjB,UAAM,MAAM,MAAM,KAAK,aAAa,OAAO,MAAM;AAAA,MAC/C,QAAQ;AAAA,MACR,OAAO,SAAS;AAAA,MAChB,MAAM;AAAA;AAAA,IACR,CAAC;AAGD,UAAM,cAAc,MAAM,QAAQ;AAAA,MAChC,IAAI,IAAI,OAAO,OAAO;AACpB,YAAI;AACF,gBAAM,CAAC,kBAAkB,iBAAiB,eAAe,IACvD,MAAM,QAAQ,IAAI;AAAA;AAAA,YAEhB,KAAK,QAAQ,KAAK,OAAO,aAAa;AAAA,cACpC;AAAA,cACA;AAAA,cACA,cAAc,GAAG;AAAA,YACnB,CAAC;AAAA;AAAA,YAED,KAAK,QAAQ,KAAK,MAAM,YAAY;AAAA,cAClC;AAAA,cACA;AAAA,cACA,aAAa,GAAG;AAAA,YAClB,CAAC;AAAA;AAAA,YAED,KAAK,QAAQ,KAAK,MAAM,YAAY;AAAA,cAClC;AAAA,cACA;AAAA,cACA,aAAa,GAAG;AAAA,YAClB,CAAC;AAAA,UACH,CAAC;AAEH,iBAAO;AAAA,YACL,GAAG;AAAA,YACH,UAAU,iBAAiB,KAAK;AAAA,cAC9B,CAAC,YAAY,CAAC,QAAQ,MAAM,MAAM,SAAS,OAAO;AAAA,YACpD;AAAA,YACA,SAAS,gBAAgB,KAAK;AAAA,cAC5B,CAAC,WAAW,CAAC,OAAO,MAAM,MAAM,SAAS,OAAO;AAAA,YAClD;AAAA,YACA,SAAS,gBAAgB;AAAA,UAC3B;AAAA,QACF,SAAS,OAAO;AACd,kBAAQ,KAAK,mCAAmC,GAAG,MAAM,KAAK,KAAK;AACnE,iBAAO;AAAA,YACL,GAAG;AAAA,YACH,UAAU,CAAC;AAAA,YACX,SAAS,CAAC;AAAA,YACV,SAAS,CAAC;AAAA,UACZ;AAAA,QACF;AAAA,MACF,CAAC;AAAA,IACH;AAEA,UAAM,WAAW,QAAQ,YAAY,MAAM,GAAG,KAAK,IAAI;AAGvD,QAAI,SAAS;AAAA,0BAA6B,WAAW,OAAO,KAAK,IAAI,IAAI;AAAA;AAAA;AAEzE,eAAW,MAAM,UAAU;AACzB,gBAAU,iBAAU,GAAG,MAAM,KAAK,GAAG,KAAK;AAAA;AAC1C,gBAAU,cAAc,GAAG,KAAK,GAAG,WAAM,GAAG,KAAK,GAAG;AAAA;AACpD,gBAAU,aAAa,GAAG,KAAK,GAAG,GAAG,YAAY,cAAc,EAAE;AAAA;AACjE,gBAAU,eAAe,IAAI,KAAK,GAAG,UAAU,EAAE,mBAAmB,CAAC;AAAA;AAErE,UAAI,GAAG,MAAM;AACX,kBAAU,mBAAmB,GAAG,KAAK,UAAU,GAAG,GAAG,CAAC,GAAG,GAAG,KAAK,SAAS,MAAM,QAAQ,EAAE;AAAA;AAAA,MAC5F;AAGA,UAAI,GAAG,YAAY,GAAG,SAAS,SAAS,GAAG;AACzC,kBAAU;AAAA,yBAAqB,GAAG,SAAS,MAAM;AAAA;AACjD,WAAG,SAAS,QAAQ,CAAC,SAAc,QAAgB;AACjD,oBAAU,QAAQ,MAAM,CAAC,KAAK,QAAQ,KAAK,KAAK,KAAK,QAAQ,KAAK,UAAU,GAAG,GAAG,CAAC,GAAG,QAAQ,KAAK,SAAS,MAAM,QAAQ,EAAE;AAAA;AAAA,QAC9H,CAAC;AAAA,MACH;AAGA,UAAI,GAAG,WAAW,GAAG,QAAQ,SAAS,GAAG;AACvC,kBAAU;AAAA,wBAAoB,GAAG,QAAQ,MAAM;AAAA;AAC/C,WAAG,QAAQ,QAAQ,CAAC,QAAa,QAAgB;AAC/C,oBAAU,QAAQ,MAAM,CAAC,KAAK,OAAO,KAAK,KAAK,KAAK,OAAO,KAAK;AAAA;AAChE,cAAI,OAAO,MAAM;AACf,sBAAU,WAAW,OAAO,KAAK,UAAU,GAAG,GAAG,CAAC,GAAG,OAAO,KAAK,SAAS,MAAM,QAAQ,EAAE;AAAA;AAAA,UAC5F;AAAA,QACF,CAAC;AAAA,MACH;AAGA,UAAI,GAAG,WAAW,GAAG,QAAQ,SAAS,GAAG;AACvC,kBAAU;AAAA,wBAAoB,GAAG,QAAQ,MAAM;AAAA;AAC/C,WAAG,QAAQ,QAAQ,CAAC,QAAa,QAAgB;AAC/C,oBAAU,QAAQ,MAAM,CAAC,KAAK,OAAO,OAAO,QAAQ,MAAM,IAAI,EAAE,CAAC,CAAC,KAAK,OAAO,OAAO,OAAO,IAAI;AAAA;AAAA,QAClG,CAAC;AAAA,MACH;AAEA,gBAAU,OAAO,IAAI,OAAO,EAAE,IAAI;AAAA,IACpC;AAEA,WAAO;AAAA,EACT;AAAA,EAEA,MAAM,sBACJ,OACA,MACA,UACA,OAC4B;AAE5B,UAAM,MAAM,MAAM,KAAK,aAAa,OAAO,MAAM;AAAA,MAC/C,OAAO,QAAQ,QAAQ,IAAI;AAAA,IAC7B,CAAC;AAGD,UAAM,cAAiC,CAAC;AAExC,eAAW,MAAM,KAAK;AACpB,UAAI;AACF,cAAM,kBAAkB,MAAM,KAAK,QAAQ,KAAK,MAAM,YAAY;AAAA,UAChE;AAAA,UACA;AAAA,UACA,aAAa,GAAG;AAAA,QAClB,CAAC;AAED,cAAM,kBAAkB,gBAAgB,KAAK;AAAA,UAC3C,CAAC,WACC,OAAO,MAAM,MAAM,YAAY,MAAM,SAAS,YAAY,KAC1D,CAAC,OAAO,MAAM,MAAM,SAAS,OAAO;AAAA,QACxC;AAEA,YAAI,iBAAiB;AAEnB,gBAAM,CAAC,kBAAkB,eAAe,IAAI,MAAM,QAAQ,IAAI;AAAA,YAC5D,KAAK,QAAQ,KAAK,OAAO,aAAa;AAAA,cACpC;AAAA,cACA;AAAA,cACA,cAAc,GAAG;AAAA,YACnB,CAAC;AAAA,YACD,KAAK,QAAQ,KAAK,MAAM,YAAY;AAAA,cAClC;AAAA,cACA;AAAA,cACA,aAAa,GAAG;AAAA,YAClB,CAAC;AAAA,UACH,CAAC;AAED,sBAAY,KAAK;AAAA,YACf,GAAG;AAAA,YACH,UAAU,iBAAiB,KAAK;AAAA,cAC9B,CAAC,YAAY,CAAC,QAAQ,MAAM,MAAM,SAAS,OAAO;AAAA,YACpD;AAAA,YACA,SAAS,gBAAgB,KAAK;AAAA,cAC5B,CAAC,WAAW,CAAC,OAAO,MAAM,MAAM,SAAS,OAAO;AAAA,YAClD;AAAA,YACA,SAAS,gBAAgB;AAAA,UAC3B,CAAC;AAED,cAAI,SAAS,YAAY,UAAU,MAAO;AAAA,QAC5C;AAAA,MACF,SAAS,OAAO;AACd,gBAAQ,KAAK,mCAAmC,GAAG,MAAM,KAAK,KAAK;AAAA,MACrE;AAAA,IACF;AAEA,WAAO;AAAA,EACT;AAAA,EAEA,MAAM,aACJ,OACA,MACA,UACoD;AACpD,UAAM,CAAC,YAAY,eAAe,IAAI,MAAM,QAAQ,IAAI;AAAA,MACtD,KAAK,QAAQ,KAAK,MAAM,IAAI;AAAA,QAC1B;AAAA,QACA;AAAA,QACA,aAAa;AAAA,MACf,CAAC;AAAA,MACD,KAAK,QAAQ,KAAK,MAAM,YAAY;AAAA,QAClC;AAAA,QACA;AAAA,QACA,aAAa;AAAA,MACf,CAAC;AAAA,IACH,CAAC;AAED,WAAO;AAAA,MACL,GAAG,WAAW;AAAA,MACd,SAAS,gBAAgB;AAAA,IAC3B;AAAA,EACF;AAAA,EAEA,MAAM,iBACJ,OACA,MACA,MACqB;AACrB,UAAM,aAAa,QAAQ,KAAK,OAAO,eAAe;AAGtD,UAAM,MAAM,MAAM,KAAK,aAAa,OAAO,MAAM;AAAA,MAC/C,MAAM;AAAA,MACN,OAAO;AAAA,MACP,OAAO;AAAA,IACT,CAAC;AAGD,UAAM,aAAyB,CAAC;AAEhC,UAAM,QAAQ;AAAA,MACZ,IAAI,IAAI,OAAO,OAAO;AACpB,YAAI;AACF,gBAAM,UAAU,MAAM,KAAK,QAAQ,KAAK,MAAM,YAAY;AAAA,YACxD;AAAA,YACA;AAAA,YACA,aAAa,GAAG;AAAA,UAClB,CAAC;AAED,gBAAM,aAAa,IAAI;AAAA,YACrB,KAAK,IAAI,IAAI,aAAa,KAAK,KAAK,KAAK;AAAA,UAC3C;AACA,gBAAM,gBAAgB,QAAQ,KAAK;AAAA,YACjC,CAAC,WACC,OAAO,gBAAgB,IAAI,KAAK,OAAO,YAAY,IAAI;AAAA,UAC3D;AAEA,qBAAW,KAAK,GAAI,aAA4B;AAAA,QAClD,SAAS,OAAO;AACd,kBAAQ,KAAK,mCAAmC,GAAG,MAAM,KAAK,KAAK;AAAA,QACrE;AAAA,MACF,CAAC;AAAA,IACH;AAEA,WAAO,WAAW,KAAK,CAAC,GAAG,MAAM;AAC/B,YAAM,QAAQ,EAAE,eAAe,IAAI,KAAK,EAAE,YAAY,EAAE,QAAQ,IAAI;AACpE,YAAM,QAAQ,EAAE,eAAe,IAAI,KAAK,EAAE,YAAY,EAAE,QAAQ,IAAI;AACpE,aAAO,QAAQ;AAAA,IACjB,CAAC;AAAA,EACH;AACF;;;AC5RO,IAAM,qBAAN,cAAiC,aAAa;AAAA,EACnD,MAAM,YAAY,OAAe,MAA4B;AAC3D,QAAI;AACF,YAAM,WAAW,MAAM,KAAK,QAAQ,KAAK,MAAM,IAAI,EAAE,OAAO,KAAK,CAAC;AAClE,aAAO,SAAS;AAAA,IAClB,SAAS,OAAY;AACnB,cAAQ,MAAM,gDAAyC,KAAK,IAAI,IAAI,KAAK,MAAM,OAAO;AACtF,YAAM;AAAA,IACR;AAAA,EACF;AAAA,EAEA,MAAM,YACJ,OACA,MACA,OACuB;AACvB,UAAM,WAAW,MAAM,KAAK;AAAA,MAC1B,CAAC,WAAgB,KAAK,QAAQ,KAAK,MAAM,aAAa;AAAA,QACpD;AAAA,QACA;AAAA,QACA,GAAG;AAAA,MACL,CAAC;AAAA,MACD;AAAA,IACF;AAEA,WAAO;AAAA,EACT;AAAA,EAEA,MAAM,gBACJ,OACA,MACA,OACgB;AAChB,UAAM,eAAe,MAAM,KAAK;AAAA,MAC9B,CAAC,WAAgB,KAAK,QAAQ,KAAK,MAAM,iBAAiB;AAAA,QACxD;AAAA,QACA;AAAA,QACA,GAAG;AAAA,MACL,CAAC;AAAA,MACD,SAAS;AAAA,IACX;AAEA,WAAO;AAAA,EACT;AAAA,EAEA,MAAM,aAAa,OAAe,MAAkC;AAClE,QAAI;AAEF,YAAM,eAAe,MAAM,KAAK,QAAQ,KAAK,MAAM,IAAI;AAAA,QACrD;AAAA,QACA;AAAA,MACF,CAAC;AAED,YAAM,WAAW,aAAa;AAG9B,YAAM,cAAc,SAAS;AAG7B,YAAM,uBAAuB,MAAM,KAAK,QAAQ,KAAK,MAAM,iBAAiB;AAAA,QAC1E;AAAA,QACA;AAAA,QACA,UAAU;AAAA;AAAA,MACZ,CAAC;AAGD,YAAM,eAAe,qBAAqB,KAAK;AAAA,QAC7C,CAAC,KAAK,gBAAgB;AACpB,iBAAO,OAAO,YAAY,iBAAiB;AAAA,QAC7C;AAAA,QACA;AAAA,MACF;AAGA,YAAM,cAAc,IAAI,KAAK,SAAS,UAAU;AAChD,YAAM,MAAM,oBAAI,KAAK;AACrB,YAAM,aACJ,KAAK;AAAA,SACD,IAAI,QAAQ,IAAI,YAAY,QAAQ,MACnC,SAAS,KAAK,KAAK,KAAK,OACzB;AAAA,MACJ,IAAI;AAEN,YAAM,QAAmB;AAAA,QACvB,OAAO,SAAS;AAAA,QAChB;AAAA,QACA;AAAA,QACA;AAAA,MACF;AAEA,aAAO;AAAA,IACT,SAAS,OAAY;AACnB,cAAQ,MAAM,sCAA+B,KAAK,IAAI,IAAI,KAAK,MAAM,OAAO;AAC5E,YAAM;AAAA,IACR;AAAA,EACF;AACF;;;AChGO,IAAM,eAAN,cAA2B,aAAa;AAAA,EAC7C,MAAM,YAAY,OAAe,MAAmC;AAElE,UAAM,iBAAiB;AAAA;AAAA,MAErB,EAAE,MAAM,gBAAgB,MAAM,UAAmB;AAAA,MACjD,EAAE,MAAM,cAAc,MAAM,UAAmB;AAAA,MAC/C,EAAE,MAAM,UAAU,MAAM,UAAmB;AAAA,MAC3C,EAAE,MAAM,YAAY,MAAM,UAAmB;AAAA,MAC7C,EAAE,MAAM,oBAAoB,MAAM,UAAmB;AAAA,MACrD,EAAE,MAAM,kBAAkB,MAAM,UAAmB;AAAA,MACnD,EAAE,MAAM,WAAW,MAAM,UAAmB;AAAA,MAC5C,EAAE,MAAM,gBAAgB,MAAM,UAAmB;AAAA,MACjD,EAAE,MAAM,oBAAoB,MAAM,UAAmB;AAAA,MACrD,EAAE,MAAM,iBAAiB,MAAM,UAAmB;AAAA,MAClD,EAAE,MAAM,WAAW,MAAM,UAAmB;AAAA,MAC5C,EAAE,MAAM,gBAAgB,MAAM,UAAmB;AAAA;AAAA,MAGjD,EAAE,MAAM,aAAa,MAAM,OAAgB;AAAA,MAC3C,EAAE,MAAM,aAAa,MAAM,OAAgB;AAAA,MAC3C,EAAE,MAAM,cAAc,MAAM,OAAgB;AAAA,MAC5C,EAAE,MAAM,cAAc,MAAM,OAAgB;AAAA,MAC5C,EAAE,MAAM,mBAAmB,MAAM,OAAgB;AAAA,MACjD,EAAE,MAAM,mBAAmB,MAAM,OAAgB;AAAA,MACjD,EAAE,MAAM,cAAc,MAAM,OAAgB;AAAA,MAC5C,EAAE,MAAM,UAAU,MAAM,OAAgB;AAAA,MACxC,EAAE,MAAM,aAAa,MAAM,OAAgB;AAAA,MAC3C,EAAE,MAAM,aAAa,MAAM,OAAgB;AAAA;AAAA,MAG3C,EAAE,MAAM,gBAAgB,MAAM,SAAkB;AAAA;AAAA,MAGhD,EAAE,MAAM,wBAAwB,MAAM,OAAgB;AAAA,MACtD,EAAE,MAAM,iBAAiB,MAAM,OAAgB;AAAA,MAC/C,EAAE,MAAM,cAAc,MAAM,OAAgB;AAAA,MAC5C,EAAE,MAAM,kBAAkB,MAAM,OAAgB;AAAA,MAChD,EAAE,MAAM,aAAa,MAAM,OAAgB;AAAA;AAAA,MAG3C,EAAE,MAAM,cAAc,MAAM,QAAiB;AAAA,MAC7C,EAAE,MAAM,sBAAsB,MAAM,QAAiB;AAAA,MACrD,EAAE,MAAM,uBAAuB,MAAM,QAAiB;AAAA,MACtD,EAAE,MAAM,YAAY,MAAM,QAAiB;AAAA,MAC3C,EAAE,MAAM,YAAY,MAAM,QAAiB;AAAA,MAC3C,EAAE,MAAM,kBAAkB,MAAM,QAAiB;AAAA;AAAA,MAGjD,EAAE,MAAM,WAAW,MAAM,QAAiB;AAAA,MAC1C,EAAE,MAAM,cAAc,MAAM,QAAiB;AAAA,MAC7C,EAAE,MAAM,eAAe,MAAM,QAAiB;AAAA,MAC9C,EAAE,MAAM,cAAc,MAAM,QAAiB;AAAA,MAC7C,EAAE,MAAM,sBAAsB,MAAM,QAAiB;AAAA,IACvD;AAEA,UAAM,aAAyB,CAAC;AAGhC,UAAM,oBAAoB,eAAe,IAAI,OAAO,cAAc;AAChE,UAAI;AACF,cAAM,KAAK,QAAQ,KAAK,MAAM,WAAW;AAAA,UACvC;AAAA,UACA;AAAA,UACA,MAAM,UAAU;AAAA,QAClB,CAAC;AAED,eAAO;AAAA,UACL,MAAM,UAAU;AAAA,UAChB,MAAM,UAAU;AAAA,UAChB,MAAM,UAAU;AAAA,QAClB;AAAA,MACF,SAAS,OAAY;AAEnB,YAAI,MAAM,WAAW,KAAK;AACxB,kBAAQ,KAAK,+BAAqB,UAAU,IAAI,KAAK,MAAM,OAAO;AAAA,QACpE;AACA,eAAO;AAAA,MACT;AAAA,IACF,CAAC;AAGD,UAAM,UAAU,MAAM,QAAQ,IAAI,iBAAiB;AACnD,eAAW,KAAK,GAAG,QAAQ,OAAO,CAAC,SAAS,SAAS,IAAI,CAAC;AAE1D,WAAO;AAAA,EACT;AAAA,EAEA,MAAM,eACJ,OACA,MACAA,OAC6B;AAC7B,QAAI;AACF,YAAM,WAAW,MAAM,KAAK,QAAQ,KAAK,MAAM,WAAW;AAAA,QACxD;AAAA,QACA;AAAA,QACA,MAAAA;AAAA,MACF,CAAC;AAGD,UAAI,MAAM,QAAQ,SAAS,IAAI,GAAG;AAChC,gBAAQ,KAAK,qBAAWA,KAAI,6BAA6B;AACzD,eAAO;AAAA,MACT;AAEA,YAAM,WAAW,SAAS;AAG1B,UAAI,SAAS,SAAS,QAAQ;AAC5B,gBAAQ,KAAK,qBAAWA,KAAI,yBAAyB,SAAS,IAAI,GAAG;AACrE,eAAO;AAAA,MACT;AAGA,UAAI,UAAU;AACd,UAAI,SAAS,aAAa,YAAY,SAAS,SAAS;AACtD,kBAAU,OAAO,KAAK,SAAS,SAAS,QAAQ,EAAE,SAAS,OAAO;AAAA,MACpE,WAAW,SAAS,SAAS;AAC3B,kBAAU,SAAS;AAAA,MACrB;AAEA,YAAM,cAA2B;AAAA,QAC/B,MAAM,SAAS;AAAA,QACf,MAAM,SAAS;AAAA,QACf;AAAA,QACA,UAAU,SAAS,YAAY;AAAA,QAC/B,MAAM,SAAS,QAAQ;AAAA,MACzB;AAEA,aAAO;AAAA,IACT,SAAS,OAAY;AACnB,UAAI,MAAM,WAAW,KAAK;AACxB,gBAAQ,IAAI,0BAAqBA,KAAI,EAAE;AACvC,eAAO;AAAA,MACT;AAEA,cAAQ;AAAA,QACN,6CAAsCA,KAAI;AAAA,QAC1C,MAAM;AAAA,MACR;AACA,aAAO;AAAA,IACT;AAAA,EACF;AACF;;;ACpJO,IAAM,eAAN,cAA2B,aAAa;AAAA,EAC7C,MAAM,YAAY,OAAe,MAAsC;AACrE,QAAI;AAEF,YAAM,eAAe,MAAM,KAAK,QAAQ,KAAK,MAAM,WAAW;AAAA,QAC5D;AAAA,QACA;AAAA,QACA,MAAM;AAAA,MACR,CAAC;AAED,UAAI,CAAC,MAAM,QAAQ,aAAa,IAAI,GAAG;AACrC,eAAO;AAAA,MACT;AAGA,YAAM,YAAY,aAAa,KAAK,OAAO,CAAC,SAAc;AACxD,cAAM,OAAO,KAAK,KAAK,YAAY;AACnC,eACE,KAAK,SAAS,SAAS,KACvB,KAAK,SAAS,MAAM,KACpB,KAAK,SAAS,MAAM,KACnB,KAAK,WAAW,aAAa,KAAK,KAAK,SAAS,MAAM;AAAA,MAE3D,CAAC;AAGD,YAAM,UAAU,CAAC,UAAU,UAAU,UAAU,UAAU,KAAK;AAC9D,iBAAW,UAAU,SAAS;AAC5B,cAAM,eAAe,aAAa,KAAK;AAAA,UACrC,CAAC,SAAc,KAAK,SAAS,UAAU,KAAK,SAAS;AAAA,QACvD;AAEA,YAAI,cAAc;AAChB,cAAI;AACF,kBAAM,iBAAiB,MAAM,KAAK,QAAQ,KAAK,MAAM,WAAW;AAAA,cAC9D;AAAA,cACA;AAAA,cACA,MAAM;AAAA,YACR,CAAC;AAED,gBAAI,MAAM,QAAQ,eAAe,IAAI,GAAG;AACtC,oBAAM,cAAc,eAAe,KAAK,OAAO,CAAC,SAAc;AAC5D,sBAAM,OAAO,KAAK,KAAK,YAAY;AACnC,uBACE,KAAK,SAAS,SAAS,KACvB,KAAK,SAAS,MAAM,KACpB,KAAK,SAAS,MAAM;AAAA,cAExB,CAAC;AACD,wBAAU;AAAA,gBACR,GAAG,YAAY,IAAI,CAAC,OAAY;AAAA,kBAC9B,GAAG;AAAA,kBACH,MAAM,GAAG,MAAM,IAAI,EAAE,IAAI;AAAA,gBAC3B,EAAE;AAAA,cACJ;AAAA,YACF;AAAA,UACF,SAAS,OAAO;AACd;AAAA,UACF;AAAA,QACF;AAAA,MACF;AAGA,YAAM,cAAc,KAAK,sBAAsB,SAAS;AAGxD,iBAAW,YAAY,aAAa;AAClC,cAAM,WAAW,SAAS,QAAQ,SAAS;AAE3C,YAAI;AACF,gBAAM,eAAe,MAAM,KAAK,QAAQ,KAAK,MAAM,WAAW;AAAA,YAC5D;AAAA,YACA;AAAA,YACA,MAAM;AAAA,UACR,CAAC;AAED,cAAI,aAAa,aAAa,QAAQ,aAAa,KAAK,SAAS;AAC/D,kBAAM,WAAW,yBAAyB,aAAa,KAAK,OAAO;AACnE,mBAAO;AAAA,UACT;AAAA,QACF,SAAS,OAAO;AACd;AAAA,QACF;AAAA,MACF;AAEA,aAAO;AAAA,IACT,SAAS,OAAY;AACnB,cAAQ,MAAM,0CAAmC,KAAK,IAAI,IAAI,KAAK,MAAM,OAAO;AAChF,aAAO;AAAA,IACT;AAAA,EACF;AAAA,EAEQ,sBAAsB,WAAyB;AACrD,WAAO,UAAU,KAAK,CAAC,GAAG,MAAM;AAC9B,YAAM,QAAQ,EAAE,KAAK,YAAY;AACjC,YAAM,QAAQ,EAAE,KAAK,YAAY;AAEjC,YAAM,gBAAgB,CAAC,SAAiB;AACtC,cAAM,QAAQ,KAAK,MAAM,WAAW;AACpC,YAAI,MAAO,QAAO,SAAS,MAAM,CAAC,CAAC;AAEnC,YAAI,KAAK,SAAS,KAAK,EAAG,QAAO;AACjC,YAAI,KAAK,SAAS,KAAK,EAAG,QAAO;AACjC,YAAI,KAAK,SAAS,KAAK,EAAG,QAAO;AACjC,YAAI,KAAK,SAAS,KAAK,EAAG,QAAO;AACjC,YAAI,KAAK,SAAS,aAAa,EAAG,QAAO;AACzC,YAAI,KAAK,SAAS,gBAAgB,EAAG,QAAO;AAC5C,YAAI,SAAS,cAAe,QAAO;AACnC,YAAI,KAAK,SAAS,MAAM,EAAG,QAAO;AAElC,eAAO;AAAA,MACT;AAEA,aAAO,cAAc,KAAK,IAAI,cAAc,KAAK;AAAA,IACnD,CAAC;AAAA,EACH;AACF;;;AC/GO,IAAM,eAAN,cAA2B,aAAa;AAAA,EAO7C,YAAY,SAA6B,CAAC,GAAG;AAC3C,UAAM,MAAM;AAGZ,SAAK,iBAAiB,IAAI,eAAe,MAAM;AAC/C,SAAK,aAAa,IAAI,oBAAoB,MAAM;AAChD,SAAK,eAAe,IAAI,mBAAmB,MAAM;AACjD,SAAK,eAAe,IAAI,aAAa,MAAM;AAC3C,SAAK,eAAe,IAAI,aAAa,MAAM;AAAA,EAC7C;AAAA;AAAA,EAGA,MAAM,oBAAoB,MAAsD;AAC9E,WAAO,KAAK,eAAe,iBAAiB,GAAG,IAAI;AAAA,EACrD;AAAA,EAEA,MAAM,6BAA6B,MAA+D;AAChG,WAAO,KAAK,eAAe,0BAA0B,GAAG,IAAI;AAAA,EAC9D;AAAA,EAEA,MAAM,yBAAyB,MAA2D;AACxF,WAAO,KAAK,eAAe,sBAAsB,GAAG,IAAI;AAAA,EAC1D;AAAA,EAEA,MAAM,uBAAuB,MAAyD;AACpF,WAAO,KAAK,eAAe,oBAAoB,GAAG,IAAI;AAAA,EACxD;AAAA;AAAA,EAGA,MAAM,gBAAgB,MAAuD;AAC3E,WAAO,KAAK,WAAW,aAAa,GAAG,IAAI;AAAA,EAC7C;AAAA,EAEA,MAAM,qBAAqB,MAA4D;AACrF,WAAO,KAAK,WAAW,kBAAkB,GAAG,IAAI;AAAA,EAClD;AAAA,EAEA,MAAM,yBAAyB,MAAgE;AAC7F,WAAO,KAAK,WAAW,sBAAsB,GAAG,IAAI;AAAA,EACtD;AAAA,EAEA,MAAM,gBAAgB,MAAuD;AAC3E,WAAO,KAAK,WAAW,aAAa,GAAG,IAAI;AAAA,EAC7C;AAAA,EAEA,MAAM,oBAAoB,MAA2D;AACnF,WAAO,KAAK,WAAW,iBAAiB,GAAG,IAAI;AAAA,EACjD;AAAA;AAAA,EAGA,MAAM,eAAe,MAAqD;AACxE,WAAO,KAAK,aAAa,YAAY,GAAG,IAAI;AAAA,EAC9C;AAAA,EAEA,MAAM,eAAe,MAAqD;AACxE,WAAO,KAAK,aAAa,YAAY,GAAG,IAAI;AAAA,EAC9C;AAAA,EAEA,MAAM,mBAAmB,MAAyD;AAChF,WAAO,KAAK,aAAa,gBAAgB,GAAG,IAAI;AAAA,EAClD;AAAA,EAEA,MAAM,gBAAgB,MAAsD;AAC1E,WAAO,KAAK,aAAa,aAAa,GAAG,IAAI;AAAA,EAC/C;AAAA;AAAA,EAGA,MAAM,eAAe,MAA+C;AAClE,WAAO,KAAK,aAAa,YAAY,GAAG,IAAI;AAAA,EAC9C;AAAA,EAEA,MAAM,kBAAkB,MAAkD;AACxE,WAAO,KAAK,aAAa,eAAe,GAAG,IAAI;AAAA,EACjD;AAAA;AAAA,EAGA,MAAM,eAAe,MAA+C;AAClE,WAAO,KAAK,aAAa,YAAY,GAAG,IAAI;AAAA,EAC9C;AACF;;;ACzFO,IAAM,uBAAN,cAAmC,aAAa;AAAA,EAGrD,YAAY,OAAY,aAAsB;AAC5C,UAAM,KAAK;AACX,SAAK,WAAW,IAAI,aAAa;AAAA,MAC/B;AAAA,MACA,cAAc;AAAA,IAChB,CAAC;AAAA,EACH;AAAA,EAEA,MAAM,gBAAgB,OAAe,MAAsC;AAEzE,UAAM,SAAS,MAAM,KAAK;AAAA,MACxB;AAAA,MACA;AAAA,MACA;AAAA,IACF;AACA,QAAI,QAAQ;AACV,cAAQ,IAAI,yCAAkC,KAAK,IAAI,IAAI,EAAE;AAC7D,aAAO;AAAA,IACT;AAEA,YAAQ,IAAI,uCAAgC,KAAK,IAAI,IAAI,KAAK;AAE9D,QAAI;AACF,YAAM,eAAe,MAAM,KAAK,SAAS,gBAAgB,OAAO,MAAM,EAAE;AAExE,cAAQ,IAAI,mBAAY,aAAa,MAAM,eAAe;AAG1D,WAAK,UAAU,OAAO,MAAM,gBAAgB,YAAY;AAExD,aAAO;AAAA,IACT,SAAS,OAAY;AACnB,cAAQ;AAAA,QACN,6CAAsC,KAAK,IAAI,IAAI;AAAA,QACnD,MAAM;AAAA,MACR;AAGA,UAAI,MAAM,WAAW,OAAO,MAAM,SAAS,SAAS,YAAY,GAAG;AACjE,gBAAQ,MAAM,gDAAsC;AAAA,MACtD;AAEA,YAAM;AAAA,IACR;AAAA,EACF;AACF;;;ACjDO,IAAM,gBAAN,cAA4B,aAAa;AAAA,EAG9C,YAAY,OAAY,aAAsB;AAC5C,UAAM,KAAK;AACX,SAAK,WAAW,IAAI,aAAa;AAAA,MAC/B;AAAA,IACF,CAAC;AAAA,EACH;AAAA,EAEA,MAAM,YAAY,OAAe,MAAsC;AAErE,UAAM,SAAS,MAAM,KAAK,UAAyB,OAAO,MAAM,MAAM;AACtE,QAAI,WAAW,QAAW;AACxB,cAAQ;AAAA,QACN,2BAAoB,KAAK,IAAI,IAAI;AAAA,QACjC,SAAS,UAAU;AAAA,MACrB;AACA,cAAQ,IAAI,iEAA0D;AACtE,WAAK,MAAM,MAAM;AAAA,IAEnB;AAEA,YAAQ,IAAI,2CAAoC,KAAK,IAAI,IAAI,EAAE;AAE/D,QAAI;AACF,YAAM,WAAW,MAAM,KAAK,SAAS,YAAY,OAAO,IAAI;AAE5D,UAAI,UAAU;AACZ,gBAAQ,IAAI,iCAA4B;AACxC,gBAAQ,IAAI,+BAAwB,SAAS,MAAM,QAAQ;AAG3D,aAAK,UAAU,OAAO,MAAM,QAAQ,QAAQ;AAC5C,eAAO;AAAA,MACT,OAAO;AACL,gBAAQ,IAAI,iCAA4B;AACxC,aAAK,UAAU,OAAO,MAAM,QAAQ,IAAI;AACxC,eAAO;AAAA,MACT;AAAA,IACF,SAAS,OAAY;AACnB,cAAQ,MAAM,0CAAmC,KAAK,IAAI,IAAI,KAAK,KAAK;AAGxE,UAAI,MAAM,WAAW,OAAO,MAAM,SAAS,SAAS,YAAY,GAAG;AACjE,gBAAQ,MAAM,wCAA8B,MAAM,OAAO;AAAA,MAC3D;AAEA,WAAK,UAAU,OAAO,MAAM,QAAQ,IAAI;AACxC,aAAO;AAAA,IACT;AAAA,EACF;AACF;;;ACnDO,IAAM,qBAAN,cAAiC,aAAa;AAAA,EAGnD,YAAY,OAAY,aAAsB;AAC5C,UAAM,KAAK;AACX,SAAK,WAAW,IAAI,aAAa;AAAA,MAC/B;AAAA,IACF,CAAC;AAAA,EACH;AAAA,EAEA,MAAM,YAAY,OAAe,MAAmC;AAElE,UAAM,SAAS,MAAM,KAAK,UAAsB,OAAO,MAAM,MAAM;AACnE,QAAI,QAAQ;AACV,cAAQ,IAAI,sCAA+B,KAAK,IAAI,IAAI,EAAE;AAC1D,aAAO;AAAA,IACT;AAEA,YAAQ,IAAI,0CAAmC,KAAK,IAAI,IAAI,KAAK;AAEjE,QAAI;AACF,YAAM,WAAW,MAAM,KAAK,SAAS,YAAY,OAAO,IAAI;AAE5D,cAAQ,IAAI,qCAA8B,SAAS,SAAS,EAAE;AAG9D,WAAK,UAAU,OAAO,MAAM,QAAQ,QAAQ;AAE5C,aAAO;AAAA,IACT,SAAS,OAAY;AACnB,cAAQ;AAAA,QACN,gDAAyC,KAAK,IAAI,IAAI;AAAA,QACtD,MAAM;AAAA,MACR;AAGA,UAAI,MAAM,WAAW,OAAO,MAAM,SAAS,SAAS,YAAY,GAAG;AACjE,gBAAQ,MAAM,8CAAoC;AAAA,MACpD;AAEA,YAAM;AAAA,IACR;AAAA,EACF;AACF;;;AC3CO,IAAM,kBAAN,cAA8B,aAAa;AAAA,EAGhD,YAAY,OAAY,aAAsB;AAC5C,UAAM,KAAK;AACX,SAAK,WAAW,IAAI,aAAa;AAAA,MAC/B;AAAA,MACA,cAAc;AAAA,IAChB,CAAC;AAAA,EACH;AAAA,EAEA,MAAM,WAAW,OAAe,MAA+B;AAE7D,UAAM,SAAS,MAAM,KAAK,UAAkB,OAAO,MAAM,SAAS;AAClE,QAAI,QAAQ;AACV,cAAQ,IAAI,oCAA6B,KAAK,IAAI,IAAI,EAAE;AACxD,aAAO;AAAA,IACT;AAEA,YAAQ,IAAI,kCAA2B,KAAK,IAAI,IAAI,KAAK;AAEzD,QAAI;AACF,YAAM,UAAU,MAAM,KAAK,SAAS,iBAAiB,OAAO,MAAM;AAAA,QAChE,OAAO;AAAA,MACT,CAAC;AAED,cAAQ,IAAI,wCAAiC;AAG7C,WAAK,UAAU,OAAO,MAAM,WAAW,OAAO;AAE9C,aAAO;AAAA,IACT,SAAS,OAAY;AACnB,cAAQ;AAAA,QACN,wCAAiC,KAAK,IAAI,IAAI;AAAA,QAC9C,MAAM;AAAA,MACR;AAGA,UAAI,MAAM,WAAW,OAAO,MAAM,SAAS,SAAS,YAAY,GAAG;AACjE,gBAAQ,MAAM,2CAAiC;AAAA,MACjD;AAEA,YAAM;AAAA,IACR;AAAA,EACF;AACF;;;AC9CO,IAAM,mBAAN,cAA+B,aAAa;AAAA,EAGjD,YAAY,OAAY,aAAsB;AAC5C,UAAM,KAAK;AACX,SAAK,WAAW,IAAI,aAAa;AAAA,MAC/B;AAAA,IACF,CAAC;AAAA,EACH;AAAA,EAEA,MAAM,YAAY,OAAe,MAAiC;AAEhE,UAAM,SAAS,MAAM,KAAK,UAAoB,OAAO,MAAM,UAAU;AACrE,QAAI,QAAQ;AACV,cAAQ,IAAI,qCAA8B,KAAK,IAAI,IAAI,EAAE;AACzD,aAAO;AAAA,IACT;AAEA,YAAQ,IAAI,mCAA4B,KAAK,IAAI,IAAI,KAAK;AAE1D,QAAI;AACF,YAAM,WAAW,MAAM,KAAK,SAAS,YAAY,OAAO,IAAI;AAE5D,cAAQ,IAAI,mBAAY,SAAS,MAAM,WAAW;AAGlD,WAAK,UAAU,OAAO,MAAM,YAAY,QAAQ;AAEhD,aAAO;AAAA,IACT,SAAS,OAAY;AACnB,cAAQ;AAAA,QACN,yCAAkC,KAAK,IAAI,IAAI;AAAA,QAC/C,MAAM;AAAA,MACR;AAGA,UAAI,MAAM,WAAW,OAAO,MAAM,SAAS,SAAS,YAAY,GAAG;AACjE,gBAAQ,MAAM,4CAAkC;AAAA,MAClD;AAEA,YAAM;AAAA,IACR;AAAA,EACF;AACF;;;AC5CO,IAAM,gBAAN,cAA4B,aAAa;AAAA,EAG9C,YAAY,OAAY,aAAsB;AAC5C,UAAM,KAAK;AACX,SAAK,WAAW,IAAI,aAAa;AAAA,MAC/B;AAAA,IACF,CAAC;AAAA,EACH;AAAA,EAEA,MAAM,YAAY,OAAe,MAAmC;AAElE,UAAM,SAAS,MAAM,KAAK,UAAsB,OAAO,MAAM,OAAO;AACpE,QAAI,QAAQ;AACV,cAAQ,IAAI,mCAA4B;AACxC,aAAO;AAAA,IACT;AAEA,YAAQ,IAAI,oCAA6B,KAAK,IAAI,IAAI,KAAK;AAE3D,UAAM,aAAa,MAAM,KAAK,SAAS,YAAY,OAAO,IAAI;AAE9D,YAAQ,IAAI,mBAAY,WAAW,MAAM,iBAAiB,KAAK,IAAI,IAAI,EAAE;AACzE,eAAW,QAAQ,CAAC,SAAS,QAAQ,IAAI,sBAAiB,KAAK,IAAI,EAAE,CAAC;AAGtE,SAAK,UAAU,OAAO,MAAM,SAAS,UAAU;AAE/C,WAAO;AAAA,EACT;AAAA,EAEA,MAAM,eACJ,OACA,MACAC,OAC6B;AAE7B,UAAM,WAAW,gBAAgBA,KAAI;AACrC,UAAM,SAAS,MAAM,KAAK,UAAuB,OAAO,MAAM,QAAQ;AACtE,QAAI,QAAQ;AACV,cAAQ,IAAI,2CAAoCA,KAAI,EAAE;AACtD,aAAO;AAAA,IACT;AAEA,YAAQ,IAAI,+BAA+B,KAAK,IAAI,IAAI,IAAIA,KAAI,KAAK;AAErE,UAAM,cAAc,MAAM,KAAK,SAAS,eAAe,OAAO,MAAMA,KAAI;AAExE,QAAI,aAAa;AACf,cAAQ;AAAA,QACN,qCAAgCA,KAAI,KAAK,YAAY,IAAI;AAAA,MAC3D;AAGA,WAAK,UAAU,OAAO,MAAM,UAAU,WAAW;AAAA,IACnD;AAEA,WAAO;AAAA,EACT;AACF;;;AC1DO,IAAM,gBAAN,cAA4B,aAAa;AAAA,EAG9C,YAAY,OAAY,aAAsB;AAC5C,UAAM,KAAK;AACX,SAAK,WAAW,IAAI,aAAa;AAAA,MAC/B;AAAA,IACF,CAAC;AAAA,EACH;AAAA,EAEA,MAAM,aAAa,OAAe,MAAkC;AAElE,UAAM,SAAS,MAAM,KAAK,UAAqB,OAAO,MAAM,OAAO;AACnE,QAAI,QAAQ;AACV,cAAQ,IAAI,mCAA4B;AACxC,aAAO;AAAA,IACT;AAEA,YAAQ,IAAI,gCAAyB,KAAK,IAAI,IAAI,KAAK;AAEvD,QAAI;AACF,YAAM,QAAQ,MAAM,KAAK,SAAS,aAAa,OAAO,IAAI;AAE1D,cAAQ,IAAI,uBAAgB,KAAK,IAAI,IAAI,KAAK;AAAA,QAC5C,OAAO,MAAM;AAAA,QACb,aAAa,MAAM;AAAA,QACnB,cAAc,MAAM;AAAA,QACpB,YAAY,MAAM;AAAA,MACpB,CAAC;AAGD,WAAK,UAAU,OAAO,MAAM,SAAS,KAAK;AAE1C,aAAO;AAAA,IACT,SAAS,OAAY;AACnB,cAAQ;AAAA,QACN,sCAA+B,KAAK,IAAI,IAAI;AAAA,QAC5C,MAAM;AAAA,MACR;AAGA,UAAI,MAAM,WAAW,OAAO,MAAM,SAAS,SAAS,YAAY,GAAG;AACjE,gBAAQ,MAAM,yCAA+B;AAAA,MAC/C;AAEA,YAAM;AAAA,IACR;AAAA,EACF;AACF;;;ACpDA,SAAS,aAAa;AACtB,YAAY,QAAQ;AACpB,YAAY,UAAU;AAef,IAAM,aAAN,MAAiB;AAAA;AAAA;AAAA;AAAA,EAQtB,aAAa,kBACX,OACA,MACA,SACe;AACf,UAAM,UAAU,GAAG,KAAK,IAAI,IAAI;AAGhC,QAAI,KAAK,cAAc,IAAI,OAAO,GAAG;AACnC;AAAA,IACF;AAGA,UAAM,eAAe,KAAK,UAAU,OAAO,MAAM,OAAO;AACxD,SAAK,cAAc,IAAI,SAAS,YAAY;AAG5C,iBACG,QAAQ,MAAM;AAEb,iBAAW,MAAM;AACf,aAAK,cAAc,OAAO,OAAO;AAAA,MACnC,GAAG,GAAI;AAAA,IACT,CAAC,EACA,MAAM,CAAC,UAAU;AAChB,cAAQ;AAAA,QACN,yCAAkC,KAAK,IAAI,IAAI;AAAA,QAC/C,MAAM;AAAA,MACR;AAAA,IACF,CAAC;AAAA,EACL;AAAA;AAAA;AAAA;AAAA,EAKA,aAAa,UACX,OACA,MACA,SACsB;AACtB,UAAM,YAAY,KAAK,IAAI;AAC3B,UAAM,WAAgB,UAAK,KAAK,WAAW,OAAO,IAAI;AAGtD,QAAI;AACJ,QAAI,SAAS,YAAY,SAAS,OAAO;AACvC,kBAAY,WAAW,QAAQ,QAAQ,IAAI,QAAQ,KAAK,eAAe,KAAK,IAAI,IAAI;AAAA,IACtF,OAAO;AACL,kBAAY,sBAAsB,KAAK,IAAI,IAAI;AAAA,IACjD;AAEA,YAAQ,IAAI,+BAAwB,KAAK,IAAI,IAAI,OAAO,QAAQ,EAAE;AAElE,QAAI;AAEF,UAAO,cAAW,QAAQ,GAAG;AAC3B,cAAM,SAAY,cAAgB,UAAK,UAAU,MAAM,CAAC;AACxD,cAAM,WAAc,eAAY,QAAQ,EAAE,SAAS;AAEnD,YAAI,UAAU,UAAU;AACtB,kBAAQ;AAAA,YACN,wBAAiB,KAAK,IAAI,IAAI,sBAAsB,QAAQ;AAAA,UAC9D;AACA,iBAAO;AAAA,YACL,SAAS;AAAA,YACT,WAAW;AAAA,YACX,UAAU,KAAK,IAAI,IAAI;AAAA,UACzB;AAAA,QACF,OAAO;AACL,kBAAQ;AAAA,YACN,8BAAkB,KAAK,IAAI,IAAI;AAAA,UACjC;AACA,UAAG,UAAO,UAAU,EAAE,WAAW,MAAM,OAAO,KAAK,CAAC;AAAA,QACtD;AAAA,MACF;AAGA,YAAM,YAAiB,aAAQ,QAAQ;AACvC,MAAG,aAAU,WAAW,EAAE,WAAW,KAAK,CAAC;AAG3C,YAAM,SAAS,MAAM,KAAK;AAAA,QACxB;AAAA,QACA;AAAA,QACA,SAAS;AAAA,MACX;AAEA,YAAM,WAAW,KAAK,IAAI,IAAI;AAE9B,UAAI,OAAO,SAAS;AAClB,gBAAQ,IAAI,8BAAyB,KAAK,IAAI,IAAI,OAAO,QAAQ,IAAI;AACrE,eAAO;AAAA,UACL,SAAS;AAAA,UACT,WAAW;AAAA,UACX;AAAA,QACF;AAAA,MACF,OAAO;AACL,gBAAQ,MAAM,0BAAqB,KAAK,IAAI,IAAI,KAAK,OAAO,KAAK;AACjE,eAAO;AAAA,UACL,SAAS;AAAA,UACT,WAAW;AAAA,UACX,OAAO,OAAO;AAAA,UACd;AAAA,QACF;AAAA,MACF;AAAA,IACF,SAAS,OAAY;AACnB,YAAM,WAAW,KAAK,IAAI,IAAI;AAC9B,cAAQ,MAAM,6BAAsB,KAAK,IAAI,IAAI,KAAK,MAAM,OAAO;AAEnE,aAAO;AAAA,QACL,SAAS;AAAA,QACT,WAAW;AAAA,QACX,OAAO,MAAM;AAAA,QACb;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,OAAe,gBACb,WACA,YACA,QAC+C;AAC/C,WAAO,IAAI,QAAQ,CAAC,YAAY;AAE9B,YAAM,UAAU;AAAA,QACd;AAAA,QACA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,MACF;AAGA,UAAI,QAAQ;AACV,gBAAQ,KAAK,YAAY,MAAM;AAAA,MACjC;AAEA,cAAQ,KAAK,WAAW,UAAU;AAGlC,YAAM,aAAa,MAAM,OAAO,OAAO;AAEvC,UAAI,cAAc;AAElB,iBAAW,OAAO,GAAG,QAAQ,CAAC,SAAS;AACrC,uBAAe,KAAK,SAAS;AAAA,MAC/B,CAAC;AAED,iBAAW,OAAO,GAAG,QAAQ,CAAC,SAAS;AAErC,cAAM,SAAS,KAAK,SAAS;AAC7B,YAAI,OAAO,SAAS,SAAS,KAAK,OAAO,SAAS,WAAW,GAAG;AAC9D,kBAAQ,IAAI,aAAM,OAAO,KAAK,CAAC,EAAE;AAAA,QACnC;AAAA,MACF,CAAC;AAED,iBAAW,GAAG,SAAS,CAAC,SAAS;AAC/B,YAAI,SAAS,GAAG;AACd,kBAAQ,EAAE,SAAS,KAAK,CAAC;AAAA,QAC3B,OAAO;AACL,kBAAQ;AAAA,YACN,SAAS;AAAA,YACT,OAAO,eAAe,8BAA8B,IAAI;AAAA,UAC1D,CAAC;AAAA,QACH;AAAA,MACF,CAAC;AAED,iBAAW,GAAG,SAAS,CAAC,UAAU;AAChC,gBAAQ;AAAA,UACN,SAAS;AAAA,UACT,OAAO,gCAAgC,MAAM,OAAO;AAAA,QACtD,CAAC;AAAA,MACH,CAAC;AAAA,IACH,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA,EAKA,OAAO,aAAa,OAAe,MAAuB;AACxD,UAAM,WAAgB,UAAK,KAAK,WAAW,OAAO,IAAI;AACtD,WACK,cAAW,QAAQ,KAAQ,cAAgB,UAAK,UAAU,MAAM,CAAC;AAAA,EAExE;AAAA;AAAA;AAAA;AAAA,EAKA,OAAO,YAAY,OAAe,MAAsB;AACtD,WAAY,UAAK,KAAK,WAAW,OAAO,IAAI;AAAA,EAC9C;AAAA;AAAA;AAAA;AAAA,EAKA,aAAa,aACX,OACA,MACA,SACsB;AACtB,UAAM,UAAU,GAAG,KAAK,IAAI,IAAI;AAGhC,QAAI,KAAK,aAAa,OAAO,IAAI,GAAG;AAClC,aAAO;AAAA,QACL,SAAS;AAAA,QACT,WAAW,KAAK,YAAY,OAAO,IAAI;AAAA,MACzC;AAAA,IACF;AAGA,UAAM,eAAe,KAAK,cAAc,IAAI,OAAO;AACnD,QAAI,cAAc;AAChB,cAAQ,IAAI,uCAAkC,KAAK,IAAI,IAAI,KAAK;AAChE,aAAO,MAAM;AAAA,IACf;AAGA,YAAQ,IAAI,oCAA6B,KAAK,IAAI,IAAI,KAAK;AAC3D,WAAO,MAAM,KAAK,UAAU,OAAO,MAAM,OAAO;AAAA,EAClD;AAAA;AAAA;AAAA;AAAA,EAKA,aAAa,eACX,OACA,MAC6B;AAC7B,UAAM,UAAU,GAAG,KAAK,IAAI,IAAI;AAGhC,QAAI,KAAK,aAAa,OAAO,IAAI,GAAG;AAClC,aAAO;AAAA,QACL,SAAS;AAAA,QACT,WAAW,KAAK,YAAY,OAAO,IAAI;AAAA,MACzC;AAAA,IACF;AAGA,UAAM,eAAe,KAAK,cAAc,IAAI,OAAO;AACnD,QAAI,cAAc;AAChB,UAAI;AACF,eAAO,MAAM;AAAA,MACf,SAAS,OAAO;AACd,eAAO;AAAA,UACL,SAAS;AAAA,UACT,WAAW,KAAK,YAAY,OAAO,IAAI;AAAA,UACvC,OAAO,iBAAiB,QAAQ,MAAM,UAAU;AAAA,QAClD;AAAA,MACF;AAAA,IACF;AAGA,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAKA,aAAa,gBAAgB,cAAsB,IAAmB;AACpE,QAAI;AACF,UAAI,CAAI,cAAW,KAAK,SAAS,GAAG;AAClC;AAAA,MACF;AAEA,YAAM,aAAa,KAAK,IAAI,IAAI,cAAc,KAAK,KAAK;AAGxD,YAAM,SAAY,eAAY,KAAK,SAAS;AAE5C,iBAAW,SAAS,QAAQ;AAC1B,cAAM,YAAiB,UAAK,KAAK,WAAW,KAAK;AACjD,YAAI,CAAI,YAAS,SAAS,EAAE,YAAY,EAAG;AAE3C,cAAM,QAAW,eAAY,SAAS;AAEtC,mBAAW,QAAQ,OAAO;AACxB,gBAAM,WAAgB,UAAK,WAAW,IAAI;AAC1C,gBAAM,QAAW,YAAS,QAAQ;AAElC,cAAI,MAAM,YAAY,KAAK,MAAM,MAAM,QAAQ,IAAI,YAAY;AAC7D,oBAAQ,IAAI,yCAA6B,KAAK,IAAI,IAAI,EAAE;AACxD,YAAG,UAAO,UAAU,EAAE,WAAW,MAAM,OAAO,KAAK,CAAC;AAAA,UACtD;AAAA,QACF;AAAA,MACF;AAAA,IACF,SAAS,OAAY;AACnB,cAAQ,MAAM,gCAAgC,MAAM,OAAO;AAAA,IAC7D;AAAA,EACF;AACF;AAhTa,WACa,YACtB,QAAQ,IAAI,oBAAoB;AAFvB,WAGI,gBAAmD,oBAAI,IAAI;;;ACpB5E,SAAS,cAAc,MAAM,mBAAiC;AAC9D,SAAS,UAAU,4BAAsC;;;ACDzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAO,IAAM,aAAa;AAEnB,IAAM,WAAW;AAAA;AAAA;AAIjB,IAAM,eAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACN5B;AAAA;AAAA,kBAAAC;AAAA,EAAA,kBAAAC;AAAA,EAAA,oBAAAC;AAAA;AAAO,IAAMD,cAAa;AAEnB,IAAMD,YAAW;AAAA;AAAA;AAIjB,IAAME,gBAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACN5B;AAAA;AAAA,kBAAAC;AAAA,EAAA,kBAAAC;AAAA,EAAA,oBAAAC;AAAA;AAAO,IAAMD,cAAa;AAEnB,IAAMD,YAAW;AAAA;AAAA;AAIjB,IAAME,gBAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AHF5B,IAAM,UAAU;AAAA,EACd,YAAY;AAAA,EACZ,UAAU;AAAA,EACV,cAAc;AAChB;;;ADLA,SAAS,SAAS;;;AKHlB,SAAS,SAAAC,cAAa;AACtB,YAAYC,SAAQ;AACpB,YAAYC,WAAU;AAGtB,SAAS,YACP,SACA,KACA,YAAoB,KACH;AACjB,SAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AAEtC,UAAM,QAAQ,QAAQ,MAAM,GAAG;AAC/B,UAAM,UAAU,MAAM;AAAA,MACpB,CAAC,SAAS,SAAS,QAAQ,KAAK,SAAS,KAAK;AAAA,IAChD;AAQA,UAAM,OAAO,MAAM,MAAM,UAAU,CAAC,EAAE,IAAI,CAAC,QAAQ;AAEjD,UACG,IAAI,WAAW,GAAG,KAAK,IAAI,SAAS,GAAG,KACvC,IAAI,WAAW,GAAG,KAAK,IAAI,SAAS,GAAG,GACxC;AACA,eAAO,IAAI,MAAM,GAAG,EAAE;AAAA,MACxB;AACA,aAAO;AAAA,IACT,CAAC;AACD,SAAK,KAAK,IAAI;AAEd,UAAMC,WAAUH,OAAM,MAAM,MAAM;AAAA,MAChC;AAAA,MACA,OAAO,CAAC,UAAU,QAAQ,MAAM;AAAA,IAClC,CAAC;AAED,QAAI,SAAS;AACb,QAAI,SAAS;AACb,QAAI,WAAW;AAGf,UAAM,UAAU,WAAW,MAAM;AAC/B,UAAI,CAAC,UAAU;AACb,QAAAG,SAAQ,KAAK,SAAS;AACtB,mBAAW;AACX,eAAO,IAAI,MAAM,2BAA2B,SAAS,IAAI,CAAC;AAAA,MAC5D;AAAA,IACF,GAAG,SAAS;AAEZ,IAAAA,SAAQ,OAAO,GAAG,QAAQ,CAAC,SAAS;AAClC,gBAAU,KAAK,SAAS;AAGxB,UAAI,OAAO,SAAS,KAAO;AACzB,QAAAA,SAAQ,KAAK,SAAS;AACtB,YAAI,CAAC,UAAU;AACb,qBAAW;AACX,uBAAa,OAAO;AACpB,gBAAM,YACJ,OAAO,UAAU,GAAG,GAAK,IACzB;AACF,kBAAQ,SAAS;AAAA,QACnB;AACA;AAAA,MACF;AAAA,IACF,CAAC;AAED,IAAAA,SAAQ,OAAO,GAAG,QAAQ,CAAC,SAAS;AAClC,gBAAU,KAAK,SAAS;AAAA,IAC1B,CAAC;AAED,IAAAA,SAAQ,GAAG,SAAS,CAAC,SAAS;AAC5B,UAAI,CAAC,UAAU;AACb,mBAAW;AACX,qBAAa,OAAO;AAEpB,YAAI,SAAS,GAAG;AACd,cAAI,OAAO,SAAS,KAAO;AACzB,kBAAM,YACJ,OAAO,UAAU,GAAG,GAAK,IACzB;AACF,oBAAQ,SAAS;AAAA,UACnB,OAAO;AACL,oBAAQ,MAAM;AAAA,UAChB;AAAA,QACF,WAAW,SAAS,GAAG;AAErB,kBAAQ,kBAAkB;AAAA,QAC5B,OAAO;AACL,iBAAO,IAAI,MAAM,4BAA4B,IAAI,KAAK,MAAM,EAAE,CAAC;AAAA,QACjE;AAAA,MACF;AAAA,IACF,CAAC;AAED,IAAAA,SAAQ,GAAG,SAAS,CAAC,UAAU;AAC7B,UAAI,CAAC,UAAU;AACb,mBAAW;AACX,qBAAa,OAAO;AACpB,eAAO,KAAK;AAAA,MACd;AAAA,IACF,CAAC;AAAA,EACH,CAAC;AACH;AAGA,eAAsB,WAAW,UAAmC;AAClE,MAAI,CAAC,UAAU;AACb,WAAO;AAAA,EACT;AAEA,MAAI,CAAI,eAAW,QAAQ,GAAG;AAC5B,WAAO;AAAA,EACT;AAGA,MAAI;AACF,UAAM,SAAS,MAAM;AAAA,MACnB;AAAA,MACA;AAAA,IACF;AACA,WAAO;AAAA,EACT,SAAS,OAAY;AACnB,WAAO,2BAA2B,MAAM,OAAO;AAAA,EACjD;AACF;AAGO,SAAS,eACd,UACA,UACA,YACQ;AACR,MAAI,CAAC,UAAU;AACb,WAAO;AAAA,EACT;AAEA,QAAM,WAAgB,WAAK,UAAU,QAAQ;AAE7C,MAAI,CAAI,eAAW,QAAQ,GAAG;AAC5B,WAAO;AAAA,EACT;AAEA,MAAI;AACF,UAAM,UAAa,iBAAa,UAAU,OAAO;AACjD,UAAM,QAAQ,QACX,MAAM,IAAI,EACV,MAAM,GAAG,cAAc,EAAE,EACzB,IAAI,CAAC,SAAS;AAEb,aAAO,KAAK,SAAS,MAAM,KAAK,UAAU,GAAG,GAAG,IAAI,QAAQ;AAAA,IAC9D,CAAC;AAEH,WAAO,MAAM,KAAK,IAAI;AAAA,EACxB,SAAS,OAAY;AACnB,WAAO,uBAAuB,MAAM,OAAO;AAAA,EAC7C;AACF;AAGA,eAAsB,eACpB,OACA,UACiB;AACjB,MAAI,CAAC,UAAU;AACb,WAAO;AAAA,EACT;AAEA,MAAI,CAAI,eAAW,QAAQ,GAAG;AAC5B,WAAO;AAAA,EACT;AAEA,MAAI;AACF,UAAM,SAAS,MAAM;AAAA,MACnB,wFAAwF,KAAK;AAAA,MAC7F;AAAA,MACA;AAAA,IACF;AAGA,QAAI,OAAO,SAAS,KAAO;AACzB,aACE,OAAO,UAAU,GAAG,GAAK,IACzB;AAAA,IAEJ;AAEA,WAAO;AAAA,EACT,SAAS,OAAY;AAEnB,QAAI,MAAM,QAAQ,SAAS,QAAQ,GAAG;AACpC,aAAO,yBAAyB,KAAK;AAAA,IACvC;AACA,WAAO,oBAAoB,MAAM,OAAO;AAAA,EAC1C;AACF;;;ALhMA,SAAS,QAAQ,UAAe;AAC9B,MAAI,CAAC,MAAM,QAAQ,QAAQ,EAAG;AAC9B,aAAW,WAAW,UAAU;AAC9B,QAAI,QAAQ,SAAS,eAAe,QAAQ,aAAa,gBAAgB;AACvE,cAAQ,IAAI,cAAc,QAAQ,UAAU,KAAK,QAAQ,KAAK;AAAA,IAChE;AAAA,EACF;AACF;AAcA,SAAS,UAAU,MAAsC;AACvD,QAAM,IAAI,gBAAQ,IAAI;AACtB,SAAO;AAAA,IACL,YAAY,EAAE;AAAA,IACd,QAAQ,EAAE;AAAA,IACV,0BAA0B,EAAE;AAAA,EAC9B;AACF;AAiBA,SAAS,QACP,MACA,0BACA;AACA,MAAI,MAAM,KAAK;AACf,MAAI,0BAA0B;AAC5B,UAAMC,WAAkB,QAAQ;AAChC,UAAMA,WAAU;AAAA;AAAA,IAAS;AAAA,EAC3B;AACA,SAAO;AACT;AAOA,eAAsB,YACpB,QACA,UACA,OAAwB,YACxB,WACiB;AACjB,QAAM,YAAY,KAAK,IAAI;AAC3B,QAAM,OAAO,UAAU,IAAI;AAC3B,QAAM,WAAW,QAAQ,IAAI,gBAAgB;AAC7C,QAAM,SAAS,qBAAqB,QAAQ;AAC5C,QAAM,QAAQ,MAAM,SAAS,UAAsB,MAAgB;AACnE,MAAI,MAAM,QAAQ,MAAM,WAAW,wBAAwB;AAC3D,MAAI,QAAQ,YAAY;AAEtB,UAAM,IAAI;AAAA,MACR;AAAA,MACA,SAAS,MAAM,GAAG,EAAE,IAAI,KAAK;AAAA,IAC/B;AAAA,EACF;AACA,QAAM,QAAQ;AAAA,IACZ,eAAe,KAAK;AAAA,MAClB,aACE;AAAA,MACF,aAAa,EAAE,OAAO,CAAC,CAAC;AAAA,MACxB,SAAS,YAAY;AACnB,YAAI;AACF,iBAAO,MAAM,WAAW,QAAQ;AAAA,QAClC,SAAS,GAAG;AACV,iBAAO;AAAA,QACT;AAAA,MACF;AAAA,IACF,CAAC;AAAA,IACD,cAAc,KAAK;AAAA,MACjB,aACE;AAAA,MACF,aAAa,EAAE,OAAO;AAAA,QACpB,WAAW,EAAE,OAAO,EAAE,SAAS,+BAA+B;AAAA,QAC9D,YAAY,EACT,OAAO,EACP;AAAA,UACC;AAAA,QACF;AAAA,MACJ,CAAC;AAAA,MACD,SAAS,OAAO,EAAE,UAAU,MAA6B;AACvD,YAAI;AACF,iBAAO,eAAe,WAAW,UAAU,KAAK,UAAU;AAAA,QAC5D,SAAS,GAAG;AACV,iBAAO;AAAA,QACT;AAAA,MACF;AAAA,IACF,CAAC;AAAA,IACD,iBAAiB,KAAK;AAAA,MACpB,aACE;AAAA,MACF,aAAa,EAAE,OAAO;AAAA,QACpB,OAAO,EAAE,OAAO,EAAE,SAAS,wBAAwB;AAAA,MACrD,CAAC;AAAA,MACD,SAAS,OAAO,EAAE,MAAM,MAAyB;AAC/C,YAAI;AACF,iBAAO,MAAM,eAAe,OAAO,QAAQ;AAAA,QAC7C,SAAS,GAAG;AACV,iBAAO,kBAAkB,CAAC;AAAA,QAC5B;AAAA,MACF;AAAA,IACF,CAAC;AAAA,IACD,cAAc,KAAK;AAAA;AAAA,MAEjB,aAAa;AAAA,MACb,aAAa,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE,CAAC;AAAA,MAC5C,SAAS,OAAO,EAAE,OAAO,MAA0B;AAAA,IACrD,CAAC;AAAA,EACH;AACA,MAAI,SAAS,cAAc;AACzB,WAAQ,MAA8B;AAAA,EACxC;AACA,QAAM,EAAE,MAAM,IAAI,MAAM,aAAa;AAAA,IACnC;AAAA,IACA;AAAA,IACA;AAAA,IACA,QAAQ,WAAW,iBAAiB,KAAK;AAAA,IACzC,UAAU,YAAY,cAAc;AAAA,IACpC,cAAc,CAAC,OAAO,QAAQ,GAAG,OAAO;AAAA,EAC1C,CAAC;AACD,MAAI,QAAQ;AACZ,MAAI,WAAW;AACf,aAAW,QAAQ,OAAO;AACxB,eAAW,QAAQ,KAAK,SAAS;AAC/B,UAAI,KAAK,SAAS,UAAU,KAAK,QAAQ,KAAK,KAAK,KAAK,EAAE,SAAS,GAAG;AACpE,mBAAW,KAAK,KAAK,KAAK;AAAA,MAC5B;AAAA,IACF;AAAA,EACF;AACA,QAAM,QAAQ;AACd,aAAW,QAAQ,OAAO;AAExB,UAAM,eAAe,KAAK,QAAQ,KAAK,CAAC,MAAM;AAC5C,aAAO,EAAE,SAAS,iBAAiB,EAAE,aAAa;AAAA,IACpD,CAAC;AACD,QAAI,cAAc;AAChB,cAAS,aAAqB;AAAA,IAChC;AAAA,EACF;AACA,MAAI,CAAC,SAAS,UAAU;AACtB,YAAQ;AAAA,MACN;AAAA,IACF;AACA,YAAQ,GAAG,QAAQ;AAAA;AAAA;AAAA,EACrB;AAEA,QAAM,UAAU,KAAK,IAAI;AACzB,QAAM,WAAW,UAAU;AAC3B,UAAQ;AAAA,IACN,yCAA+B,QAAQ,QAAQ,WAAW,KAAM,QAAQ,CAAC,CAAC;AAAA,EAC5E;AAEA,SAAO;AACT;;;AM5KA,eAAsB,QACpB,QACA,UACA,OAAwB,cACI;AAC5B,QAAM,YAAY,KAAK,IAAI;AAC3B,UAAQ,IAAI,sBAAe,IAAI,iBAAiB;AAEhD,MAAI;AAEF,UAAM,aAAa,MAAM,YAAY,QAAQ,UAAU,IAAI;AAC3D,YAAQ;AAAA,MACN;AAAA,MACA,WAAW,UAAU,GAAG,GAAG,IAAI;AAAA,IACjC;AAEA,QAAI,SAAS,YAAY;AACvB,aAAO;AAAA,IACT;AAGA,QAAI;AACJ,QAAI;AACF,qBAAe,KAAK,MAAM,UAAU;AAAA,IACtC,SAAS,YAAY;AACnB,cAAQ,KAAK,4DAAkD;AAE/D,UAAI,SAAS,cAAc;AACzB,uBAAe;AAAA,UACb,SAAS;AAAA,UACT,WAAW,CAAC;AAAA,UACZ,gBAAgB,CAAC;AAAA,UACjB,cAAc,CAAC;AAAA,UACf,cAAc,CAAC;AAAA,UACf,OAAO,CAAC;AAAA,QACV;AAAA,MACF,OAAO;AACL,uBAAe;AAAA,UACb,SAAS;AAAA,UACT,WAAW,CAAC;AAAA,UACZ,UAAU,CAAC;AAAA,QACb;AAAA,MACF;AAAA,IACF;AAGA,QAAI;AAEJ,QAAI,SAAS,cAAc;AACzB,eAAS;AAAA,QACP,SAAS,aAAa,WAAW;AAAA,QACjC,WAAW,aAAa,aAAa,CAAC;AAAA,QACtC,gBAAgB,aAAa,kBAAkB,CAAC;AAAA,QAChD,cAAc,aAAa,gBAAgB,CAAC;AAAA,QAC5C,cAAc,aAAa,gBAAgB,CAAC;AAAA,QAC5C,OAAO,aAAa,SAAS,CAAC;AAAA,MAChC;AAAA,IACF,OAAO;AACL,eAAS;AAAA,QACP,SAAS,aAAa,WAAW;AAAA,QACjC,WAAW,aAAa,aAAa,CAAC;AAAA,QACtC,UAAU,aAAa,YAAY,CAAC;AAAA,MACtC;AAAA,IACF;AAEA,UAAM,UAAU,KAAK,IAAI;AACzB,UAAM,WAAW,UAAU;AAC3B,YAAQ,IAAI,UAAK,IAAI,6BAA6B,QAAQ,IAAI;AAC9D,YAAQ;AAAA,MACN,qBAAc,OAAO,UAAU,MAAM,wBAAwB,OAAO,QAAQ,UAAU,GAAG,GAAG,CAAC;AAAA,IAC/F;AAEA,WAAO;AAAA,EACT,SAAS,OAAO;AACd,YAAQ,MAAM,iCAA0B,KAAK;AAG7C,QAAI,SAAS,cAAc;AACzB,aAAO;AAAA,QACL,SAAS,uBAAuB,iBAAiB,QAAQ,MAAM,UAAU,eAAe;AAAA,QACxF,WAAW,CAAC;AAAA,QACZ,gBAAgB,CAAC;AAAA,QACjB,cAAc,CAAC;AAAA,QACf,cAAc,CAAC;AAAA,QACf,OAAO,CAAC;AAAA,MACV;AAAA,IACF,OAAO;AACL,aAAO;AAAA,QACL,SAAS,uBAAuB,iBAAiB,QAAQ,MAAM,UAAU,eAAe;AAAA,QACxF,WAAW,CAAC;AAAA,QACZ,UAAU,CAAC;AAAA,MACb;AAAA,IACF;AAAA,EACF;AACF;;;AC1GA,YAAYC,SAAQ;AACpB,YAAYC,WAAU;AAuBf,IAAM,YAAN,MAAgB;AAAA,EAIrB,YAAY,UAAkB,gBAAgB;AAF9C,SAAQ,UAAU;AAGhB,SAAK,UAAU;AACf,SAAK,cAAc;AAAA,EACrB;AAAA,EAEQ,gBAAsB;AAC5B,QAAI,CAAI,eAAW,KAAK,OAAO,GAAG;AAChC,MAAG,cAAU,KAAK,SAAS,EAAE,WAAW,KAAK,CAAC;AAAA,IAChD;AAAA,EACF;AAAA,EAEQ,WAAW,OAAe,MAAsB;AACtD,UAAM,UAAU,GAAG,KAAK,IAAI,IAAI,GAAG,QAAQ,kBAAkB,GAAG;AAChE,WAAY,WAAK,KAAK,SAAS,OAAO;AAAA,EACxC;AAAA,EAEQ,cAAc,OAAe,MAAsB;AACzD,UAAM,UAAU,KAAK,WAAW,OAAO,IAAI;AAC3C,QAAI,CAAI,eAAW,OAAO,GAAG;AAC3B,MAAG,cAAU,SAAS,EAAE,WAAW,KAAK,CAAC;AAAA,IAC3C;AACA,WAAO;AAAA,EACT;AAAA;AAAA,EAGA,MAAM,eAAe,OAAe,MAAc,MAA0B;AAC1E,UAAM,UAAU,KAAK,cAAc,OAAO,IAAI;AAC9C,UAAM,WAAgB,WAAK,SAAS,YAAY;AAEhD,UAAM,eAAe;AAAA,MACnB,GAAG;AAAA,MACH,YAAW,oBAAI,KAAK,GAAE,YAAY;AAAA,MAClC,WAAW,KAAK,IAAI;AAAA,MACpB;AAAA,MACA;AAAA,IACF;AAEA,IAAG,kBAAc,UAAU,KAAK,UAAU,cAAc,MAAM,CAAC,CAAC;AAChE,YAAQ,IAAI,mCAA4B,KAAK,IAAI,IAAI,EAAE;AAAA,EACzD;AAAA;AAAA,EAGA,MAAM,aAAa,OAAe,MAAmC;AACnE,UAAM,UAAU,KAAK,WAAW,OAAO,IAAI;AAC3C,UAAM,WAAgB,WAAK,SAAS,YAAY;AAEhD,QAAI,CAAI,eAAW,QAAQ,GAAG;AAC5B,aAAO;AAAA,IACT;AAEA,QAAI;AACF,YAAM,UAAa,iBAAa,UAAU,OAAO;AACjD,YAAM,OAAO,KAAK,MAAM,OAAO;AAC/B,cAAQ,IAAI,6CAAsC,KAAK,IAAI,IAAI,gBAAgB,KAAK,SAAS,GAAG;AAChG,aAAO;AAAA,IACT,SAAS,OAAO;AACd,cAAQ,MAAM,6BAA6B,KAAK,EAAE;AAClD,aAAO;AAAA,IACT;AAAA,EACF;AAAA;AAAA,EAGA,MAAM,mBACJ,OACA,MACA,cAAsB,IACJ;AAClB,UAAM,OAAO,MAAM,KAAK,aAAa,OAAO,IAAI;AAChD,QAAI,CAAC,QAAQ,CAAC,KAAK,UAAW,QAAO;AAErC,UAAM,QAAQ,KAAK,IAAI,IAAI,KAAK;AAChC,UAAM,WAAW,SAAS,MAAO,KAAK;AACtC,WAAO,WAAW;AAAA,EACpB;AAAA;AAAA,EAGA,MAAM,iBACJ,OACA,MACA,MACA,QACe;AACf,UAAM,UAAU,KAAK,cAAc,OAAO,IAAI;AAC9C,UAAM,WAAgB,WAAK,SAAS,eAAe,IAAI,OAAO;AAE9D,UAAM,oBAAuC;AAAA,MAC3C;AAAA,MACA;AAAA,MACA,WAAW,KAAK,IAAI;AAAA,MACpB;AAAA,MACA;AAAA,MACA,SAAS,KAAK;AAAA,IAChB;AAEA,IAAG,kBAAc,UAAU,KAAK,UAAU,mBAAmB,MAAM,CAAC,CAAC;AACrE,YAAQ,IAAI,oBAAa,IAAI,oBAAoB,KAAK,IAAI,IAAI,EAAE;AAAA,EAClE;AAAA;AAAA,EAGA,MAAM,eACJ,OACA,MACA,MACmC;AACnC,UAAM,UAAU,KAAK,WAAW,OAAO,IAAI;AAC3C,UAAM,WAAgB,WAAK,SAAS,eAAe,IAAI,OAAO;AAE9D,QAAI,CAAI,eAAW,QAAQ,GAAG;AAC5B,aAAO;AAAA,IACT;AAEA,QAAI;AACF,YAAM,UAAa,iBAAa,UAAU,OAAO;AACjD,aAAO,KAAK,MAAM,OAAO;AAAA,IAC3B,SAAS,OAAO;AACd,cAAQ,MAAM,mCAAmC,KAAK,EAAE;AACxD,aAAO;AAAA,IACT;AAAA,EACF;AAAA;AAAA,EAGA,MAAM,mBACJ,OACA,MAC8B;AAC9B,UAAM,UAAU,KAAK,WAAW,OAAO,IAAI;AAE3C,QAAI,CAAI,eAAW,OAAO,GAAG;AAC3B,aAAO,CAAC;AAAA,IACV;AAEA,UAAM,eAAoC,CAAC;AAC3C,UAAM,QAA2B,CAAC,cAAc,UAAU;AAE1D,eAAW,QAAQ,OAAO;AACxB,YAAM,cAAc,MAAM,KAAK,eAAe,OAAO,MAAM,IAAI;AAC/D,UAAI,aAAa;AACf,qBAAa,KAAK,WAAW;AAAA,MAC/B;AAAA,IACF;AAEA,WAAO;AAAA,EACT;AAAA;AAAA,EAGA,MAAM,qBACJ,OACA,MACA,MACA,cAAsB,IACJ;AAClB,UAAM,cAAc,MAAM,KAAK,eAAe,OAAO,MAAM,IAAI;AAC/D,QAAI,CAAC,YAAa,QAAO;AAEzB,UAAM,QAAQ,KAAK,IAAI,IAAI,YAAY;AACvC,UAAM,WAAW,SAAS,MAAO,KAAK;AACtC,WAAO,WAAW;AAAA,EACpB;AAAA;AAAA,EAGA,MAAM,wBACJ,OACA,MACwC;AACxC,UAAM,SAAS,MAAM,KAAK,eAAe,OAAO,MAAM,YAAY;AAClE,WAAQ,QAAQ,UAAqC;AAAA,EACvD;AAAA;AAAA,EAGA,MAAM,uBACJ,OACA,MACuC;AACvC,UAAM,SAAS,MAAM,KAAK,eAAe,OAAO,MAAM,UAAU;AAChE,WAAQ,QAAQ,UAAoC;AAAA,EACtD;AAAA;AAAA,EAGA,MAAM,YAUJ;AACA,QAAI,CAAI,eAAW,KAAK,OAAO,GAAG;AAChC,aAAO,CAAC;AAAA,IACV;AAEA,UAAM,QAAQ,CAAC;AACf,UAAM,UAAa,gBAAY,KAAK,OAAO;AAE3C,eAAW,SAAS,SAAS;AAC3B,YAAM,QAAQ,MAAM,MAAM,GAAG;AAC7B,UAAI,MAAM,UAAU,GAAG;AACrB,cAAM,QAAQ,MAAM,CAAC;AACrB,cAAM,OAAO,MAAM,MAAM,CAAC,EAAE,KAAK,GAAG;AAEpC,cAAM,eAAe,MAAM,KAAK,mBAAmB,OAAO,IAAI;AAC9D,cAAM,eAAe,aAAa,KAAK,CAAC,MAAM,EAAE,SAAS,YAAY;AACrE,cAAM,cAAc,aAAa,KAAK,CAAC,MAAM,EAAE,SAAS,UAAU;AAElE,cAAM,eACJ,aAAa,SAAS,IAClB,KAAK,IAAI,GAAG,aAAa,IAAI,CAAC,MAAM,EAAE,SAAS,CAAC,IAChD;AAEN,cAAM,KAAK;AAAA,UACT;AAAA,UACA;AAAA,UACA,cAAc;AAAA,YACZ,YAAY;AAAA,YACZ,UAAU;AAAA,UACZ;AAAA,UACA;AAAA,QACF,CAAC;AAAA,MACH;AAAA,IACF;AAEA,WAAO;AAAA,EACT;AAAA;AAAA,EAGA,MAAM,uBAAuB,cAAsB,KAAK,GAAkB;AACxE,UAAM,QAAQ,MAAM,KAAK,UAAU;AACnC,UAAM,SAAS,KAAK,IAAI,IAAI,cAAc,KAAK,KAAK;AAEpD,eAAW,YAAY,OAAO;AAC5B,UAAI,SAAS,gBAAgB,SAAS,eAAe,QAAQ;AAC3D,cAAM,UAAU,KAAK,WAAW,SAAS,OAAO,SAAS,IAAI;AAG7D,cAAM,QAA2B,CAAC,cAAc,UAAU;AAC1D,mBAAW,QAAQ,OAAO;AACxB,gBAAM,WAAgB,WAAK,SAAS,eAAe,IAAI,OAAO;AAC9D,cAAO,eAAW,QAAQ,GAAG;AAC3B,YAAG,eAAW,QAAQ;AACtB,oBAAQ;AAAA,cACN,4BAAqB,IAAI,oBAAoB,SAAS,KAAK,IAAI,SAAS,IAAI;AAAA,YAC9E;AAAA,UACF;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,EACF;AACF;;;ACrRA,SAAS,oBAAoB;AActB,IAAM,qBAAN,MAAM,4BAA2B,aAAa;AAAA,EAGnD,OAAO,cAAkC;AACvC,QAAI,CAAC,KAAK,UAAU;AAClB,WAAK,WAAW,IAAI,oBAAmB;AAAA,IACzC;AACA,WAAO,KAAK;AAAA,EACd;AAAA,EAEQ,cAAc;AACpB,UAAM;AACN,SAAK,gBAAgB,GAAG;AAAA,EAC1B;AAAA,EAEQ,WAAW,OAAe,MAAsB;AACtD,WAAO,GAAG,KAAK,IAAI,IAAI;AAAA,EACzB;AAAA;AAAA,EAGA,iBAAiB,OAAe,MAAoB;AAClD,UAAM,QAA0B;AAAA,MAC9B,MAAM;AAAA,MACN;AAAA,MACA;AAAA,MACA,WAAW,KAAK,IAAI;AAAA,IACtB;AAEA,SAAK,KAAK,KAAK,WAAW,OAAO,IAAI,GAAG,KAAK;AAC7C,YAAQ,IAAI,uCAAgC,KAAK,IAAI,IAAI,EAAE;AAAA,EAC7D;AAAA,EAEA,mBAAmB,OAAe,MAAc,SAAkB,WAA0B;AAC1F,UAAM,QAA0B;AAAA,MAC9B,MAAM;AAAA,MACN;AAAA,MACA;AAAA,MACA,MAAM,EAAE,SAAS,UAAU;AAAA,MAC3B,WAAW,KAAK,IAAI;AAAA,IACtB;AAEA,SAAK,KAAK,KAAK,WAAW,OAAO,IAAI,GAAG,KAAK;AAC7C,YAAQ,IAAI,yCAAkC,KAAK,IAAI,IAAI,KAAK,UAAU,YAAY,QAAQ,EAAE;AAAA,EAClG;AAAA;AAAA,EAGA,uBAAuB,OAAe,MAAc,MAA6B;AAC/E,UAAM,QAA0B;AAAA,MAC9B,MAAM;AAAA,MACN;AAAA,MACA;AAAA,MACA;AAAA,MACA,WAAW,KAAK,IAAI;AAAA,IACtB;AAEA,SAAK,KAAK,KAAK,WAAW,OAAO,IAAI,GAAG,KAAK;AAC7C,YAAQ,IAAI,6CAAsC,KAAK,IAAI,IAAI,KAAK,IAAI,GAAG;AAAA,EAC7E;AAAA,EAEA,wBAAwB,OAAe,MAAc,MAAuB,UAAwB;AAClG,UAAM,QAA0B;AAAA,MAC9B,MAAM;AAAA,MACN;AAAA,MACA;AAAA,MACA;AAAA,MACA,MAAM,EAAE,SAAS;AAAA,MACjB,WAAW,KAAK,IAAI;AAAA,IACtB;AAEA,SAAK,KAAK,KAAK,WAAW,OAAO,IAAI,GAAG,KAAK;AAC7C,YAAQ,IAAI,8CAAuC,KAAK,IAAI,IAAI,KAAK,IAAI,MAAM,QAAQ,EAAE;AAAA,EAC3F;AAAA,EAEA,yBAAyB,OAAe,MAAc,MAAuB,QAAiC;AAC5G,UAAM,QAA0B;AAAA,MAC9B,MAAM;AAAA,MACN;AAAA,MACA;AAAA,MACA;AAAA,MACA,MAAM,EAAE,OAAO;AAAA,MACf,WAAW,KAAK,IAAI;AAAA,IACtB;AAEA,SAAK,KAAK,KAAK,WAAW,OAAO,IAAI,GAAG,KAAK;AAC7C,YAAQ,IAAI,+CAAwC,KAAK,IAAI,IAAI,KAAK,IAAI,GAAG;AAAA,EAC/E;AAAA,EAEA,sBAAsB,OAAe,MAAc,MAAuB,OAAqB;AAC7F,UAAM,QAA0B;AAAA,MAC9B,MAAM;AAAA,MACN;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA,WAAW,KAAK,IAAI;AAAA,IACtB;AAEA,SAAK,KAAK,KAAK,WAAW,OAAO,IAAI,GAAG,KAAK;AAC7C,YAAQ,IAAI,4CAAqC,KAAK,IAAI,IAAI,KAAK,IAAI,MAAM,KAAK,EAAE;AAAA,EACtF;AAAA;AAAA,EAGA,gBAAgB,OAAe,MAAc,UAAyD;AACpG,UAAM,UAAU,KAAK,WAAW,OAAO,IAAI;AAC3C,SAAK,GAAG,SAAS,QAAQ;AAEzB,YAAQ,IAAI,gCAAyB,KAAK,IAAI,IAAI,YAAY,KAAK,cAAc,OAAO,CAAC,GAAG;AAG5F,SAAK,KAAK,cAAc,OAAO,IAAI,EAAE,OAAO,KAAK,CAAC;AAGlD,WAAO,MAAM;AACX,WAAK,eAAe,SAAS,QAAQ;AACrC,cAAQ,IAAI,+BAAwB,KAAK,IAAI,IAAI,gBAAgB,KAAK,cAAc,OAAO,CAAC,GAAG;AAAA,IACjG;AAAA,EACF;AAAA;AAAA,EAGA,kBAAkB,OAAe,MAAc,YAAoB,KAAqB;AACtF,WAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACtC,YAAM,UAAU,KAAK,WAAW,OAAO,IAAI;AAG3C,UAAI,KAAK,cAAc,OAAO,IAAI,GAAG;AACnC,gBAAQ;AACR;AAAA,MACF;AAGA,YAAM,UAAU,WAAW,MAAM;AAC/B,aAAK,eAAe,cAAc,OAAO,IAAI,YAAY;AACzD,eAAO,IAAI,MAAM,yCAAyC,KAAK,IAAI,IAAI,EAAE,CAAC;AAAA,MAC5E,GAAG,SAAS;AAEZ,YAAM,eAAe,MAAM;AACzB,qBAAa,OAAO;AACpB,aAAK,eAAe,cAAc,OAAO,IAAI,YAAY;AACzD,gBAAQ;AAAA,MACV;AAEA,WAAK,KAAK,cAAc,OAAO,IAAI,YAAY;AAAA,IACjD,CAAC;AAAA,EACH;AAAA;AAAA,EAGA,iBAAiB,OAAe,MAAsB;AACpD,WAAO,KAAK,cAAc,KAAK,WAAW,OAAO,IAAI,CAAC;AAAA,EACxD;AAAA;AAAA,EAGA,YAAY,OAAe,MAAoB;AAC7C,UAAM,UAAU,KAAK,WAAW,OAAO,IAAI;AAC3C,SAAK,mBAAmB,OAAO;AAC/B,YAAQ,IAAI,0CAAmC,KAAK,IAAI,IAAI,EAAE;AAAA,EAChE;AACF;;;ACrJO,IAAM,gBAAN,MAAoB;AAAA,EAczB,YAAY,UAAyB,CAAC,GAAG;AACvC,SAAK,QAAQ,IAAI,YAAY,QAAQ,OAAO,GAAG;AAC/C,SAAK,QAAQ,IAAI,UAAU,QAAQ,QAAQ;AAC3C,SAAK,UAAU,mBAAmB,YAAY;AAG9C,SAAK,eAAe,IAAI,qBAAqB,KAAK,OAAO,QAAQ,KAAK;AACtE,SAAK,QAAQ,IAAI,cAAc,KAAK,OAAO,QAAQ,KAAK;AACxD,SAAK,aAAa,IAAI,mBAAmB,KAAK,OAAO,QAAQ,KAAK;AAClE,SAAK,UAAU,IAAI,gBAAgB,KAAK,OAAO,QAAQ,KAAK;AAC5D,SAAK,WAAW,IAAI,iBAAiB,KAAK,OAAO,QAAQ,KAAK;AAC9D,SAAK,QAAQ,IAAI,cAAc,KAAK,OAAO,QAAQ,KAAK;AACxD,SAAK,QAAQ,IAAI,cAAc,KAAK,OAAO,QAAQ,KAAK;AAAA,EAC1D;AAAA,EAEA,MAAM,aACJ,KACA,KACA,OACA,MACe;AACf,YAAQ,IAAI,4CAAqC,KAAK,IAAI,IAAI,EAAE;AAGhE,QAAI,UAAU,KAAK;AAAA,MACjB,gBAAgB;AAAA,MAChB,iBAAiB;AAAA,MACjB,YAAY;AAAA,MACZ,+BAA+B;AAAA,MAC/B,gCAAgC;AAAA,IAClC,CAAC;AAGD,QAAI;AAAA,MACF,SAAS,KAAK,UAAU;AAAA,QACtB,MAAM;AAAA,QACN;AAAA,QACA;AAAA,QACA,WAAW,KAAK,IAAI;AAAA,MACtB,CAAC,CAAC;AAAA;AAAA;AAAA,IACJ;AAGA,UAAM,cAAc,KAAK,QAAQ,gBAAgB,OAAO,MAAM,CAAC,UAAU;AACvE,UAAI;AACF,YAAI,MAAM,SAAS,KAAK,UAAU,KAAK,CAAC;AAAA;AAAA,CAAM;AAAA,MAChD,SAAS,OAAO;AACd,gBAAQ;AAAA,UACN,yCAAkC,KAAK,IAAI,IAAI;AAAA,UAC/C;AAAA,QACF;AAAA,MACF;AAAA,IACF,CAAC;AAGD,QAAI,GAAG,SAAS,MAAM;AACpB,cAAQ,IAAI,uCAAgC,KAAK,IAAI,IAAI,EAAE;AAC3D,kBAAY;AAAA,IACd,CAAC;AAED,QAAI,GAAG,SAAS,CAAC,UAAU;AACzB,cAAQ,MAAM,sCAA+B,KAAK,IAAI,IAAI,KAAK,KAAK;AACpE,kBAAY;AAAA,IACd,CAAC;AAGD,UAAM,YAAY,YAAY,MAAM;AAClC,UAAI;AACF,YAAI;AAAA,UACF,SAAS,KAAK,UAAU;AAAA,YACtB,MAAM;AAAA,YACN,WAAW,KAAK,IAAI;AAAA,UACtB,CAAC,CAAC;AAAA;AAAA;AAAA,QACJ;AAAA,MACF,SAAS,OAAO;AACd,gBAAQ,MAAM,kCAA2B,KAAK,IAAI,IAAI,KAAK,KAAK;AAChE,sBAAc,SAAS;AACvB,oBAAY;AAAA,MACd;AAAA,IACF,GAAG,GAAK;AAGR,QAAI,GAAG,SAAS,MAAM;AACpB,oBAAc,SAAS;AAAA,IACzB,CAAC;AAAA,EACH;AAAA,EAEA,MAAM,OAAO,KAAsB,KAAoC;AAIrE,QAAI,UAAU,+BAA+B,GAAG;AAChD,QAAI,UAAU,gCAAgC,eAAe;AAC7D,QAAI,UAAU,gCAAgC,cAAc;AAE5D,QAAI,IAAI,WAAW,WAAW;AAC5B,UAAI,UAAU,GAAG;AACjB,UAAI,IAAI;AACR;AAAA,IACF;AAEA,QAAI,IAAI,WAAW,QAAQ;AACzB,UAAI,UAAU,KAAK,EAAE,gBAAgB,mBAAmB,CAAC;AACzD,UAAI,IAAI,KAAK,UAAU,EAAE,OAAO,qBAAqB,CAAC,CAAC;AACvD;AAAA,IACF;AAEA,QAAI;AACF,YAAM,OAAO,MAAM,KAAK,iBAAiB,GAAG;AAC5C,YAAM,UAAyB,KAAK,MAAM,IAAI;AAE9C,YAAM,WAAW,MAAM,KAAK,eAAe,OAAO;AAElD,UAAI,UAAU,KAAK,EAAE,gBAAgB,mBAAmB,CAAC;AACzD,UAAI,IAAI,KAAK,UAAU,QAAQ,CAAC;AAAA,IAClC,SAAS,OAAO;AACd,cAAQ,MAAM,yBAAyB,KAAK;AAC5C,UAAI,UAAU,KAAK,EAAE,gBAAgB,mBAAmB,CAAC;AACzD,UAAI;AAAA,QACF,KAAK,UAAU;AAAA,UACb,OACE,iBAAiB,QAAQ,MAAM,UAAU;AAAA,QAC7C,CAAC;AAAA,MACH;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,MAAM,WAAW,MAAqB,KAAoC;AAExE,QAAI,UAAU,+BAA+B,GAAG;AAChD,QAAI,UAAU,gCAAgC,eAAe;AAC7D,QAAI,UAAU,gCAAgC,cAAc;AAE5D,QAAI;AACF,YAAM,WAAW,MAAM,KAAK,eAAe,IAAI;AAE/C,UAAI,UAAU,KAAK,EAAE,gBAAgB,mBAAmB,CAAC;AACzD,UAAI,IAAI,KAAK,UAAU,QAAQ,CAAC;AAAA,IAClC,SAAS,OAAO;AACd,cAAQ,MAAM,4BAA4B,KAAK;AAC/C,UAAI,UAAU,KAAK,EAAE,gBAAgB,mBAAmB,CAAC;AACzD,UAAI;AAAA,QACF,KAAK,UAAU;AAAA,UACb,OACE,iBAAiB,QAAQ,MAAM,UAAU;AAAA,QAC7C,CAAC;AAAA,MACH;AAAA,IACF;AAAA,EACF;AAAA,EAEQ,8BACN,OACA,MACA,cACM;AAEN,iBAAa,YAAY;AACvB,UAAI;AAEF,cAAM,YAAY,MAAM,KAAK,MAAM;AAAA,UACjC;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,QACF;AAEA,YAAI,CAAC,WAAW;AACd,kBAAQ;AAAA,YACN,sDAA+C,KAAK,IAAI,IAAI;AAAA,UAC9D;AACA,eAAK,QAAQ,uBAAuB,OAAO,MAAM,YAAY;AAG7D,eAAK;AAAA,YACH;AAAA,YACA;AAAA,YACA;AAAA,YACA;AAAA,UACF,EAAE,MAAM,CAAC,UAAU;AACjB,oBAAQ;AAAA,cACN,0DAAmD,KAAK,IAAI,IAAI;AAAA,cAChE,MAAM;AAAA,YACR;AACA,iBAAK,QAAQ;AAAA,cACX;AAAA,cACA;AAAA,cACA;AAAA,cACA,MAAM;AAAA,YACR;AAAA,UACF,CAAC;AAAA,QACH,OAAO;AACL,kBAAQ;AAAA,YACN,kDAA6C,KAAK,IAAI,IAAI;AAAA,UAC5D;AAGA,uBAAa,YAAY;AACvB,gBAAI;AACF,oBAAM,SAAS,MAAM,KAAK,MAAM;AAAA,gBAC9B;AAAA,gBACA;AAAA,gBACA;AAAA,cACF;AACA,kBAAI,QAAQ,QAAQ;AAClB,wBAAQ;AAAA,kBACN,uFAAkF,KAAK,IAAI,IAAI;AAAA,gBACjG;AAGA,oBAAI;AACF,wBAAM,KAAK,QAAQ,kBAAkB,OAAO,MAAM,GAAK;AACvD,0BAAQ;AAAA,oBACN,uEAAgE,KAAK,IAAI,IAAI;AAAA,kBAC/E;AACA,0BAAQ;AAAA,oBACN;AAAA,oBACC,OAAO,OAAe;AAAA,kBACzB;AACA,0BAAQ;AAAA,oBACN;AAAA,oBACA,KAAK,QAAQ,iBAAiB,OAAO,IAAI;AAAA,kBAC3C;AACA,uBAAK,QAAQ;AAAA,oBACX;AAAA,oBACA;AAAA,oBACA;AAAA,oBACA,OAAO;AAAA,kBACT;AAAA,gBACF,SAAS,cAAc;AACrB,0BAAQ;AAAA,oBACN,kEAA6D,KAAK,IAAI,IAAI;AAAA,kBAC5E;AACA,uBAAK,QAAQ;AAAA,oBACX;AAAA,oBACA;AAAA,oBACA;AAAA,oBACA,OAAO;AAAA,kBACT;AAAA,gBACF;AAAA,cACF;AAAA,YACF,SAAS,OAAO;AACd,sBAAQ;AAAA,gBACN,mDAA4C,KAAK,IAAI,IAAI;AAAA,gBACzD;AAAA,cACF;AAAA,YACF;AAAA,UACF,CAAC;AAAA,QACH;AAAA,MACF,SAAS,OAAO;AACd,gBAAQ;AAAA,UACN,mDAA4C,KAAK,IAAI,IAAI;AAAA,UACzD;AAAA,QACF;AAAA,MACF;AAAA,IACF,CAAC;AAAA,EACH;AAAA,EAEA,MAAc,yBACZ,OACA,MACA,MACA,cACe;AACf,QAAI;AAEF,YAAM,WAAW,aAAa,OAAO,MAAM,YAAY;AACvD,YAAM,cAAc,MAAM,WAAW,eAAe,OAAO,IAAI;AAE/D,UAAI,aAAa,WAAW,YAAY,WAAW;AACjD,aAAK,QAAQ;AAAA,UACX;AAAA,UACA;AAAA,UACA;AAAA,UACA,YAAY;AAAA,QACd;AAEA,cAAM,SACJ,SAAS,eACL,iEACA;AAEN,gBAAQ;AAAA,UACN,gCAAyB,IAAI,oBAAoB,KAAK,IAAI,IAAI;AAAA,QAChE;AACA,aAAK,QAAQ;AAAA,UACX;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,QACF;AAEA,cAAM,oBAAoB,MAAM;AAAA,UAC9B;AAAA,UACA,YAAY;AAAA,UACZ;AAAA,QACF;AAGA,cAAM,KAAK,MAAM,iBAAiB,OAAO,MAAM,MAAM,iBAAiB;AAEtE,gBAAQ;AAAA,UACN,qBAAgB,IAAI,8BAA8B,KAAK,IAAI,IAAI;AAAA,QACjE;AACA,aAAK,QAAQ;AAAA,UACX;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,QACF;AAAA,MACF,OAAO;AACL,gBAAQ;AAAA,UACN,8DAAyD,KAAK,IAAI,IAAI;AAAA,QACxE;AACA,aAAK,QAAQ,mBAAmB,OAAO,MAAM,KAAK;AAClD,aAAK,QAAQ;AAAA,UACX;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,QACF;AAAA,MACF;AAAA,IACF,SAAS,OAAO;AACd,cAAQ;AAAA,QACN,wBAAiB,IAAI,2BAA2B,KAAK,IAAI,IAAI;AAAA,QAC7D;AAAA,MACF;AACA,WAAK,QAAQ;AAAA,QACX;AAAA,QACA;AAAA,QACA;AAAA,QACA,iBAAiB,QAAQ,MAAM,UAAU;AAAA,MAC3C;AAAA,IACF;AAAA,EACF;AAAA,EAEA,MAAc,iBAAiB,KAAuC;AACpE,WAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACtC,UAAI,OAAO;AACX,UAAI,GAAG,QAAQ,CAAC,UAAgB,QAAQ,KAAM;AAC9C,UAAI,GAAG,OAAO,MAAM,QAAQ,IAAI,CAAC;AACjC,UAAI,GAAG,SAAS,MAAM;AAAA,IACxB,CAAC;AAAA,EACH;AAAA,EAEA,MAAc,eACZ,SACyB;AACzB,UAAM,EAAE,OAAO,MAAM,MAAM,cAAc,SAAS,IAAI;AACtD,UAAM,WAA2B,CAAC;AAGlC,QAAI,aAAa,OAAO;AACtB,YAAM,aAAa,MAAM,KAAK,MAAM,aAAa,OAAO,IAAI;AAC5D,UAAI,YAAY;AACd,gBAAQ,IAAI,mCAA4B,KAAK,IAAI,IAAI,EAAE;AAEvD,eAAO;AAAA,UACL,MAAM,WAAW;AAAA,UACjB,cAAc,WAAW;AAAA,UACzB,MAAM,WAAW;AAAA,UACjB,OAAO,WAAW;AAAA,UAClB,OAAO,WAAW;AAAA,QACpB;AAAA,MACF,OAAO;AACL,gBAAQ,IAAI,sCAA+B,KAAK,IAAI,IAAI,qBAAqB;AAAA,MAC/E;AAAA,IACF,OAAO;AACL,cAAQ,IAAI,wEAAiE,KAAK,IAAI,IAAI,EAAE;AAAA,IAC9F;AAGA,UAAM,eAAe,cAAc,QAC/B,IAAI,qBAAqB,KAAK,OAAO,aAAa,KAAK,IACvD,KAAK;AACT,UAAM,QAAQ,cAAc,QACxB,IAAI,cAAc,KAAK,OAAO,aAAa,KAAK,IAChD,KAAK;AACT,UAAM,aAAa,cAAc,QAC7B,IAAI,mBAAmB,KAAK,OAAO,aAAa,KAAK,IACrD,KAAK;AACT,UAAM,UAAU,cAAc,QAC1B,IAAI,gBAAgB,KAAK,OAAO,aAAa,KAAK,IAClD,KAAK;AACT,UAAM,WAAW,cAAc,QAC3B,IAAI,iBAAiB,KAAK,OAAO,aAAa,KAAK,IACnD,KAAK;AACT,UAAM,QAAQ,cAAc,QACxB,IAAI,cAAc,KAAK,OAAO,aAAa,KAAK,IAChD,KAAK;AACT,UAAM,QAAQ,cAAc,QACxB,IAAI,cAAc,KAAK,OAAO,aAAa,KAAK,IAChD,KAAK;AAGT,YAAQ,IAAI,2CAAoC,KAAK,IAAI,IAAI,KAAK;AAClE,SAAK,QAAQ,iBAAiB,OAAO,IAAI;AACzC,eAAW,kBAAkB,OAAO,MAAM,YAAY;AAGtD,SAAK,8BAA8B,OAAO,MAAM,YAAY;AAK5D,QAAI,CAAC,SAAS,CAAC,MAAM;AACnB,YAAM,IAAI,MAAM,6BAA6B;AAAA,IAC/C;AAEA,QAAI,CAAC,MAAM,QAAQ,IAAI,KAAK,KAAK,WAAW,GAAG;AAC7C,YAAM,IAAI,MAAM,8CAA8C;AAAA,IAChE;AAEA,YAAQ;AAAA,MACN,oCAA6B,KAAK,IAAI,IAAI,gBAAgB,KAAK,KAAK,IAAI,CAAC;AAAA,IAC3E;AAGA,eAAW,YAAY,MAAM;AAC3B,UAAI;AACF,gBAAQ,UAAU;AAAA,UAChB,KAAK;AACH,oBAAQ,IAAI,0CAAmC,KAAK,IAAI,IAAI,KAAK;AACjE,qBAAS,OAAO,MAAM,WAAW,YAAY,OAAO,IAAI;AACxD,oBAAQ,IAAI,yCAAkC;AAC9C;AAAA,UAEF,KAAK;AACH,oBAAQ,IAAI,uCAAgC,KAAK,IAAI,IAAI,KAAK;AAC9D,qBAAS,eAAe,MAAM,aAAa;AAAA,cACzC;AAAA,cACA;AAAA,YACF;AACA,oBAAQ;AAAA,cACN,kCAA2B,SAAS,cAAc,UAAU,CAAC;AAAA,YAC/D;AACA;AAAA,UAEF,KAAK;AACH,oBAAQ,IAAI,+BAAwB,KAAK,IAAI,IAAI,KAAK;AACtD,qBAAS,OAAO,MAAM,MAAM,YAAY,OAAO,IAAI;AACnD,oBAAQ;AAAA,cACN;AAAA,cACA,SAAS,OAAO,UAAU;AAAA,YAC5B;AACA;AAAA,UAEF,KAAK;AACH,oBAAQ,IAAI,kCAA2B,KAAK,IAAI,IAAI,KAAK;AACzD,qBAAS,UAAU,MAAM,QAAQ,WAAW,OAAO,IAAI;AACvD,oBAAQ,IAAI,oDAA6C;AACzD;AAAA,UAEF,KAAK;AACH,oBAAQ,IAAI,mCAA4B,KAAK,IAAI,IAAI,KAAK;AAC1D,qBAAS,WAAW,MAAM,SAAS,YAAY,OAAO,IAAI;AAC1D,oBAAQ;AAAA,cACN,8BAAuB,SAAS,UAAU,UAAU,CAAC;AAAA,YACvD;AACA;AAAA,UAEF,KAAK;AACH,oBAAQ,IAAI,oCAA6B,KAAK,IAAI,IAAI,KAAK;AAC3D,qBAAS,QAAQ,MAAM,MAAM,YAAY,OAAO,IAAI;AACpD,oBAAQ;AAAA,cACN,2BAAoB,SAAS,OAAO,UAAU,CAAC;AAAA,YACjD;AACA;AAAA,UAEF,KAAK;AACH,oBAAQ,IAAI,gCAAyB,KAAK,IAAI,IAAI,KAAK;AACvD,qBAAS,QAAQ,MAAM,MAAM,aAAa,OAAO,IAAI;AACrD,oBAAQ;AAAA,cACN,2BAAoB,SAAS,OAAO,KAAK,WAAW,SAAS,OAAO,WAAW,YAAY,SAAS,OAAO,YAAY,aAAa,SAAS,OAAO,UAAU;AAAA,YAChK;AACA;AAAA,UAEF,KAAK;AACH,gBAAI,CAAC,QAAQ,UAAU;AACrB,sBAAQ;AAAA,gBACN;AAAA,cACF;AACA;AAAA,YACF;AACA,oBAAQ;AAAA,cACN,uCAAgC,KAAK,IAAI,IAAI,IAAI,QAAQ,QAAQ;AAAA,YACnE;AACA,qBAAS,cAAc,MAAM,MAAM;AAAA,cACjC;AAAA,cACA;AAAA,cACA,QAAQ;AAAA,YACV;AACA,oBAAQ;AAAA,cACN,kCACE,SAAS,cACL,UAAU,SAAS,YAAY,IAAI,YACnC,WACN;AAAA,YACF;AACA;AAAA,UAEF,KAAK;AACH,oBAAQ,IAAI,2CAAoC,KAAK,IAAI,IAAI,KAAK;AAClE,kBAAM,kBACJ,QAAQ,mBAAmB;AAG7B,gBACE,MAAM,KAAK,MAAM;AAAA,cACf;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,YACF,GACA;AACA,sBAAQ;AAAA,gBACN,6BAAmB,eAAe;AAAA,cACpC;AACA,oBAAM,SAAS,MAAM,KAAK,MAAM;AAAA,gBAC9B;AAAA,gBACA;AAAA,gBACA;AAAA,cACF;AACA,uBAAS,cAAc,QAAQ;AAG/B,kBAAI,QAAQ,QAAQ;AAClB,qBAAK,QAAQ;AAAA,kBACX;AAAA,kBACA;AAAA,kBACA;AAAA,kBACA,OAAO;AAAA,gBACT;AAAA,cACF;AAAA,YACF,OAAO;AACL,sBAAQ,IAAI,qBAAc,eAAe,uBAAuB;AAChE,kBAAI;AAEF,sBAAM,WAAW,aAAa,OAAO,MAAM,YAAY;AACvD,sBAAM,cAAc,MAAM,WAAW;AAAA,kBACnC;AAAA,kBACA;AAAA,gBACF;AAEA,oBAAI,aAAa,WAAW,YAAY,WAAW;AACjD,wBAAM,SACJ,QAAQ,sBACP,oBAAoB,eACjB,iEACA;AAEN,wBAAM,oBAAoB,MAAM;AAAA,oBAC9B;AAAA,oBACA,YAAY;AAAA,oBACZ;AAAA,kBACF;AAGA,wBAAM,KAAK,MAAM;AAAA,oBACf;AAAA,oBACA;AAAA,oBACA;AAAA,oBACA;AAAA,kBACF;AACA,2BAAS,cAAc;AAGvB,wBAAM,KAAK,MAAM,eAAe,OAAO,MAAM;AAAA,oBAC3C,MAAM,SAAS;AAAA,oBACf,cAAc,SAAS;AAAA,oBACvB,OAAO,SAAS;AAAA,oBAChB,OAAO,SAAS;AAAA,oBAChB,MAAM,SAAS;AAAA,kBACjB,CAAC;AAED,0BAAQ;AAAA,oBACN,UAAK,eAAe;AAAA,kBACtB;AAAA,gBACF,OAAO;AACL,0BAAQ,MAAM,0CAA0C;AACxD,2BAAS,cAAc;AAAA,oBACrB,OAAO;AAAA,kBACT;AAAA,gBACF;AAAA,cACF,SAAS,OAAO;AACd,wBAAQ;AAAA,kBACN,iBAAiB,eAAe;AAAA,kBAChC;AAAA,gBACF;AACA,yBAAS,cAAc;AAAA,kBACrB,OAAO,uBAAuB,iBAAiB,QAAQ,MAAM,UAAU,eAAe;AAAA,gBACxF;AAAA,cACF;AAAA,YACF;AACA;AAAA,UAEF;AACE,oBAAQ,KAAK,oCAA0B,QAAQ,EAAE;AAAA,QACrD;AAAA,MACF,SAAS,OAAO;AACd,gBAAQ;AAAA,UACN,8BAAuB,QAAQ,QAAQ,KAAK,IAAI,IAAI;AAAA,UACpD;AAAA,QACF;AAAA,MAEF;AAAA,IACF;AAEA,WAAO;AAAA,EACT;AACF;AAGO,SAAS,oBAAoB,UAAyB,CAAC,GAAG;AAC/D,QAAM,UAAU,IAAI,cAAc,OAAO;AACzC,SAAO,CAAC,KAAsB,QAC5B,QAAQ,OAAO,KAAK,GAAG;AAC3B;;;AC/oBA,SAA0C,oBAAoB;AAC9D,SAAS,WAAW;AAIb,SAAS,mBAAmB,UAAyB,CAAC,GAAG;AAC9D,QAAM,UAAU,IAAI,cAAc,OAAO;AAEzC,SAAO,aAAa,OAAO,KAAsB,QAAwB;AACvE,QAAI;AACF,YAAM,MAAM,IAAI,IAAI,IAAI,OAAO,KAAK,UAAU,IAAI,QAAQ,IAAI,EAAE;AAGhE,UAAI,IAAI,SAAS,WAAW,qBAAqB,GAAG;AAClD,cAAM,YAAY,IAAI,SAAS,MAAM,GAAG;AACxC,YAAI,UAAU,UAAU,GAAG;AACzB,gBAAM,QAAQ,UAAU,CAAC;AACzB,gBAAM,OAAO,UAAU,CAAC;AAExB,kBAAQ,IAAI,6BAAsB,KAAK,IAAI,IAAI,EAAE;AACjD,iBAAO,MAAM,QAAQ,aAAa,KAAK,KAAK,OAAO,IAAI;AAAA,QACzD;AAAA,MACF;AAGA,UAAI,IAAI,aAAa,eAAe;AAClC,eAAO,MAAM,QAAQ,OAAO,KAAK,GAAG;AAAA,MACtC;AAGA,UAAI,IAAI,WAAW,WAAW;AAC5B,YAAI,UAAU,KAAK;AAAA,UACjB,+BAA+B;AAAA,UAC/B,gCAAgC;AAAA,UAChC,gCAAgC;AAAA,QAClC,CAAC;AACD,YAAI,IAAI;AACR;AAAA,MACF;AAGA,UAAI,UAAU,KAAK,EAAE,gBAAgB,mBAAmB,CAAC;AACzD,UAAI,IAAI,KAAK,UAAU,EAAE,OAAO,YAAY,CAAC,CAAC;AAAA,IAEhD,SAAS,OAAO;AACd,cAAQ,MAAM,iBAAiB,KAAK;AACpC,UAAI,UAAU,KAAK,EAAE,gBAAgB,mBAAmB,CAAC;AACzD,UAAI,IAAI,KAAK,UAAU;AAAA,QACrB,OAAO,iBAAiB,QAAQ,MAAM,UAAU;AAAA,MAClD,CAAC,CAAC;AAAA,IACJ;AAAA,EACF,CAAC;AACH;","names":["path","path","EXPLORER","FILE_LINES","FINAL_ANSWER","EXPLORER","FILE_LINES","FINAL_ANSWER","spawn","fs","path","process","generic","fs","path"]}