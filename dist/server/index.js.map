{"version":3,"sources":["../../server/handler.ts","../../server/utils/cache.ts","../../server/resources/base.ts","../../server/resources/contributors.ts","../../server/resources/icons.ts","../../server/resources/repository.ts","../../server/resources/commits.ts","../../server/resources/branches.ts","../../server/resources/files.ts","../../server/resources/stats.ts","../../server/agent/repo-cloner.ts","../../server/agent/explore.ts","../../server/agent/prompts.ts","../../server/agent/tools.ts"],"sourcesContent":["import { IncomingMessage, ServerResponse } from \"http\";\nimport { Octokit } from \"@octokit/rest\";\nimport { GitSeeCache } from \"./utils/cache.js\";\nimport {\n  ContributorsResource,\n  IconsResource,\n  RepositoryResource,\n  CommitsResource,\n  BranchesResource,\n  FilesResource,\n  StatsResource,\n} from \"./resources/index.js\";\nimport { GitSeeRequest, GitSeeResponse, GitSeeOptions } from \"./types/index.js\";\nimport { RepoCloner } from \"./agent/index.js\";\n\nexport class GitSeeHandler {\n  private octokit: Octokit;\n  private cache: GitSeeCache;\n  private options: GitSeeOptions;\n\n  // Resource modules\n  private contributors: ContributorsResource;\n  private icons: IconsResource;\n  private repository: RepositoryResource;\n  private commits: CommitsResource;\n  private branches: BranchesResource;\n  private files: FilesResource;\n  private stats: StatsResource;\n\n  constructor(options: GitSeeOptions = {}) {\n    this.options = options;\n    this.octokit = new Octokit({\n      auth: options.token,\n    });\n\n    this.cache = new GitSeeCache(options.cache?.ttl);\n\n    // Initialize resource modules\n    this.contributors = new ContributorsResource(this.octokit, this.cache);\n    this.icons = new IconsResource(this.octokit, this.cache);\n    this.repository = new RepositoryResource(this.octokit, this.cache);\n    this.commits = new CommitsResource(this.octokit, this.cache);\n    this.branches = new BranchesResource(this.octokit, this.cache);\n    this.files = new FilesResource(this.octokit, this.cache);\n    this.stats = new StatsResource(this.octokit, this.cache);\n  }\n\n  async handle(req: IncomingMessage, res: ServerResponse): Promise<void> {\n    // Set CORS headers\n    res.setHeader(\"Access-Control-Allow-Origin\", \"*\");\n    res.setHeader(\"Access-Control-Allow-Methods\", \"POST, OPTIONS\");\n    res.setHeader(\"Access-Control-Allow-Headers\", \"Content-Type\");\n\n    if (req.method === \"OPTIONS\") {\n      res.writeHead(200);\n      res.end();\n      return;\n    }\n\n    if (req.method !== \"POST\") {\n      res.writeHead(405, { \"Content-Type\": \"application/json\" });\n      res.end(JSON.stringify({ error: \"Method not allowed\" }));\n      return;\n    }\n\n    try {\n      const body = await this.parseRequestBody(req);\n      const request: GitSeeRequest = JSON.parse(body);\n\n      const response = await this.processRequest(request);\n\n      res.writeHead(200, { \"Content-Type\": \"application/json\" });\n      res.end(JSON.stringify(response));\n    } catch (error) {\n      console.error(\"GitSee handler error:\", error);\n      res.writeHead(500, { \"Content-Type\": \"application/json\" });\n      res.end(\n        JSON.stringify({\n          error:\n            error instanceof Error ? error.message : \"Internal server error\",\n        })\n      );\n    }\n  }\n\n  private async parseRequestBody(req: IncomingMessage): Promise<string> {\n    return new Promise((resolve, reject) => {\n      let body = \"\";\n      req.on(\"data\", (chunk: any) => (body += chunk));\n      req.on(\"end\", () => resolve(body));\n      req.on(\"error\", reject);\n    });\n  }\n\n  private async processRequest(\n    request: GitSeeRequest\n  ): Promise<GitSeeResponse> {\n    const { owner, repo, data } = request;\n    const response: GitSeeResponse = {};\n\n    // 🚀 AGENTIC: Start background clone immediately (fire-and-forget)\n    console.log(`🔄 Starting background clone for ${owner}/${repo}...`);\n    RepoCloner.cloneInBackground(owner, repo);\n\n    // Add visualization options to response\n    if (this.options.visualization) {\n      response.options = {\n        nodeDelay: this.options.visualization.nodeDelay || 800,\n      };\n    } else {\n      // Default options\n      response.options = {\n        nodeDelay: 800,\n      };\n    }\n\n    // Validate input\n    if (!owner || !repo) {\n      throw new Error(\"Owner and repo are required\");\n    }\n\n    if (!Array.isArray(data) || data.length === 0) {\n      throw new Error(\"Data array is required and must not be empty\");\n    }\n\n    console.log(\n      `🔍 Processing request for ${owner}/${repo} with data: [${data.join(\", \")}]`\n    );\n\n    // Process each requested data type using resource modules\n    for (const dataType of data) {\n      try {\n        switch (dataType) {\n          case \"repo_info\":\n            console.log(`🔍 Fetching repository info for ${owner}/${repo}...`);\n            response.repo = await this.repository.getRepoInfo(owner, repo);\n            console.log(`📋 Repository info result: Found`);\n            break;\n\n          case \"contributors\":\n            console.log(`🔍 Fetching contributors for ${owner}/${repo}...`);\n            response.contributors = await this.contributors.getContributors(\n              owner,\n              repo\n            );\n            console.log(\n              `👥 Contributors result: ${response.contributors?.length || 0} found`\n            );\n            break;\n\n          case \"icon\":\n            console.log(`🔍 Fetching icon for ${owner}/${repo}...`);\n            response.icon = await this.icons.getRepoIcon(owner, repo);\n            console.log(\n              `📷 Icon result:`,\n              response.icon ? \"Found\" : \"Not found\"\n            );\n            break;\n\n          case \"commits\":\n            console.log(`🔍 Fetching commits for ${owner}/${repo}...`);\n            response.commits = await this.commits.getCommits(owner, repo);\n            console.log(\n              `📝 Commits result: ${response.commits?.length || 0} found`\n            );\n            break;\n\n          case \"branches\":\n            console.log(`🔍 Fetching branches for ${owner}/${repo}...`);\n            response.branches = await this.branches.getBranches(owner, repo);\n            console.log(\n              `🌿 Branches result: ${response.branches?.length || 0} found`\n            );\n            break;\n\n          case \"files\":\n            console.log(`🔍 Fetching key files for ${owner}/${repo}...`);\n            response.files = await this.files.getKeyFiles(owner, repo);\n            console.log(\n              `📁 Files result: ${response.files?.length || 0} found`\n            );\n            break;\n\n          case \"stats\":\n            console.log(`🔍 Fetching stats for ${owner}/${repo}...`);\n            response.stats = await this.stats.getRepoStats(owner, repo);\n            console.log(\n              `📊 Stats result: ${response.stats?.stars} stars, ${response.stats?.totalPRs} PRs, ${response.stats?.totalCommits} commits, ${response.stats?.ageInYears}y old`\n            );\n            break;\n\n          default:\n            console.warn(`⚠️  Unknown data type: ${dataType}`);\n        }\n      } catch (error) {\n        console.error(\n          `💥 Error processing ${dataType} for ${owner}/${repo}:`,\n          error\n        );\n        // Continue processing other data types instead of failing completely\n      }\n    }\n\n    return response;\n  }\n}\n\n// Factory function for easy integration\nexport function createGitSeeHandler(options: GitSeeOptions = {}) {\n  const handler = new GitSeeHandler(options);\n  return (req: IncomingMessage, res: ServerResponse) =>\n    handler.handle(req, res);\n}\n","interface CacheEntry {\n  data: any;\n  expires: number;\n}\n\nexport class GitSeeCache {\n  private cache = new Map<string, CacheEntry>();\n  private ttl: number;\n\n  constructor(ttl: number = 300) {\n    // 5 minutes default\n    this.ttl = ttl * 1000; // convert to ms\n  }\n\n  get(key: string): any | null {\n    const entry = this.cache.get(key);\n    if (!entry) return null;\n\n    if (Date.now() > entry.expires) {\n      this.cache.delete(key);\n      return null;\n    }\n\n    return entry.data;\n  }\n\n  set(key: string, data: any): void {\n    this.cache.set(key, {\n      data,\n      expires: Date.now() + this.ttl,\n    });\n  }\n\n  clear(): void {\n    this.cache.clear();\n  }\n}\n","import { Octokit } from \"@octokit/rest\";\nimport { GitSeeCache } from \"../utils/cache.js\";\n\nexport abstract class BaseResource {\n  protected octokit: Octokit;\n  protected cache: GitSeeCache;\n\n  constructor(octokit: Octokit, cache: GitSeeCache) {\n    this.octokit = octokit;\n    this.cache = cache;\n  }\n\n  protected getCacheKey(owner: string, repo: string, type: string): string {\n    return `${type}:${owner}/${repo}`;\n  }\n\n  protected async getCached<T>(\n    owner: string,\n    repo: string,\n    type: string,\n  ): Promise<T | undefined> {\n    const cacheKey = this.getCacheKey(owner, repo, type);\n    return this.cache.get(cacheKey);\n  }\n\n  protected setCached<T>(\n    owner: string,\n    repo: string,\n    type: string,\n    data: T,\n  ): void {\n    const cacheKey = this.getCacheKey(owner, repo, type);\n    this.cache.set(cacheKey, data);\n  }\n}\n","import { BaseResource } from \"./base.js\";\nimport { Contributor } from \"../types/index.js\";\n\nexport class ContributorsResource extends BaseResource {\n  async getContributors(owner: string, repo: string): Promise<Contributor[]> {\n    // Check cache first\n    const cached = await this.getCached<Contributor[]>(\n      owner,\n      repo,\n      \"contributors\",\n    );\n    if (cached) {\n      console.log(`💾 Cache hit for contributors: ${owner}/${repo}`);\n      return cached;\n    }\n\n    console.log(`📡 Fetching contributors for ${owner}/${repo}...`);\n\n    try {\n      const response = await this.octokit.rest.repos.listContributors({\n        owner,\n        repo,\n        per_page: 50,\n      });\n\n      const contributors = response.data as Contributor[];\n      console.log(`👥 Found ${contributors.length} contributors`);\n\n      // Cache the result\n      this.setCached(owner, repo, \"contributors\", contributors);\n\n      return contributors;\n    } catch (error: any) {\n      console.error(\n        `💥 Error fetching contributors for ${owner}/${repo}:`,\n        error.message,\n      );\n\n      // Check if it's a rate limit error\n      if (error.status === 403 || error.message?.includes(\"rate limit\")) {\n        console.error(\n          `⏱️  RATE LIMIT HIT for contributors! Using token:`,\n          !!this.octokit.auth,\n        );\n      }\n\n      throw error;\n    }\n  }\n}\n","import { BaseResource } from \"./base.js\";\n\nexport class IconsResource extends BaseResource {\n  async getRepoIcon(owner: string, repo: string): Promise<string | null> {\n    // Check cache first (null is a valid cached value)\n    const cached = await this.getCached<string | null>(owner, repo, \"icon\");\n    if (cached !== undefined) {\n      console.log(\n        `💾 Cache hit for ${owner}/${repo} icon:`,\n        cached ? \"Found\" : \"Not found\",\n      );\n      console.log(`🔄 Clearing cache to retry (checking for rate limits)...`);\n      this.cache.clear(); // Clear cache to retry\n      // Don't return cached, let it retry\n    }\n\n    console.log(`🚀 Starting fresh icon fetch for ${owner}/${repo}`);\n\n    try {\n      // Get root directory contents\n      console.log(`📁 Getting root contents for ${owner}/${repo}...`);\n      const rootContents = await this.octokit.rest.repos.getContent({\n        owner,\n        repo,\n        path: \"\",\n      });\n\n      if (!Array.isArray(rootContents.data)) {\n        console.log(`❌ Root contents not an array`);\n        this.setCached(owner, repo, \"icon\", null);\n        return null;\n      }\n\n      console.log(`📂 Found ${rootContents.data.length} files in root`);\n      // console.log(`📂 Root files:`, rootContents.data.map((f: any) => f.name).slice(0, 10));\n\n      // Look for icon files in root\n      const iconFiles = rootContents.data.filter((file: any) => {\n        const name = file.name.toLowerCase();\n        const isIcon =\n          name.includes(\"favicon\") ||\n          name.includes(\"logo\") ||\n          name.includes(\"icon\") ||\n          (name.startsWith(\"apple-touch\") && name.includes(\"icon\"));\n        if (isIcon) {\n          // console.log(`🎯 Found potential icon in root: ${file.name}`);\n        }\n        return isIcon;\n      });\n\n      console.log(`📊 Found ${iconFiles.length} icon files in root`);\n\n      // Check common subdirectories\n      const subdirs = [\"public\", \"assets\", \"static\", \"images\", \"img\"];\n      for (const subdir of subdirs) {\n        const subdirExists = rootContents.data.find(\n          (item: any) => item.name === subdir && item.type === \"dir\",\n        );\n\n        if (subdirExists) {\n          console.log(`📂 Checking ${subdir}/ directory...`);\n          try {\n            const subdirContents = await this.octokit.rest.repos.getContent({\n              owner,\n              repo,\n              path: subdir,\n            });\n\n            if (Array.isArray(subdirContents.data)) {\n              // console.log(\n              //   `📂 ${subdir}/ contents:`,\n              //   subdirContents.data.map((f: any) => f.name)\n              // );\n\n              const subdirIcons = subdirContents.data.filter((file: any) => {\n                const name = file.name.toLowerCase();\n                const isIcon =\n                  name.includes(\"favicon\") ||\n                  name.includes(\"logo\") ||\n                  name.includes(\"icon\");\n                if (isIcon) {\n                  // console.log(\n                  //   `🎯 Found potential icon in ${subdir}/: ${file.name}`\n                  // );\n                }\n                return isIcon;\n              });\n              iconFiles.push(\n                ...subdirIcons.map((f: any) => ({\n                  ...f,\n                  path: `${subdir}/${f.name}`,\n                })),\n              );\n            }\n          } catch (error) {\n            console.log(`⚠️  Could not access ${subdir}/ directory`);\n            continue;\n          }\n        }\n      }\n\n      console.log(`📊 Total icon files found: ${iconFiles.length}`);\n\n      // Sort by resolution (highest first)\n      const sortedIcons = this.sortIconsByResolution(iconFiles);\n      // console.log(\n      //   \"🏆 Sorted icon priority:\",\n      //   sortedIcons.map((f) => f.path || f.name)\n      // );\n\n      // Try to fetch the best icon\n      for (const iconFile of sortedIcons) {\n        const filePath = iconFile.path || iconFile.name;\n        console.log(`📥 Attempting to fetch: ${filePath}`);\n\n        try {\n          const iconResponse = await this.octokit.rest.repos.getContent({\n            owner,\n            repo,\n            path: filePath,\n          });\n\n          if (\"content\" in iconResponse.data && iconResponse.data.content) {\n            const iconData = `data:image/png;base64,${iconResponse.data.content}`;\n            console.log(`✅ Successfully loaded icon: ${filePath}`);\n            console.log(`📊 Icon data length: ${iconData.length} chars`);\n\n            // Cache the result\n            this.setCached(owner, repo, \"icon\", iconData);\n            return iconData;\n          } else {\n            console.log(`❌ No content in response for: ${filePath}`);\n          }\n        } catch (error) {\n          console.log(`❌ Failed to load: ${filePath}`);\n          continue;\n        }\n      }\n\n      console.log(\"❌ No icons could be loaded\");\n      this.setCached(owner, repo, \"icon\", null);\n      return null;\n    } catch (error: any) {\n      console.error(`💥 ERROR fetching repo icon for ${owner}/${repo}:`, error);\n\n      // Check if it's a rate limit error\n      if (error.status === 403 || error.message?.includes(\"rate limit\")) {\n        console.error(`⏱️  RATE LIMIT HIT! Error:`, error.message);\n        console.error(`🔑 Using token:`, !!this.octokit.auth);\n      }\n\n      this.setCached(owner, repo, \"icon\", null);\n      return null;\n    }\n  }\n\n  private sortIconsByResolution(iconFiles: any[]): any[] {\n    return iconFiles.sort((a, b) => {\n      const aName = a.name.toLowerCase();\n      const bName = b.name.toLowerCase();\n\n      const getResolution = (name: string) => {\n        const match = name.match(/(\\d+)x\\d+/);\n        if (match) return parseInt(match[1]);\n\n        if (name.includes(\"512\")) return 512;\n        if (name.includes(\"256\")) return 256;\n        if (name.includes(\"192\")) return 192;\n        if (name.includes(\"180\")) return 180;\n        if (name.includes(\"apple-touch\")) return 180;\n        if (name.includes(\"android-chrome\")) return 192;\n        if (name === \"favicon.ico\") return 64;\n        if (name.includes(\"logo\")) return 100;\n\n        return 50;\n      };\n\n      return getResolution(bName) - getResolution(aName); // Higher first\n    });\n  }\n}\n","import { BaseResource } from \"./base.js\";\nimport { Repository } from \"../types/index.js\";\n\nexport class RepositoryResource extends BaseResource {\n  async getRepoInfo(owner: string, repo: string): Promise<Repository> {\n    // Check cache first\n    const cached = await this.getCached<Repository>(owner, repo, \"repo\");\n    if (cached) {\n      console.log(`💾 Cache hit for repo info: ${owner}/${repo}`);\n      return cached;\n    }\n\n    console.log(`📡 Fetching repository info for ${owner}/${repo}...`);\n\n    try {\n      const response = await this.octokit.rest.repos.get({ owner, repo });\n      const repoData = response.data as Repository;\n\n      console.log(`📋 Repository info loaded: ${repoData.full_name}`);\n\n      // Cache the result\n      this.setCached(owner, repo, \"repo\", repoData);\n\n      return repoData;\n    } catch (error: any) {\n      console.error(\n        `💥 Error fetching repository info for ${owner}/${repo}:`,\n        error.message,\n      );\n\n      // Check if it's a rate limit error\n      if (error.status === 403 || error.message?.includes(\"rate limit\")) {\n        console.error(\n          `⏱️  RATE LIMIT HIT for repository! Using token:`,\n          !!this.octokit.auth,\n        );\n      }\n\n      throw error;\n    }\n  }\n}\n","import { BaseResource } from \"./base.js\";\nimport { Commit } from \"../types/index.js\";\n\nexport class CommitsResource extends BaseResource {\n  async getCommits(owner: string, repo: string): Promise<Commit[]> {\n    // Check cache first\n    const cached = await this.getCached<Commit[]>(owner, repo, \"commits\");\n    if (cached) {\n      console.log(`💾 Cache hit for commits: ${owner}/${repo}`);\n      return cached;\n    }\n\n    console.log(`📡 Fetching commits for ${owner}/${repo}...`);\n\n    try {\n      const response = await this.octokit.rest.repos.listCommits({\n        owner,\n        repo,\n        per_page: 50,\n      });\n\n      const commits = response.data as Commit[];\n      console.log(`📝 Found ${commits.length} commits`);\n\n      // Cache the result\n      this.setCached(owner, repo, \"commits\", commits);\n\n      return commits;\n    } catch (error: any) {\n      console.error(\n        `💥 Error fetching commits for ${owner}/${repo}:`,\n        error.message,\n      );\n\n      // Check if it's a rate limit error\n      if (error.status === 403 || error.message?.includes(\"rate limit\")) {\n        console.error(\n          `⏱️  RATE LIMIT HIT for commits! Using token:`,\n          !!this.octokit.auth,\n        );\n      }\n\n      throw error;\n    }\n  }\n}\n","import { BaseResource } from \"./base.js\";\nimport { Branch } from \"../types/index.js\";\n\nexport class BranchesResource extends BaseResource {\n  async getBranches(owner: string, repo: string): Promise<Branch[]> {\n    // Check cache first\n    const cached = await this.getCached<Branch[]>(owner, repo, \"branches\");\n    if (cached) {\n      console.log(`💾 Cache hit for branches: ${owner}/${repo}`);\n      return cached;\n    }\n\n    console.log(`📡 Fetching branches for ${owner}/${repo}...`);\n\n    try {\n      const response = await this.octokit.rest.repos.listBranches({\n        owner,\n        repo,\n      });\n\n      const branches = response.data as Branch[];\n      console.log(`🌿 Found ${branches.length} branches`);\n\n      // Cache the result\n      this.setCached(owner, repo, \"branches\", branches);\n\n      return branches;\n    } catch (error: any) {\n      console.error(\n        `💥 Error fetching branches for ${owner}/${repo}:`,\n        error.message,\n      );\n\n      // Check if it's a rate limit error\n      if (error.status === 403 || error.message?.includes(\"rate limit\")) {\n        console.error(\n          `⏱️  RATE LIMIT HIT for branches! Using token:`,\n          !!this.octokit.auth,\n        );\n      }\n\n      throw error;\n    }\n  }\n}\n","import { BaseResource } from \"./base.js\";\n\nexport interface FileInfo {\n  name: string;\n  path: string;\n  type: \"package\" | \"config\" | \"docs\" | \"build\" | \"ci\" | \"data\" | \"other\";\n}\n\nexport class FilesResource extends BaseResource {\n  async getKeyFiles(owner: string, repo: string): Promise<FileInfo[]> {\n    // Check cache first\n    const cached = await this.getCached<FileInfo[]>(owner, repo, \"files\");\n    if (cached) {\n      console.log(\"📁 Using cached files data\");\n      return cached;\n    }\n\n    console.log(`🔍 Fetching key files for ${owner}/${repo}...`);\n\n    // Comprehensive list of key files to check for\n    const candidateFiles = [\n      // Package managers\n      { name: \"package.json\", type: \"package\" as const },\n      { name: \"Cargo.toml\", type: \"package\" as const },\n      { name: \"go.mod\", type: \"package\" as const },\n      { name: \"setup.py\", type: \"package\" as const },\n      { name: \"requirements.txt\", type: \"package\" as const },\n      { name: \"pyproject.toml\", type: \"package\" as const },\n      { name: \"pom.xml\", type: \"package\" as const },\n      { name: \"build.gradle\", type: \"package\" as const },\n      { name: \"build.gradle.kts\", type: \"package\" as const },\n      { name: \"composer.json\", type: \"package\" as const },\n      { name: \"Gemfile\", type: \"package\" as const },\n      { name: \"pubspec.yaml\", type: \"package\" as const },\n\n      // Documentation\n      { name: \"README.md\", type: \"docs\" as const },\n      { name: \"readme.md\", type: \"docs\" as const },\n      { name: \"README.txt\", type: \"docs\" as const },\n      { name: \"README.rst\", type: \"docs\" as const },\n      { name: \"ARCHITECTURE.md\", type: \"docs\" as const },\n      { name: \"CONTRIBUTING.md\", type: \"docs\" as const },\n      { name: \"ROADMAP.md\", type: \"docs\" as const },\n      { name: \"API.md\", type: \"docs\" as const },\n      { name: \"CLAUDE.md\", type: \"docs\" as const },\n      { name: \"AGENTS.md\", type: \"docs\" as const },\n\n      // Configuration files\n      { name: \".env.example\", type: \"config\" as const },\n\n      // Database & schemas\n      { name: \"prisma/schema.prisma\", type: \"data\" as const },\n      { name: \"schema.prisma\", type: \"data\" as const },\n      { name: \"schema.sql\", type: \"data\" as const },\n      { name: \"migrations.sql\", type: \"data\" as const },\n      { name: \"seeds.sql\", type: \"data\" as const },\n\n      // Docker & deployment\n      { name: \"Dockerfile\", type: \"build\" as const },\n      { name: \"docker-compose.yml\", type: \"build\" as const },\n      { name: \"docker-compose.yaml\", type: \"build\" as const },\n      { name: \"Makefile\", type: \"build\" as const },\n      { name: \"justfile\", type: \"build\" as const },\n      { name: \"CMakeLists.txt\", type: \"build\" as const },\n\n      // Other important files\n      { name: \"LICENSE\", type: \"other\" as const },\n      { name: \"LICENSE.md\", type: \"other\" as const },\n      { name: \"LICENSE.txt\", type: \"other\" as const },\n      { name: \"CODEOWNERS\", type: \"other\" as const },\n      { name: \".github/CODEOWNERS\", type: \"other\" as const },\n    ];\n\n    const foundFiles: FileInfo[] = [];\n\n    // Check all candidate files in parallel for much faster execution\n    const fileCheckPromises = candidateFiles.map(async (candidate) => {\n      try {\n        await this.octokit.repos.getContent({\n          owner,\n          repo,\n          path: candidate.name,\n        });\n\n        console.log(`✅ Found file: ${candidate.name}`);\n        return {\n          name: candidate.name,\n          path: candidate.name,\n          type: candidate.type,\n        };\n      } catch (error: any) {\n        // File doesn't exist - that's fine, return null\n        if (error.status !== 404) {\n          console.warn(`⚠️ Error checking ${candidate.name}:`, error.message);\n        }\n        return null;\n      }\n    });\n\n    // Wait for all checks to complete and filter out null results\n    const results = await Promise.all(fileCheckPromises);\n    foundFiles.push(...results.filter((file) => file !== null));\n\n    console.log(`📁 Found ${foundFiles.length} key files in ${owner}/${repo}`);\n\n    // Cache the results\n    this.setCached(owner, repo, \"files\", foundFiles);\n\n    return foundFiles;\n  }\n}\n","import { BaseResource } from \"./base.js\";\nimport { RepoStats } from \"../types/index.js\";\n\nexport class StatsResource extends BaseResource {\n  async getRepoStats(owner: string, repo: string): Promise<RepoStats> {\n    // Check cache first\n    const cached = await this.getCached<RepoStats>(owner, repo, \"stats\");\n    if (cached) {\n      console.log('📊 Using cached stats data');\n      return cached;\n    }\n\n    console.log(`🔍 Fetching stats for ${owner}/${repo}...`);\n\n    try {\n      // Fetch repository basic info (includes stars and creation date)\n      const repoResponse = await this.octokit.rest.repos.get({\n        owner,\n        repo\n      });\n\n      const repoData = repoResponse.data;\n      \n      // Get total PRs count\n      const prsResponse = await this.octokit.rest.search.issuesAndPullRequests({\n        q: `repo:${owner}/${repo} type:pr`,\n        per_page: 1 // We only need the count\n      });\n\n      // Get total commits count (approximate from contributors API which is faster than paginating all commits)\n      const contributorsResponse = await this.octokit.rest.repos.listContributors({\n        owner,\n        repo,\n        per_page: 100 // Get up to 100 contributors\n      });\n\n      // Sum up all contributions to get approximate total commits\n      const totalCommits = contributorsResponse.data.reduce((sum, contributor) => {\n        return sum + (contributor.contributions || 0);\n      }, 0);\n\n      // Calculate age in years\n      const createdDate = new Date(repoData.created_at);\n      const now = new Date();\n      const ageInYears = Math.round((now.getTime() - createdDate.getTime()) / (365.25 * 24 * 60 * 60 * 1000) * 10) / 10; // Round to 1 decimal\n\n      const stats: RepoStats = {\n        stars: repoData.stargazers_count,\n        totalPRs: prsResponse.data.total_count,\n        totalCommits: totalCommits,\n        ageInYears: ageInYears\n      };\n\n      console.log(`📊 Stats for ${owner}/${repo}:`, {\n        stars: stats.stars,\n        totalPRs: stats.totalPRs,\n        totalCommits: stats.totalCommits,\n        ageInYears: stats.ageInYears\n      });\n\n      // Cache the results\n      this.setCached(owner, repo, \"stats\", stats);\n\n      return stats;\n    } catch (error: any) {\n      console.error(`💥 Error fetching stats for ${owner}/${repo}:`, error.message);\n      \n      // Check if it's a rate limit error\n      if (error.status === 403 || error.message?.includes(\"rate limit\")) {\n        console.error(`⏱️  RATE LIMIT HIT for stats! Using token:`, !!this.octokit.auth);\n      }\n      \n      throw error;\n    }\n  }\n}","import { spawn } from 'child_process';\nimport * as fs from 'fs';\nimport * as path from 'path';\n\nexport interface CloneResult {\n  success: boolean;\n  path: string;\n  error?: string;\n  duration?: number;\n}\n\nexport class RepoCloner {\n  private static readonly BASE_PATH = '/tmp/gitsee';\n  \n  /**\n   * Clone a repository in the background (fire-and-forget)\n   */\n  static async cloneInBackground(owner: string, repo: string): Promise<void> {\n    // Don't await - let it run in background\n    this.cloneRepo(owner, repo).catch(error => {\n      console.error(`🚨 Background clone failed for ${owner}/${repo}:`, error.message);\n    });\n  }\n  \n  /**\n   * Clone a repository to /tmp/gitsee/{owner}/{repo}\n   */\n  static async cloneRepo(owner: string, repo: string): Promise<CloneResult> {\n    const startTime = Date.now();\n    const repoPath = path.join(this.BASE_PATH, owner, repo);\n    const githubUrl = `https://github.com/${owner}/${repo}.git`;\n    \n    console.log(`📥 Starting clone of ${owner}/${repo} to ${repoPath}`);\n    \n    try {\n      // Check if already exists\n      if (fs.existsSync(repoPath)) {\n        console.log(`📂 Repository ${owner}/${repo} already exists at ${repoPath}`);\n        return {\n          success: true,\n          path: repoPath,\n          duration: Date.now() - startTime\n        };\n      }\n      \n      // Ensure parent directory exists\n      const parentDir = path.dirname(repoPath);\n      fs.mkdirSync(parentDir, { recursive: true });\n      \n      // Clone with shallow copy (depth 1) and single branch for speed\n      const result = await this.executeGitClone(githubUrl, repoPath);\n      \n      const duration = Date.now() - startTime;\n      \n      if (result.success) {\n        console.log(`✅ Successfully cloned ${owner}/${repo} in ${duration}ms`);\n        return {\n          success: true,\n          path: repoPath,\n          duration\n        };\n      } else {\n        console.error(`❌ Failed to clone ${owner}/${repo}:`, result.error);\n        return {\n          success: false,\n          path: repoPath,\n          error: result.error,\n          duration\n        };\n      }\n      \n    } catch (error: any) {\n      const duration = Date.now() - startTime;\n      console.error(`💥 Clone error for ${owner}/${repo}:`, error.message);\n      \n      return {\n        success: false,\n        path: repoPath,\n        error: error.message,\n        duration\n      };\n    }\n  }\n  \n  /**\n   * Execute git clone command with shallow clone and single branch\n   */\n  private static executeGitClone(githubUrl: string, targetPath: string): Promise<{success: boolean, error?: string}> {\n    return new Promise((resolve) => {\n      // Use shallow clone with single branch for maximum speed\n      const gitProcess = spawn('git', [\n        'clone',\n        '--depth', '1',           // Shallow clone (only latest commit)\n        '--single-branch',        // Only clone the default branch\n        '--no-tags',              // Skip tags for speed\n        githubUrl,\n        targetPath\n      ]);\n      \n      let errorOutput = '';\n      \n      gitProcess.stderr.on('data', (data) => {\n        errorOutput += data.toString();\n      });\n      \n      gitProcess.stdout.on('data', (data) => {\n        // Git clone sends progress to stderr, but we can capture stdout too\n        const output = data.toString();\n        if (output.includes('Cloning') || output.includes('Receiving')) {\n          console.log(`📥 ${output.trim()}`);\n        }\n      });\n      \n      gitProcess.on('close', (code) => {\n        if (code === 0) {\n          resolve({ success: true });\n        } else {\n          resolve({ \n            success: false, \n            error: errorOutput || `Git clone exited with code ${code}` \n          });\n        }\n      });\n      \n      gitProcess.on('error', (error) => {\n        resolve({ \n          success: false, \n          error: `Failed to start git process: ${error.message}` \n        });\n      });\n    });\n  }\n  \n  /**\n   * Check if a repository is already cloned\n   */\n  static isRepoCloned(owner: string, repo: string): boolean {\n    const repoPath = path.join(this.BASE_PATH, owner, repo);\n    return fs.existsSync(repoPath) && fs.existsSync(path.join(repoPath, '.git'));\n  }\n  \n  /**\n   * Get the local path for a repository\n   */\n  static getRepoPath(owner: string, repo: string): string {\n    return path.join(this.BASE_PATH, owner, repo);\n  }\n  \n  /**\n   * Clean up old repositories (optional utility)\n   */\n  static async cleanupOldRepos(maxAgeHours: number = 24): Promise<void> {\n    try {\n      if (!fs.existsSync(this.BASE_PATH)) {\n        return;\n      }\n      \n      const cutoffTime = Date.now() - (maxAgeHours * 60 * 60 * 1000);\n      \n      // Walk through /tmp/gitsee/{owner}/{repo} directories\n      const owners = fs.readdirSync(this.BASE_PATH);\n      \n      for (const owner of owners) {\n        const ownerPath = path.join(this.BASE_PATH, owner);\n        if (!fs.statSync(ownerPath).isDirectory()) continue;\n        \n        const repos = fs.readdirSync(ownerPath);\n        \n        for (const repo of repos) {\n          const repoPath = path.join(ownerPath, repo);\n          const stats = fs.statSync(repoPath);\n          \n          if (stats.isDirectory() && stats.mtime.getTime() < cutoffTime) {\n            console.log(`🗑️ Cleaning up old repo: ${owner}/${repo}`);\n            fs.rmSync(repoPath, { recursive: true, force: true });\n          }\n        }\n      }\n      \n    } catch (error: any) {\n      console.error('Error cleaning up old repos:', error.message);\n    }\n  }\n}","import { generateText, tool, hasToolCall, ModelMessage } from \"ai\";\nimport { getModel, getApiKeyForProvider, Provider } from \"aieo\";\nimport * as prompts from \"./prompts\";\nimport { z } from \"zod\";\nimport { getRepoMap, getFileSummary, fulltextSearch } from \"./tools\";\n\nfunction logStep(contents: any) {\n  if (!Array.isArray(contents)) return;\n  for (const content of contents) {\n    if (content.type === \"tool-call\" && content.toolName !== \"final_answer\") {\n      console.log(\"TOOL CALL:\", content.toolName, \":\", content.input);\n    }\n  }\n}\n\nexport type RepoContextMode = \"first_pass\" | \"general\";\n\ninterface ContextConfig {\n  file_lines: number;\n  final_answer_description: string;\n  system: string;\n}\n\nconst CONFIG: Record<RepoContextMode, ContextConfig> = {\n  first_pass: {\n    file_lines: 100,\n    system: prompts.FIRST_PASS_EXPLORER,\n    final_answer_description: prompts.FIRST_PASS_FINAL_ANSWER_DESCRIPTION,\n  },\n  general: {\n    file_lines: 40,\n    system: prompts.GENERAL_EXPLORER,\n    final_answer_description: prompts.GENERAL_FINAL_ANSWER_DESCRIPTION,\n  },\n};\n\nexport interface GeneralContextResult {\n  summary: string;\n  key_files: string[];\n  features: string[];\n}\n\nexport interface FirstPassContextResult {\n  summary: string;\n  key_files: string[];\n  infrastructure: string[];\n  dependencies: string[];\n  user_stories: string[];\n  pages: string[];\n}\n\nexport async function get_context(\n  prompt: string | ModelMessage[],\n  repoPath: string,\n  mode: RepoContextMode = \"general\"\n): Promise<string> {\n  const startTime = Date.now();\n\n  const provider = process.env.LLM_PROVIDER || \"anthropic\";\n  const apiKey = getApiKeyForProvider(provider);\n  const model = await getModel(provider as Provider, apiKey as string);\n  const tools = {\n    repo_overview: tool({\n      description:\n        \"Get a high-level view of the codebase architecture and structure. Use this to understand the project layout and identify where specific functionality might be located. Call this when you need to: 1) Orient yourself in an unfamiliar codebase, 2) Locate which directories/files might contain relevant code for a user's question, 3) Understand the overall project structure before diving deeper. Don't call this if you already know which specific files you need to examine.\",\n      inputSchema: z.object({}),\n      execute: async () => {\n        try {\n          return await getRepoMap(repoPath);\n        } catch (e) {\n          return \"Could not retrieve repository map\";\n        }\n      },\n    }),\n    file_summary: tool({\n      description:\n        \"Get a summary of what a specific file contains and its role in the codebase. Use this when you have identified a potentially relevant file and need to understand: 1) What functions/components it exports, 2) What its main responsibility is, 3) Whether it's worth exploring further for the user's question. Only the first 40-100 lines of the file will be returned. Call this with a hypothesis like 'This file probably handles user authentication' or 'This looks like the main dashboard component'. Don't call this to browse random files.\",\n      inputSchema: z.object({\n        file_path: z.string().describe(\"Path to the file to summarize\"),\n        hypothesis: z\n          .string()\n          .describe(\n            \"What you think this file might contain or handle, based on its name/location\"\n          ),\n      }),\n      execute: async ({ file_path }: { file_path: string }) => {\n        try {\n          return getFileSummary(file_path, repoPath, CONFIG[mode].file_lines);\n        } catch (e) {\n          return \"Bad file path\";\n        }\n      },\n    }),\n    fulltext_search: tool({\n      description:\n        \"Search the entire codebase for a specific term. Use this when you need to find a specific function, component, or file. Call this when the user provided specific text that might be present in the codebase. For example, if the query is 'Add a subtitle to the User Journeys page', you could call this with the query \\\"User Journeys\\\". Don't call this if you do not have specific text to search for\",\n      inputSchema: z.object({\n        query: z.string().describe(\"The term to search for\"),\n      }),\n      execute: async ({ query }: { query: string }) => {\n        try {\n          return await fulltextSearch(query, repoPath);\n        } catch (e) {\n          return `Search failed: ${e}`;\n        }\n      },\n    }),\n    final_answer: tool({\n      // The tool that signals the end of the process\n      description: CONFIG[mode].final_answer_description,\n      inputSchema: z.object({ answer: z.string() }),\n      execute: async ({ answer }: { answer: string }) => answer,\n    }),\n  };\n  if (mode === \"first_pass\") {\n    delete (tools as Record<string, any>).fulltext_search;\n  }\n  const { steps } = await generateText({\n    model,\n    tools,\n    prompt,\n    system: CONFIG[mode].system,\n    stopWhen: hasToolCall(\"final_answer\"),\n    onStepFinish: (sf) => logStep(sf.content),\n  });\n  let final = \"\";\n  let lastText = \"\";\n  for (const step of steps) {\n    for (const item of step.content) {\n      if (item.type === \"text\" && item.text && item.text.trim().length > 0) {\n        lastText = item.text.trim();\n      }\n    }\n  }\n  steps.reverse();\n  for (const step of steps) {\n    // console.log(\"step\", JSON.stringify(step.content, null, 2));\n    const final_answer = step.content.find((c) => {\n      return c.type === \"tool-result\" && c.toolName === \"final_answer\";\n    });\n    if (final_answer) {\n      final = (final_answer as any).output;\n    }\n  }\n  if (!final && lastText) {\n    console.warn(\n      \"No final_answer tool call detected; falling back to last reasoning text.\"\n    );\n    final = `${lastText}\\n\\n(Note: Model did not invoke final_answer tool; using last reasoning text as answer.)`;\n  }\n\n  const endTime = Date.now();\n  const duration = endTime - startTime;\n  console.log(\n    `⏱️ get_context completed in ${duration}ms (${(duration / 1000).toFixed(2)}s)`\n  );\n\n  return final;\n}\n\nsetTimeout(() => {\n  return;\n  get_context(\n    \"What are the key features of this codebase?\",\n    \"/Users/evanfeenstra/code/sphinx2/hive\",\n    \"first_pass\"\n  ).then((result) => {\n    console.log(\"Context:\", result);\n  });\n});\n\n// infra, dependencies/integratins, user stories, pages\n","export const FIRST_PASS_EXPLORER = `\nYou are a codebase exploration assistant. Use the provided tools to quickly explore the codebase and get a high-level understanding. DONT GO DEEP. Focus on general language and framework, specific core libraries, integrations, and features. Try to understand the main user story of the codebase just by looking at the file structure. YOU NEED TO RETURN AN ANSWER AS FAST AS POSSIBLE! So the best approach is 3-4 tool calls only: 1) repo_overview 2) file_summary of the package.json (or other main package file), 3) The main router file of page/endpoint names, ONLY if you can identify it first try, and 4) final_answer. DO NOT GO DEEPER THAN THIS.\n`;\n\nexport const FIRST_PASS_FINAL_ANSWER_DESCRIPTION = `\nProvide the final answer to the user. YOU **MUST** CALL THIS TOOL AT THE END OF YOUR EXPLORATION.\n\nReturn a simple JSON object with the following fields:\n\n- \"summary\": a SHORT 1-2 sentence synopsis of the codebase.\n- \"key_files\": an array of a few core package and LLM agent files. Focus on package files like package.json, and core markdown files. DO NOT include code files unless they are central to the codebase, such as the main DB schema file.\n- \"infrastructure\"/\"dependencies\"/\"user_stories\"/\"pages\": short arrays of core elements of the application,: 1-2 words each. Include just a few dependencies, ONLY if it seems like they are central to the application. Try to find the main user flows and pages just by looking at file names, or a couple file contents. In total try to target 10-12 items for these four categories. Get at least one in each category, but don't make anything up!\n\n{\n  \"summary\": \"This is a next.js project with a postgres database and a github oauth implementation\",\n  \"key_files\": [\"package.json\", \"README.md\", \"CLAUDE.md\", \"AGENTS.md\", \"schema.prisma\"],\n  \"infrastructure\": [\"Next.js\", \"Postgres\", \"Typescript\"],\n  \"dependencies\": [\"Github Integration\", \"D3.js\", \"React\"],\n  \"user_stories\": [\"Authentication\", \"Payments\"],\n  \"pages\": [\"User Journeys page\", \"Admin Dashboard\"]\n}\n`;\n\nexport const GENERAL_EXPLORER = `\nYou are a codebase exploration assistant. Use the provided tools to explore the codebase and answer the user's question. Focus on general language and framework first, then specific core libraries, integrations, and features. Try to understand the core functionallity (user stories) of the codebase. Explore files, functions, and component names to understand the main user stories, pages, UX components, or workflows in the application.\n`;\n\nexport const GENERAL_FINAL_ANSWER_DESCRIPTION = `\nProvide the final answer to the user. YOU **MUST** CALL THIS TOOL AT THE END OF YOUR EXPLORATION.\n\nReturn a simple JSON object with the following fields:\n\n- \"summary\": a 1-4 sentence short synopsis of the codebase.\n- \"key_files\": an array of the core package and LLM agent files. Focus on package files like package.json, and core markdown files. DO NOT include code files unless they are central to the codebase, such as the main DB schema file.\n- \"features\": an array of about 20 core user stories or pages, 1-4 words each. Each one should be focused on ONE SINGLE user action... DO NOT flesh these out for not reason!! Keep them short and to the point BUT SPECIFIC, NOT GENERAL! For example \"Github Integration\" and \"Google Oauth Login\" are separate, not one \"Integrations\".\n\n{\n  \"summary\": \"This is a next.js project with a postgres database and a github oauth implementation\",\n  \"key_files\": [\"package.json\", \"README.md\", \"CLAUDE.md\", \"AGENTS.md\", \"schema.prisma\"],\n  \"features\": [\"Authentication\", \"User Journeys page\", \"Payments\", \"Admin Dashboard\", \"Notifications\", \"User Profile\", \"Settings page\", \"Data Visualization\", \"Github Integration\", \"File Uploads\", \"Search Functionality\", \"Real-time Collaboration Tools\", \"Activity Logs\", \"Billing and Subscription Management\", \"Help and Support\"]\n}\n`;\n","import { spawn } from \"child_process\";\nimport * as fs from \"fs\";\nimport * as path from \"path\";\n\n// Execute ripgrep commands with proper streaming\nfunction execCommand(\n  command: string,\n  cwd: string,\n  timeoutMs: number = 10000\n): Promise<string> {\n  return new Promise((resolve, reject) => {\n    // Parse the ripgrep command and add explicit directory\n    const parts = command.split(\" \");\n    const rgIndex = parts.findIndex(\n      (part) => part === \"rg\" || part.endsWith(\"/rg\")\n    );\n\n    if (rgIndex === -1) {\n      reject(new Error(\"Not a ripgrep command\"));\n      return;\n    }\n\n    // Build ripgrep arguments properly, removing quotes and adding explicit directory\n    const args = parts.slice(rgIndex + 1).map((arg) => {\n      // Remove surrounding quotes (both single and double)\n      if (\n        (arg.startsWith('\"') && arg.endsWith('\"')) ||\n        (arg.startsWith(\"'\") && arg.endsWith(\"'\"))\n      ) {\n        return arg.slice(1, -1);\n      }\n      return arg;\n    });\n    args.push(\"./\"); // Add explicit directory to prevent stdin detection issues\n\n    const process = spawn(\"rg\", args, {\n      cwd,\n      stdio: [\"ignore\", \"pipe\", \"pipe\"],\n    });\n\n    let stdout = \"\";\n    let stderr = \"\";\n    let resolved = false;\n\n    // Set up timeout\n    const timeout = setTimeout(() => {\n      if (!resolved) {\n        process.kill(\"SIGKILL\");\n        resolved = true;\n        reject(new Error(`Command timed out after ${timeoutMs}ms`));\n      }\n    }, timeoutMs);\n\n    process.stdout.on(\"data\", (data) => {\n      stdout += data.toString();\n\n      // Safety check: if output gets too large, kill process and resolve\n      if (stdout.length > 10000) {\n        process.kill(\"SIGKILL\");\n        if (!resolved) {\n          resolved = true;\n          clearTimeout(timeout);\n          const truncated =\n            stdout.substring(0, 10000) +\n            \"\\n\\n[... output truncated due to size limit ...]\";\n          resolve(truncated);\n        }\n        return;\n      }\n    });\n\n    process.stderr.on(\"data\", (data) => {\n      stderr += data.toString();\n    });\n\n    process.on(\"close\", (code) => {\n      if (!resolved) {\n        resolved = true;\n        clearTimeout(timeout);\n\n        if (code === 0) {\n          if (stdout.length > 10000) {\n            const truncated =\n              stdout.substring(0, 10000) +\n              \"\\n\\n[... output truncated to 10,000 characters ...]\";\n            resolve(truncated);\n          } else {\n            resolve(stdout);\n          }\n        } else if (code === 1) {\n          // ripgrep returns exit code 1 when no matches found\n          resolve(\"No matches found\");\n        } else {\n          reject(new Error(`Command failed with code ${code}: ${stderr}`));\n        }\n      }\n    });\n\n    process.on(\"error\", (error) => {\n      if (!resolved) {\n        resolved = true;\n        clearTimeout(timeout);\n        reject(error);\n      }\n    });\n  });\n}\n\n// Get repository map using git ls-tree and tree\nexport async function getRepoMap(repoPath: string): Promise<string> {\n  if (!repoPath) {\n    return \"No repository path provided\";\n  }\n\n  if (!fs.existsSync(repoPath)) {\n    return \"Repository not cloned yet\";\n  }\n\n  try {\n    const result = await execCommand(\n      \"git ls-tree -r --name-only HEAD | tree -L 3 --fromfile\",\n      repoPath\n    );\n    return result;\n  } catch (error: any) {\n    return `Error getting repo map: ${error.message}`;\n  }\n}\n\n// Get file summary by reading first 40 lines\nexport function getFileSummary(\n  filePath: string,\n  repoPath: string,\n  linesLimit: number\n): string {\n  if (!repoPath) {\n    return \"No repository path provided\";\n  }\n\n  const fullPath = path.join(repoPath, filePath);\n\n  if (!fs.existsSync(fullPath)) {\n    return \"File not found\";\n  }\n\n  try {\n    const content = fs.readFileSync(fullPath, \"utf-8\");\n    const lines = content\n      .split(\"\\n\")\n      .slice(0, linesLimit || 40)\n      .map((line) => {\n        // Limit each line to 200 characters to handle minified files\n        return line.length > 200 ? line.substring(0, 200) + \"...\" : line;\n      });\n\n    return lines.join(\"\\n\");\n  } catch (error: any) {\n    return `Error reading file: ${error.message}`;\n  }\n}\n\n// Fulltext search using ripgrep\nexport async function fulltextSearch(\n  query: string,\n  repoPath: string\n): Promise<string> {\n  if (!repoPath) {\n    return \"No repository path provided\";\n  }\n\n  if (!fs.existsSync(repoPath)) {\n    return \"Repository not cloned yet\";\n  }\n\n  try {\n    const result = await execCommand(\n      `rg --glob '!dist' --ignore-file .gitignore -C 2 -n --max-count 10 --max-columns 200 \"${query}\"`,\n      repoPath,\n      5000\n    );\n\n    // Limit the result to 10,000 characters to prevent overwhelming output\n    if (result.length > 10000) {\n      return (\n        result.substring(0, 10000) +\n        \"\\n\\n[... output truncated to 10,000 characters ...]\"\n      );\n    }\n\n    return result;\n  } catch (error: any) {\n    // Ripgrep returns exit code 1 when no matches found, which is not really an error\n    if (error.message.includes(\"code 1\")) {\n      return `No matches found for \"${query}\"`;\n    }\n    return `Error searching: ${error.message}`;\n  }\n}\n"],"mappings":"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","names":["spawn","fs","path","process"]}