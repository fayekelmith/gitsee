{"version":3,"sources":["../../server/index.ts"],"sourcesContent":["import { IncomingMessage, ServerResponse } from \"http\";\nimport { Octokit } from \"@octokit/rest\";\n\ninterface GitSeeRequest {\n  owner: string;\n  repo: string;\n  data: (\"contributors\" | \"icon\" | \"repo_info\" | \"commits\" | \"branches\")[];\n}\n\ninterface GitSeeResponse {\n  repo?: any;\n  contributors?: any[];\n  icon?: string | null;\n  commits?: any[];\n  branches?: any[];\n  error?: string;\n}\n\ninterface GitSeeOptions {\n  token?: string;\n  cache?: {\n    ttl?: number; // seconds\n  };\n}\n\n// Simple in-memory cache\ninterface CacheEntry {\n  data: any;\n  expires: number;\n}\n\nclass GitSeeCache {\n  private cache = new Map<string, CacheEntry>();\n  private ttl: number;\n\n  constructor(ttl: number = 300) {\n    // 5 minutes default\n    this.ttl = ttl * 1000; // convert to ms\n  }\n\n  get(key: string): any | null {\n    const entry = this.cache.get(key);\n    if (!entry) return null;\n\n    if (Date.now() > entry.expires) {\n      this.cache.delete(key);\n      return null;\n    }\n\n    return entry.data;\n  }\n\n  set(key: string, data: any): void {\n    this.cache.set(key, {\n      data,\n      expires: Date.now() + this.ttl,\n    });\n  }\n\n  clear(): void {\n    this.cache.clear();\n  }\n}\n\nexport class GitSeeHandler {\n  private octokit: Octokit;\n  private cache: GitSeeCache;\n\n  constructor(options: GitSeeOptions = {}) {\n    this.octokit = new Octokit({\n      auth: options.token,\n    });\n\n    this.cache = new GitSeeCache(options.cache?.ttl);\n  }\n\n  async handle(req: IncomingMessage, res: ServerResponse): Promise<void> {\n    // Set CORS headers\n    res.setHeader(\"Access-Control-Allow-Origin\", \"*\");\n    res.setHeader(\"Access-Control-Allow-Methods\", \"POST, OPTIONS\");\n    res.setHeader(\"Access-Control-Allow-Headers\", \"Content-Type\");\n\n    if (req.method === \"OPTIONS\") {\n      res.writeHead(200);\n      res.end();\n      return;\n    }\n\n    if (req.method !== \"POST\") {\n      res.writeHead(405, { \"Content-Type\": \"application/json\" });\n      res.end(JSON.stringify({ error: \"Method not allowed\" }));\n      return;\n    }\n\n    try {\n      const body = await this.parseRequestBody(req);\n      const request: GitSeeRequest = JSON.parse(body);\n\n      const response = await this.processRequest(request);\n\n      res.writeHead(200, { \"Content-Type\": \"application/json\" });\n      res.end(JSON.stringify(response));\n    } catch (error) {\n      console.error(\"GitSee handler error:\", error);\n      res.writeHead(500, { \"Content-Type\": \"application/json\" });\n      res.end(\n        JSON.stringify({\n          error:\n            error instanceof Error ? error.message : \"Internal server error\",\n        })\n      );\n    }\n  }\n\n  private async parseRequestBody(req: IncomingMessage): Promise<string> {\n    return new Promise((resolve, reject) => {\n      let body = \"\";\n      req.on(\"data\", (chunk: any) => (body += chunk));\n      req.on(\"end\", () => resolve(body));\n      req.on(\"error\", reject);\n    });\n  }\n\n  private async processRequest(\n    request: GitSeeRequest\n  ): Promise<GitSeeResponse> {\n    const { owner, repo, data } = request;\n    const response: GitSeeResponse = {};\n\n    // Validate input\n    if (!owner || !repo) {\n      throw new Error(\"Owner and repo are required\");\n    }\n\n    if (!Array.isArray(data) || data.length === 0) {\n      throw new Error(\"Data array is required and must not be empty\");\n    }\n\n    // Process each requested data type\n    for (const dataType of data) {\n      switch (dataType) {\n        case \"repo_info\":\n          response.repo = await this.getRepoInfo(owner, repo);\n          break;\n        case \"contributors\":\n          response.contributors = await this.getContributors(owner, repo);\n          break;\n        case \"icon\":\n          console.log(`üîç Fetching icon for ${owner}/${repo}...`);\n          response.icon = await this.getRepoIcon(owner, repo);\n          console.log(`üì∑ Icon result:`, response.icon ? 'Found' : 'Not found');\n          break;\n        case \"commits\":\n          response.commits = await this.getCommits(owner, repo);\n          break;\n        case \"branches\":\n          response.branches = await this.getBranches(owner, repo);\n          break;\n        default:\n          console.warn(`Unknown data type: ${dataType}`);\n      }\n    }\n\n    return response;\n  }\n\n  private async getRepoInfo(owner: string, repo: string): Promise<any> {\n    const cacheKey = `repo:${owner}/${repo}`;\n    const cached = this.cache.get(cacheKey);\n    if (cached) return cached;\n\n    const response = await this.octokit.rest.repos.get({ owner, repo });\n    const data = response.data;\n\n    this.cache.set(cacheKey, data);\n    return data;\n  }\n\n  private async getContributors(owner: string, repo: string): Promise<any[]> {\n    const cacheKey = `contributors:${owner}/${repo}`;\n    const cached = this.cache.get(cacheKey);\n    if (cached) return cached;\n\n    const response = await this.octokit.rest.repos.listContributors({\n      owner,\n      repo,\n      per_page: 50,\n    });\n    const data = response.data;\n\n    this.cache.set(cacheKey, data);\n    return data;\n  }\n\n  private async getCommits(owner: string, repo: string): Promise<any[]> {\n    const cacheKey = `commits:${owner}/${repo}`;\n    const cached = this.cache.get(cacheKey);\n    if (cached) return cached;\n\n    const response = await this.octokit.rest.repos.listCommits({\n      owner,\n      repo,\n      per_page: 50,\n    });\n    const data = response.data;\n\n    this.cache.set(cacheKey, data);\n    return data;\n  }\n\n  private async getBranches(owner: string, repo: string): Promise<any[]> {\n    const cacheKey = `branches:${owner}/${repo}`;\n    const cached = this.cache.get(cacheKey);\n    if (cached) return cached;\n\n    const response = await this.octokit.rest.repos.listBranches({\n      owner,\n      repo,\n    });\n    const data = response.data;\n\n    this.cache.set(cacheKey, data);\n    return data;\n  }\n\n  private async getRepoIcon(\n    owner: string,\n    repo: string\n  ): Promise<string | null> {\n    const cacheKey = `icon:${owner}/${repo}`;\n    const cached = this.cache.get(cacheKey);\n    if (cached !== undefined) {\n      console.log(`üíæ Cache hit for ${owner}/${repo} icon:`, cached ? 'Found' : 'Not found');\n      console.log(`üîÑ Clearing cache to retry (checking for rate limits)...`);\n      this.cache.clear(); // Clear cache to retry\n      // Don't return cached, let it retry\n    }\n    \n    console.log(`üöÄ Starting fresh icon fetch for ${owner}/${repo}`);\n\n    try {\n      // Get root directory contents\n      console.log(`üìÅ Getting root contents for ${owner}/${repo}...`);\n      const rootContents = await this.octokit.rest.repos.getContent({\n        owner,\n        repo,\n        path: \"\",\n      });\n\n      if (!Array.isArray(rootContents.data)) {\n        console.log(`‚ùå Root contents not an array`);\n        this.cache.set(cacheKey, null);\n        return null;\n      }\n\n      console.log(`üìÇ Found ${rootContents.data.length} files in root`);\n      console.log(`üìÇ Root files:`, rootContents.data.map((f: any) => f.name).slice(0, 10));\n\n      // Look for icon files\n      const iconFiles = rootContents.data.filter((file: any) => {\n        const name = file.name.toLowerCase();\n        const isIcon = name.includes(\"favicon\") ||\n          name.includes(\"logo\") ||\n          name.includes(\"icon\") ||\n          (name.startsWith(\"apple-touch\") && name.includes(\"icon\"));\n        if (isIcon) {\n          console.log(`üéØ Found potential icon in root: ${file.name}`);\n        }\n        return isIcon;\n      });\n\n      console.log(`üìä Found ${iconFiles.length} icon files in root`);\n\n      // Check common subdirectories\n      const subdirs = [\"public\", \"assets\", \"static\", \"images\", \"img\"];\n      for (const subdir of subdirs) {\n        const subdirExists = rootContents.data.find(\n          (item: any) => item.name === subdir && item.type === \"dir\"\n        );\n\n        if (subdirExists) {\n          try {\n            const subdirContents = await this.octokit.rest.repos.getContent({\n              owner,\n              repo,\n              path: subdir,\n            });\n\n            if (Array.isArray(subdirContents.data)) {\n              const subdirIcons = subdirContents.data.filter((file: any) => {\n                const name = file.name.toLowerCase();\n                return (\n                  name.includes(\"favicon\") ||\n                  name.includes(\"logo\") ||\n                  name.includes(\"icon\")\n                );\n              });\n              iconFiles.push(\n                ...subdirIcons.map((f: any) => ({\n                  ...f,\n                  path: `${subdir}/${f.name}`,\n                }))\n              );\n            }\n          } catch (error) {\n            // Continue if subdirectory access fails\n            continue;\n          }\n        }\n      }\n\n      // Sort by resolution (highest first)\n      const sortedIcons = this.sortIconsByResolution(iconFiles);\n\n      // Try to fetch the best icon\n      for (const iconFile of sortedIcons) {\n        try {\n          const iconResponse = await this.octokit.rest.repos.getContent({\n            owner,\n            repo,\n            path: iconFile.path || iconFile.name,\n          });\n\n          if (\"content\" in iconResponse.data && iconResponse.data.content) {\n            const iconData = `data:image/png;base64,${iconResponse.data.content}`;\n            this.cache.set(cacheKey, iconData);\n            return iconData;\n          }\n        } catch (error) {\n          continue;\n        }\n      }\n\n      this.cache.set(cacheKey, null);\n      return null;\n    } catch (error: any) {\n      console.error(`üí• ERROR fetching repo icon for ${owner}/${repo}:`, error);\n      \n      // Check if it's a rate limit error\n      if (error.status === 403 || error.message?.includes('rate limit')) {\n        console.error(`‚è±Ô∏è  RATE LIMIT HIT! Error:`, error.message);\n        console.error(`üîë Using token:`, !!this.octokit.auth);\n      }\n      \n      this.cache.set(cacheKey, null);\n      return null;\n    }\n  }\n\n  private sortIconsByResolution(iconFiles: any[]): any[] {\n    return iconFiles.sort((a, b) => {\n      const aName = a.name.toLowerCase();\n      const bName = b.name.toLowerCase();\n\n      const getResolution = (name: string) => {\n        const match = name.match(/(\\d+)x\\d+/);\n        if (match) return parseInt(match[1]);\n\n        if (name.includes(\"512\")) return 512;\n        if (name.includes(\"256\")) return 256;\n        if (name.includes(\"192\")) return 192;\n        if (name.includes(\"180\")) return 180;\n        if (name.includes(\"apple-touch\")) return 180;\n        if (name.includes(\"android-chrome\")) return 192;\n        if (name === \"favicon.ico\") return 64;\n        if (name.includes(\"logo\")) return 100;\n\n        return 50;\n      };\n\n      return getResolution(bName) - getResolution(aName); // Higher first\n    });\n  }\n}\n\n// Factory function for easy integration\nexport function createGitSeeHandler(options: GitSeeOptions = {}) {\n  const handler = new GitSeeHandler(options);\n  return (req: IncomingMessage, res: ServerResponse) =>\n    handler.handle(req, res);\n}\n"],"mappings":"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","names":[]}