{"version":3,"sources":["../../server/agent/repo-cloner.ts","../../server/agent/explore.ts","../../server/agent/prompts/first_pass.ts","../../server/agent/prompts/general.ts","../../server/agent/prompts/services.ts","../../server/agent/tools.ts","../../server/agent/explore-wrapper.ts"],"sourcesContent":["import { spawn } from \"child_process\";\nimport * as fs from \"fs\";\nimport * as path from \"path\";\n\nexport interface CloneResult {\n  success: boolean;\n  localPath: string;\n  error?: string;\n  duration?: number;\n}\n\nexport class RepoCloner {\n  private static readonly BASE_PATH = \"/tmp/gitsee\";\n  private static clonePromises: Map<string, Promise<CloneResult>> = new Map();\n\n  /**\n   * Clone a repository in the background (fire-and-forget)\n   */\n  static async cloneInBackground(owner: string, repo: string): Promise<void> {\n    const repoKey = `${owner}/${repo}`;\n\n    // If already cloning, don't start another clone\n    if (this.clonePromises.has(repoKey)) {\n      return;\n    }\n\n    // Start clone and store promise\n    const clonePromise = this.cloneRepo(owner, repo);\n    this.clonePromises.set(repoKey, clonePromise);\n\n    // Handle completion (success or failure)\n    clonePromise\n      .finally(() => {\n        // Clean up the promise from the map after completion\n        setTimeout(() => {\n          this.clonePromises.delete(repoKey);\n        }, 5000); // Keep for 5 seconds to allow quick access\n      })\n      .catch((error) => {\n        console.error(\n          `üö® Background clone failed for ${owner}/${repo}:`,\n          error.message,\n        );\n      });\n  }\n\n  /**\n   * Clone a repository to /tmp/gitsee/{owner}/{repo}\n   */\n  static async cloneRepo(owner: string, repo: string): Promise<CloneResult> {\n    const startTime = Date.now();\n    const repoPath = path.join(this.BASE_PATH, owner, repo);\n    const githubUrl = `https://github.com/${owner}/${repo}.git`;\n\n    console.log(`üì• Starting clone of ${owner}/${repo} to ${repoPath}`);\n\n    try {\n      // Check if already exists\n      if (fs.existsSync(repoPath)) {\n        console.log(\n          `üìÇ Repository ${owner}/${repo} already exists at ${repoPath}`,\n        );\n        return {\n          success: true,\n          localPath: repoPath,\n          duration: Date.now() - startTime,\n        };\n      }\n\n      // Ensure parent directory exists\n      const parentDir = path.dirname(repoPath);\n      fs.mkdirSync(parentDir, { recursive: true });\n\n      // Clone with shallow copy (depth 1) and single branch for speed\n      const result = await this.executeGitClone(githubUrl, repoPath);\n\n      const duration = Date.now() - startTime;\n\n      if (result.success) {\n        console.log(`‚úÖ Successfully cloned ${owner}/${repo} in ${duration}ms`);\n        return {\n          success: true,\n          localPath: repoPath,\n          duration,\n        };\n      } else {\n        console.error(`‚ùå Failed to clone ${owner}/${repo}:`, result.error);\n        return {\n          success: false,\n          localPath: repoPath,\n          error: result.error,\n          duration,\n        };\n      }\n    } catch (error: any) {\n      const duration = Date.now() - startTime;\n      console.error(`üí• Clone error for ${owner}/${repo}:`, error.message);\n\n      return {\n        success: false,\n        localPath: repoPath,\n        error: error.message,\n        duration,\n      };\n    }\n  }\n\n  /**\n   * Execute git clone command with shallow clone and single branch\n   */\n  private static executeGitClone(\n    githubUrl: string,\n    targetPath: string,\n  ): Promise<{ success: boolean; error?: string }> {\n    return new Promise((resolve) => {\n      // Use shallow clone with single branch for maximum speed\n      const gitProcess = spawn(\"git\", [\n        \"clone\",\n        \"--depth\",\n        \"1\", // Shallow clone (only latest commit)\n        \"--single-branch\", // Only clone the default branch\n        \"--no-tags\", // Skip tags for speed\n        githubUrl,\n        targetPath,\n      ]);\n\n      let errorOutput = \"\";\n\n      gitProcess.stderr.on(\"data\", (data) => {\n        errorOutput += data.toString();\n      });\n\n      gitProcess.stdout.on(\"data\", (data) => {\n        // Git clone sends progress to stderr, but we can capture stdout too\n        const output = data.toString();\n        if (output.includes(\"Cloning\") || output.includes(\"Receiving\")) {\n          console.log(`üì• ${output.trim()}`);\n        }\n      });\n\n      gitProcess.on(\"close\", (code) => {\n        if (code === 0) {\n          resolve({ success: true });\n        } else {\n          resolve({\n            success: false,\n            error: errorOutput || `Git clone exited with code ${code}`,\n          });\n        }\n      });\n\n      gitProcess.on(\"error\", (error) => {\n        resolve({\n          success: false,\n          error: `Failed to start git process: ${error.message}`,\n        });\n      });\n    });\n  }\n\n  /**\n   * Check if a repository is already cloned\n   */\n  static isRepoCloned(owner: string, repo: string): boolean {\n    const repoPath = path.join(this.BASE_PATH, owner, repo);\n    return (\n      fs.existsSync(repoPath) && fs.existsSync(path.join(repoPath, \".git\"))\n    );\n  }\n\n  /**\n   * Get the local path for a repository\n   */\n  static getRepoPath(owner: string, repo: string): string {\n    return path.join(this.BASE_PATH, owner, repo);\n  }\n\n  /**\n   * Wait for a repository clone to complete\n   */\n  static async waitForClone(owner: string, repo: string): Promise<CloneResult> {\n    const repoKey = `${owner}/${repo}`;\n\n    // Check if already cloned\n    if (this.isRepoCloned(owner, repo)) {\n      return {\n        success: true,\n        localPath: this.getRepoPath(owner, repo),\n      };\n    }\n\n    // Check if currently cloning\n    const clonePromise = this.clonePromises.get(repoKey);\n    if (clonePromise) {\n      console.log(`‚è≥ Waiting for ongoing clone of ${owner}/${repo}...`);\n      return await clonePromise;\n    }\n\n    // Start a new clone\n    console.log(`üöÄ Starting new clone for ${owner}/${repo}...`);\n    return await this.cloneRepo(owner, repo);\n  }\n\n  /**\n   * Get clone result if available (non-blocking)\n   */\n  static async getCloneResult(\n    owner: string,\n    repo: string,\n  ): Promise<CloneResult | null> {\n    const repoKey = `${owner}/${repo}`;\n\n    // Check if already cloned\n    if (this.isRepoCloned(owner, repo)) {\n      return {\n        success: true,\n        localPath: this.getRepoPath(owner, repo),\n      };\n    }\n\n    // Check if currently cloning\n    const clonePromise = this.clonePromises.get(repoKey);\n    if (clonePromise) {\n      try {\n        return await clonePromise;\n      } catch (error) {\n        return {\n          success: false,\n          localPath: this.getRepoPath(owner, repo),\n          error: error instanceof Error ? error.message : \"Unknown error\",\n        };\n      }\n    }\n\n    // Not cloned and not cloning\n    return null;\n  }\n\n  /**\n   * Clean up old repositories (optional utility)\n   */\n  static async cleanupOldRepos(maxAgeHours: number = 24): Promise<void> {\n    try {\n      if (!fs.existsSync(this.BASE_PATH)) {\n        return;\n      }\n\n      const cutoffTime = Date.now() - maxAgeHours * 60 * 60 * 1000;\n\n      // Walk through /tmp/gitsee/{owner}/{repo} directories\n      const owners = fs.readdirSync(this.BASE_PATH);\n\n      for (const owner of owners) {\n        const ownerPath = path.join(this.BASE_PATH, owner);\n        if (!fs.statSync(ownerPath).isDirectory()) continue;\n\n        const repos = fs.readdirSync(ownerPath);\n\n        for (const repo of repos) {\n          const repoPath = path.join(ownerPath, repo);\n          const stats = fs.statSync(repoPath);\n\n          if (stats.isDirectory() && stats.mtime.getTime() < cutoffTime) {\n            console.log(`üóëÔ∏è Cleaning up old repo: ${owner}/${repo}`);\n            fs.rmSync(repoPath, { recursive: true, force: true });\n          }\n        }\n      }\n    } catch (error: any) {\n      console.error(\"Error cleaning up old repos:\", error.message);\n    }\n  }\n}\n","import { generateText, tool, hasToolCall, ModelMessage } from \"ai\";\nimport { getModel, getApiKeyForProvider, Provider } from \"aieo\";\nimport * as prompts from \"./prompts\";\nimport { z } from \"zod\";\nimport { getRepoMap, getFileSummary, fulltextSearch } from \"./tools\";\n\nfunction logStep(contents: any) {\n  if (!Array.isArray(contents)) return;\n  for (const content of contents) {\n    if (content.type === \"tool-call\" && content.toolName !== \"final_answer\") {\n      console.log(\"TOOL CALL:\", content.toolName, \":\", content.input);\n    }\n  }\n}\n\nexport type RepoContextMode = \"first_pass\" | \"general\" | \"services\";\n\ninterface ContextConfig {\n  file_lines: number;\n  final_answer_description: string;\n  system: string;\n}\n\nconst CONFIG: Record<RepoContextMode, ContextConfig> = {\n  first_pass: {\n    file_lines: 100,\n    system: prompts.FIRST_PASS.EXPLORER,\n    final_answer_description: prompts.FIRST_PASS.FINAL_ANSWER,\n  },\n  general: {\n    file_lines: 40,\n    system: prompts.GENERAL.EXPLORER,\n    final_answer_description: prompts.GENERAL.FINAL_ANSWER,\n  },\n  services: {\n    file_lines: 40,\n    system: prompts.SERVICES.EXPLORER,\n    final_answer_description: prompts.SERVICES.FINAL_ANSWER,\n  },\n};\n\nexport interface GeneralContextResult {\n  summary: string;\n  key_files: string[];\n  features: string[];\n}\n\nexport interface FirstPassContextResult {\n  summary: string;\n  key_files: string[];\n  infrastructure: string[];\n  dependencies: string[];\n  user_stories: string[];\n  pages: string[];\n}\n\nexport async function get_context(\n  prompt: string | ModelMessage[],\n  repoPath: string,\n  mode: RepoContextMode = \"general\"\n): Promise<string> {\n  const startTime = Date.now();\n\n  const provider = process.env.LLM_PROVIDER || \"anthropic\";\n  const apiKey = getApiKeyForProvider(provider);\n  const model = await getModel(provider as Provider, apiKey as string);\n  const tools = {\n    repo_overview: tool({\n      description:\n        \"Get a high-level view of the codebase architecture and structure. Use this to understand the project layout and identify where specific functionality might be located. Call this when you need to: 1) Orient yourself in an unfamiliar codebase, 2) Locate which directories/files might contain relevant code for a user's question, 3) Understand the overall project structure before diving deeper. Don't call this if you already know which specific files you need to examine.\",\n      inputSchema: z.object({}),\n      execute: async () => {\n        try {\n          return await getRepoMap(repoPath);\n        } catch (e) {\n          return \"Could not retrieve repository map\";\n        }\n      },\n    }),\n    file_summary: tool({\n      description:\n        \"Get a summary of what a specific file contains and its role in the codebase. Use this when you have identified a potentially relevant file and need to understand: 1) What functions/components it exports, 2) What its main responsibility is, 3) Whether it's worth exploring further for the user's question. Only the first 40-100 lines of the file will be returned. Call this with a hypothesis like 'This file probably handles user authentication' or 'This looks like the main dashboard component'. Don't call this to browse random files.\",\n      inputSchema: z.object({\n        file_path: z.string().describe(\"Path to the file to summarize\"),\n        hypothesis: z\n          .string()\n          .describe(\n            \"What you think this file might contain or handle, based on its name/location\"\n          ),\n      }),\n      execute: async ({ file_path }: { file_path: string }) => {\n        try {\n          return getFileSummary(file_path, repoPath, CONFIG[mode].file_lines);\n        } catch (e) {\n          return \"Bad file path\";\n        }\n      },\n    }),\n    fulltext_search: tool({\n      description:\n        \"Search the entire codebase for a specific term. Use this when you need to find a specific function, component, or file. Call this when the user provided specific text that might be present in the codebase. For example, if the query is 'Add a subtitle to the User Journeys page', you could call this with the query \\\"User Journeys\\\". Don't call this if you do not have specific text to search for\",\n      inputSchema: z.object({\n        query: z.string().describe(\"The term to search for\"),\n      }),\n      execute: async ({ query }: { query: string }) => {\n        try {\n          return await fulltextSearch(query, repoPath);\n        } catch (e) {\n          return `Search failed: ${e}`;\n        }\n      },\n    }),\n    final_answer: tool({\n      // The tool that signals the end of the process\n      description: CONFIG[mode].final_answer_description,\n      inputSchema: z.object({ answer: z.string() }),\n      execute: async ({ answer }: { answer: string }) => answer,\n    }),\n  };\n  if (mode === \"first_pass\") {\n    delete (tools as Record<string, any>).fulltext_search;\n  }\n  const { steps } = await generateText({\n    model,\n    tools,\n    prompt,\n    system: CONFIG[mode].system,\n    stopWhen: hasToolCall(\"final_answer\"),\n    onStepFinish: (sf) => logStep(sf.content),\n  });\n  let final = \"\";\n  let lastText = \"\";\n  for (const step of steps) {\n    for (const item of step.content) {\n      if (item.type === \"text\" && item.text && item.text.trim().length > 0) {\n        lastText = item.text.trim();\n      }\n    }\n  }\n  steps.reverse();\n  for (const step of steps) {\n    // console.log(\"step\", JSON.stringify(step.content, null, 2));\n    const final_answer = step.content.find((c) => {\n      return c.type === \"tool-result\" && c.toolName === \"final_answer\";\n    });\n    if (final_answer) {\n      final = (final_answer as any).output;\n    }\n  }\n  if (!final && lastText) {\n    console.warn(\n      \"No final_answer tool call detected; falling back to last reasoning text.\"\n    );\n    final = `${lastText}\\n\\n(Note: Model did not invoke final_answer tool; using last reasoning text as answer.)`;\n  }\n\n  const endTime = Date.now();\n  const duration = endTime - startTime;\n  console.log(\n    `‚è±Ô∏è get_context completed in ${duration}ms (${(duration / 1000).toFixed(2)}s)`\n  );\n\n  return final;\n}\n\nsetTimeout(() => {\n  get_context(\n    \"How do I set up this project?\",\n    \"/Users/evanfeenstra/code/sphinx2/hive\",\n    \"services\"\n  ).then((result) => {\n    console.log(\"=============== FINAL RESULT: ===============\");\n    console.log(result);\n  });\n});\n\n// infra, dependencies/integratins, user stories, pages\n","export const EXPLORER = `\nYou are a codebase exploration assistant. Use the provided tools to quickly explore the codebase and get a high-level understanding. DONT GO DEEP. Focus on general language and framework, specific core libraries, integrations, and features. Try to understand the main user story of the codebase just by looking at the file structure. YOU NEED TO RETURN AN ANSWER AS FAST AS POSSIBLE! So the best approach is 3-4 tool calls only: 1) repo_overview 2) file_summary of the package.json (or other main package file), 3) The main router file of page/endpoint names, ONLY if you can identify it first try, and 4) final_answer. DO NOT GO DEEPER THAN THIS.\n`;\n\nexport const FINAL_ANSWER = `\nProvide the final answer to the user. YOU **MUST** CALL THIS TOOL AT THE END OF YOUR EXPLORATION.\n\nReturn a simple JSON object with the following fields:\n\n- \"summary\": a SHORT 1-2 sentence synopsis of the codebase.\n- \"key_files\": an array of a few core package and LLM agent files. Focus on package files like package.json, and core markdown files. DO NOT include code files unless they are central to the codebase, such as the main DB schema file.\n- \"infrastructure\"/\"dependencies\"/\"user_stories\"/\"pages\": short arrays of core elements of the application,: 1-2 words each. Include just a few dependencies, ONLY if it seems like they are central to the application. Try to find the main user flows and pages just by looking at file names, or a couple file contents. In total try to target 10-12 items for these four categories. Get at least one in each category, but don't make anything up!\n\n{\n  \"summary\": \"This is a next.js project with a postgres database and a github oauth implementation\",\n  \"key_files\": [\"package.json\", \"README.md\", \"CLAUDE.md\", \"AGENTS.md\", \"schema.prisma\"],\n  \"infrastructure\": [\"Next.js\", \"Postgres\", \"Typescript\"],\n  \"dependencies\": [\"Github Integration\", \"D3.js\", \"React\"],\n  \"user_stories\": [\"Authentication\", \"Payments\"],\n  \"pages\": [\"User Journeys page\", \"Admin Dashboard\"]\n}\n`;\n","export const EXPLORER = `\nYou are a codebase exploration assistant. Use the provided tools to explore the codebase and answer the user's question. Focus on general language and framework first, then specific core libraries, integrations, and features. Try to understand the core functionallity (user stories) of the codebase. Explore files, functions, and component names to understand the main user stories, pages, UX components, or workflows in the application.\n`;\n\nexport const FINAL_ANSWER = `\nProvide the final answer to the user. YOU **MUST** CALL THIS TOOL AT THE END OF YOUR EXPLORATION.\n\nReturn a simple JSON object with the following fields:\n\n- \"summary\": a 1-4 sentence short synopsis of the codebase.\n- \"key_files\": an array of the core package and LLM agent files. Focus on package files like package.json, and core markdown files. DO NOT include code files unless they are central to the codebase, such as the main DB schema file.\n- \"features\": an array of about 20 core user stories or pages, 1-4 words each. Each one should be focused on ONE SINGLE user action... DO NOT flesh these out for not reason!! Keep them short and to the point BUT SPECIFIC, NOT GENERAL! For example \"Github Integration\" and \"Google Oauth Login\" are separate, not one \"Integrations\".\n\n{\n  \"summary\": \"This is a next.js project with a postgres database and a github oauth implementation\",\n  \"key_files\": [\"package.json\", \"README.md\", \"CLAUDE.md\", \"AGENTS.md\", \"schema.prisma\"],\n  \"features\": [\"Authentication\", \"User Journeys page\", \"Payments\", \"Admin Dashboard\", \"Notifications\", \"User Profile\", \"Settings page\", \"Data Visualization\", \"Github Integration\", \"File Uploads\", \"Search Functionality\", \"Real-time Collaboration Tools\", \"Activity Logs\", \"Billing and Subscription Management\", \"Help and Support\"]\n}\n`;\n","export const EXPLORER = `\nYou are a codebase exploration assistant. Your job is to identify the various services, integrations, and environment variables need to setup and run this codebase. Take your time exploring the codebase to find the most likely setup services, and env vars. You might need to use the fulltext_search tool to find instance of \"process.env.\" or other similar patterns, based on the coding language(s) used in the project. You will be asked to output actual configuration files at the end, so make sure you find everything you need to do that.\n`;\n\nexport const FINAL_ANSWER = `\nProvide the final answer to the user. YOU **MUST** CALL THIS TOOL AT THE END OF YOUR EXPLORATION.\n\nReturn three files: a pm2.config.js, a .env file, and a docker-compose.yml. Please put the title of each file, then the content in backticks.\n\n- pm2.config.js: the actual dev services for running this project. Often its just one single service! But sometimes the backend/frontend might be separate services.\n- .env: the environment variables needed to run the project, with example values.\n- docker-compose.yml: the auxiliary services needed to run the project, such as databases, caches, queues, etc. IMPORTANT: there is a special \"app\" service in the docker-compsose.yaml that you MUST include! It is the service in which the codebase is mounted. Here is the EXACT content that it should have:\n\\`\\`\\`\n  app:\n    build:\n      context: .\n      dockerfile: Dockerfile\n    volumes:\n      - ../..:/workspaces:cached\n    command: sleep infinity\n    networks:\n      - app_network\n    extra_hosts:\n      - \"localhost:172.17.0.1\"\n      - \"host.docker.internal:host-gateway\"\n\\`\\`\\`\n\n# HERE IS AN EXAMPLE OUTPUT:\n\npm2.config.js\n\n\\`\\`\\`js\nmodule.exports = {\n  apps: [\n    {\n      name: \"frontend\",\n      script: \"npm run dev\",\n      cwd: \"/workspaces/my-project\",\n      instances: 1,\n      autorestart: true,\n      watch: false,\n      max_memory_restart: \"1G\",\n      env: {\n        PORT: \"3000\",\n        INSTALL_COMMAND: \"npm install\",\n        BUILD_COMMAND: \"npm run build\"\n      }\n    }\n  ],\n};\n\\`\\`\\`\n\n.env\n\n\\`\\`\\`sh\n# Database\nDATABASE_URL=postgresql://postgres:password@localhost:5432/backend_db\nJWT_KEY=your_jwt_secret_key\n\\`\\`\\`\n\ndocker-compose.yml\n\n\\`\\`\\`yaml\nversion: '3.8'\nnetworks:\n  app_network:\n    driver: bridge\nservices:\n  app:\n    build:\n      context: .\n      dockerfile: Dockerfile\n    volumes:\n      - ../..:/workspaces:cached\n    command: sleep infinity\n    networks:\n      - app_network\n    extra_hosts:\n      - \"localhost:172.17.0.1\"\n      - \"host.docker.internal:host-gateway\"\n  postgres:\n    image: postgres:15\n    container_name: backend-postgres\n    environment:\n      - POSTGRES_DB=backend_db\n      - POSTGRES_USER=postgres\n      - POSTGRES_PASSWORD=password\n    ports:\n      - \"5432:5432\"\n    volumes:\n      - postgres_data:/var/lib/postgresql/data\n    networks:\n      - app_network\n    restart: unless-stopped\nvolumes:\n  postgres_data:\n\\`\\`\\`\n\n`;\n","import { spawn } from \"child_process\";\nimport * as fs from \"fs\";\nimport * as path from \"path\";\n\n// Execute ripgrep commands with proper streaming\nfunction execCommand(\n  command: string,\n  cwd: string,\n  timeoutMs: number = 10000,\n): Promise<string> {\n  return new Promise((resolve, reject) => {\n    // Parse the ripgrep command and add explicit directory\n    const parts = command.split(\" \");\n    const rgIndex = parts.findIndex(\n      (part) => part === \"rg\" || part.endsWith(\"/rg\"),\n    );\n\n    if (rgIndex === -1) {\n      reject(new Error(\"Not a ripgrep command\"));\n      return;\n    }\n\n    // Build ripgrep arguments properly, removing quotes and adding explicit directory\n    const args = parts.slice(rgIndex + 1).map((arg) => {\n      // Remove surrounding quotes (both single and double)\n      if (\n        (arg.startsWith('\"') && arg.endsWith('\"')) ||\n        (arg.startsWith(\"'\") && arg.endsWith(\"'\"))\n      ) {\n        return arg.slice(1, -1);\n      }\n      return arg;\n    });\n    args.push(\"./\"); // Add explicit directory to prevent stdin detection issues\n\n    const process = spawn(\"rg\", args, {\n      cwd,\n      stdio: [\"ignore\", \"pipe\", \"pipe\"],\n    });\n\n    let stdout = \"\";\n    let stderr = \"\";\n    let resolved = false;\n\n    // Set up timeout\n    const timeout = setTimeout(() => {\n      if (!resolved) {\n        process.kill(\"SIGKILL\");\n        resolved = true;\n        reject(new Error(`Command timed out after ${timeoutMs}ms`));\n      }\n    }, timeoutMs);\n\n    process.stdout.on(\"data\", (data) => {\n      stdout += data.toString();\n\n      // Safety check: if output gets too large, kill process and resolve\n      if (stdout.length > 10000) {\n        process.kill(\"SIGKILL\");\n        if (!resolved) {\n          resolved = true;\n          clearTimeout(timeout);\n          const truncated =\n            stdout.substring(0, 10000) +\n            \"\\n\\n[... output truncated due to size limit ...]\";\n          resolve(truncated);\n        }\n        return;\n      }\n    });\n\n    process.stderr.on(\"data\", (data) => {\n      stderr += data.toString();\n    });\n\n    process.on(\"close\", (code) => {\n      if (!resolved) {\n        resolved = true;\n        clearTimeout(timeout);\n\n        if (code === 0) {\n          if (stdout.length > 10000) {\n            const truncated =\n              stdout.substring(0, 10000) +\n              \"\\n\\n[... output truncated to 10,000 characters ...]\";\n            resolve(truncated);\n          } else {\n            resolve(stdout);\n          }\n        } else if (code === 1) {\n          // ripgrep returns exit code 1 when no matches found\n          resolve(\"No matches found\");\n        } else {\n          reject(new Error(`Command failed with code ${code}: ${stderr}`));\n        }\n      }\n    });\n\n    process.on(\"error\", (error) => {\n      if (!resolved) {\n        resolved = true;\n        clearTimeout(timeout);\n        reject(error);\n      }\n    });\n  });\n}\n\n// Get repository map using git ls-tree and tree\nexport async function getRepoMap(repoPath: string): Promise<string> {\n  if (!repoPath) {\n    return \"No repository path provided\";\n  }\n\n  if (!fs.existsSync(repoPath)) {\n    return \"Repository not cloned yet\";\n  }\n\n  try {\n    const result = await execCommand(\n      \"git ls-tree -r --name-only HEAD | tree -L 3 --fromfile\",\n      repoPath,\n    );\n    return result;\n  } catch (error: any) {\n    return `Error getting repo map: ${error.message}`;\n  }\n}\n\n// Get file summary by reading first 40 lines\nexport function getFileSummary(\n  filePath: string,\n  repoPath: string,\n  linesLimit: number,\n): string {\n  if (!repoPath) {\n    return \"No repository path provided\";\n  }\n\n  const fullPath = path.join(repoPath, filePath);\n\n  if (!fs.existsSync(fullPath)) {\n    return \"File not found\";\n  }\n\n  try {\n    const content = fs.readFileSync(fullPath, \"utf-8\");\n    const lines = content\n      .split(\"\\n\")\n      .slice(0, linesLimit || 40)\n      .map((line) => {\n        // Limit each line to 200 characters to handle minified files\n        return line.length > 200 ? line.substring(0, 200) + \"...\" : line;\n      });\n\n    return lines.join(\"\\n\");\n  } catch (error: any) {\n    return `Error reading file: ${error.message}`;\n  }\n}\n\n// Fulltext search using ripgrep\nexport async function fulltextSearch(\n  query: string,\n  repoPath: string,\n): Promise<string> {\n  if (!repoPath) {\n    return \"No repository path provided\";\n  }\n\n  if (!fs.existsSync(repoPath)) {\n    return \"Repository not cloned yet\";\n  }\n\n  try {\n    const result = await execCommand(\n      `rg --glob '!dist' --ignore-file .gitignore -C 2 -n --max-count 10 --max-columns 200 \"${query}\"`,\n      repoPath,\n      5000,\n    );\n\n    // Limit the result to 10,000 characters to prevent overwhelming output\n    if (result.length > 10000) {\n      return (\n        result.substring(0, 10000) +\n        \"\\n\\n[... output truncated to 10,000 characters ...]\"\n      );\n    }\n\n    return result;\n  } catch (error: any) {\n    // Ripgrep returns exit code 1 when no matches found, which is not really an error\n    if (error.message.includes(\"code 1\")) {\n      return `No matches found for \"${query}\"`;\n    }\n    return `Error searching: ${error.message}`;\n  }\n}\n","import {\n  get_context,\n  RepoContextMode,\n  GeneralContextResult,\n  FirstPassContextResult,\n} from \"./explore.js\";\n\nexport type ExplorationResult =\n  | GeneralContextResult\n  | FirstPassContextResult\n  | string; // services\n\nexport async function explore(\n  prompt: string | any[],\n  repoPath: string,\n  mode: RepoContextMode = \"first_pass\"\n): Promise<ExplorationResult> {\n  const startTime = Date.now();\n  console.log(`ü§ñ Starting ${mode} exploration...`);\n\n  try {\n    // Get raw JSON string from get_context\n    const jsonString = await get_context(prompt, repoPath, mode);\n    console.log(\n      `üìã Raw exploration result:`,\n      jsonString.substring(0, 200) + \"...\"\n    );\n\n    if (mode === \"services\") {\n      return jsonString; // Return raw string for services mode (not JSON)\n    }\n\n    // Parse the JSON string\n    let parsedResult: any;\n    try {\n      parsedResult = JSON.parse(jsonString);\n    } catch (parseError) {\n      console.warn(\"‚ö†Ô∏è Failed to parse JSON, treating as raw summary\");\n      // Fallback: create a structured result with the raw string as summary\n      if (mode === \"first_pass\") {\n        parsedResult = {\n          summary: jsonString,\n          key_files: [],\n          infrastructure: [],\n          dependencies: [],\n          user_stories: [],\n          pages: [],\n        };\n      } else {\n        parsedResult = {\n          summary: jsonString,\n          key_files: [],\n          features: [],\n        };\n      }\n    }\n\n    // Validate and ensure proper structure based on mode\n    let result: ExplorationResult;\n\n    if (mode === \"first_pass\") {\n      result = {\n        summary: parsedResult.summary || jsonString,\n        key_files: parsedResult.key_files || [],\n        infrastructure: parsedResult.infrastructure || [],\n        dependencies: parsedResult.dependencies || [],\n        user_stories: parsedResult.user_stories || [],\n        pages: parsedResult.pages || [],\n      } as FirstPassContextResult;\n    } else {\n      result = {\n        summary: parsedResult.summary || jsonString,\n        key_files: parsedResult.key_files || [],\n        features: parsedResult.features || [],\n      } as GeneralContextResult;\n    }\n\n    const endTime = Date.now();\n    const duration = endTime - startTime;\n    console.log(`‚úÖ ${mode} exploration completed in ${duration}ms`);\n    console.log(\n      `üìä Result: ${result.key_files.length} key files, summary: ${result.summary.substring(0, 100)}...`\n    );\n\n    return result;\n  } catch (error) {\n    console.error(`üí• Exploration failed:`, error);\n\n    // Return error result with proper structure\n    if (mode === \"first_pass\") {\n      return {\n        summary: `Exploration failed: ${error instanceof Error ? error.message : \"Unknown error\"}`,\n        key_files: [],\n        infrastructure: [],\n        dependencies: [],\n        user_stories: [],\n        pages: [],\n      } as FirstPassContextResult;\n    } else {\n      return {\n        summary: `Exploration failed: ${error instanceof Error ? error.message : \"Unknown error\"}`,\n        key_files: [],\n        features: [],\n      } as GeneralContextResult;\n    }\n  }\n}\n"],"mappings":"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","names":["EXPLORER","FINAL_ANSWER","EXPLORER","FINAL_ANSWER","spawn","fs","path","process"]}